
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003730  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080037ec  080037ec  000047ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003824  08003824  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003824  08003824  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003824  08003824  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003824  08003824  00004824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003828  08003828  00004828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800382c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  2000000c  08003838  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  08003838  0000563c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e7e  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a0d  00000000  00000000  0000deb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0000f8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000546  00000000  00000000  0000ffa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010388  00000000  00000000  000104e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f0d  00000000  00000000  0002086e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006316e  00000000  00000000  0002a77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008d8e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001724  00000000  00000000  0008d92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0008f050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080037d4 	.word	0x080037d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080037d4 	.word	0x080037d4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fe8e 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f990 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 fb3e 	bl	80008a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800022c:	f000 fb0e 	bl	800084c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000230:	f000 f9ec 	bl	800060c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000234:	f000 fa1a 	bl	800066c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000238:	f000 fa48 	bl	80006cc <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800023c:	f000 fa76 	bl	800072c <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 8000240:	f000 faa4 	bl	800078c <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 8000244:	f000 fad2 	bl	80007ec <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART1_RxBuffer, 20); //Read from HMI
 8000248:	492b      	ldr	r1, [pc, #172]	@ (80002f8 <main+0xdc>)
 800024a:	4b2c      	ldr	r3, [pc, #176]	@ (80002fc <main+0xe0>)
 800024c:	2214      	movs	r2, #20
 800024e:	0018      	movs	r0, r3
 8000250:	f003 fa0f 	bl	8003672 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000254:	4b2a      	ldr	r3, [pc, #168]	@ (8000300 <main+0xe4>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b29      	ldr	r3, [pc, #164]	@ (8000300 <main+0xe4>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2104      	movs	r1, #4
 8000260:	438a      	bics	r2, r1
 8000262:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart5, UART5_RxBuffer, 20); //Read from Robot
 8000264:	4927      	ldr	r1, [pc, #156]	@ (8000304 <main+0xe8>)
 8000266:	4b28      	ldr	r3, [pc, #160]	@ (8000308 <main+0xec>)
 8000268:	2214      	movs	r2, #20
 800026a:	0018      	movs	r0, r3
 800026c:	f003 fa01 	bl	8003672 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart5_rx, DMA_IT_HT);
 8000270:	4b26      	ldr	r3, [pc, #152]	@ (800030c <main+0xf0>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	4b25      	ldr	r3, [pc, #148]	@ (800030c <main+0xf0>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	2104      	movs	r1, #4
 800027c:	438a      	bics	r2, r1
 800027e:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, UART4_RxBuffer, 20); //Read from Laser Controller
 8000280:	4923      	ldr	r1, [pc, #140]	@ (8000310 <main+0xf4>)
 8000282:	4b24      	ldr	r3, [pc, #144]	@ (8000314 <main+0xf8>)
 8000284:	2214      	movs	r2, #20
 8000286:	0018      	movs	r0, r3
 8000288:	f003 f9f3 	bl	8003672 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart4_rx, DMA_IT_HT);
 800028c:	4b22      	ldr	r3, [pc, #136]	@ (8000318 <main+0xfc>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	4b21      	ldr	r3, [pc, #132]	@ (8000318 <main+0xfc>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2104      	movs	r1, #4
 8000298:	438a      	bics	r2, r1
 800029a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  if (buffer[0] != 0 )
 800029c:	4b1f      	ldr	r3, [pc, #124]	@ (800031c <main+0x100>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d0fb      	beq.n	800029c <main+0x80>
	  {
		  memcpy(transfer, buffer, 20);
 80002a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000320 <main+0x104>)
 80002a6:	4a1d      	ldr	r2, [pc, #116]	@ (800031c <main+0x100>)
 80002a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002aa:	c313      	stmia	r3!, {r0, r1, r4}
 80002ac:	ca03      	ldmia	r2!, {r0, r1}
 80002ae:	c303      	stmia	r3!, {r0, r1}
		  memmove(buffer, &buffer[20], 180);
 80002b0:	491c      	ldr	r1, [pc, #112]	@ (8000324 <main+0x108>)
 80002b2:	4b1a      	ldr	r3, [pc, #104]	@ (800031c <main+0x100>)
 80002b4:	22b4      	movs	r2, #180	@ 0xb4
 80002b6:	0018      	movs	r0, r3
 80002b8:	f003 fa43 	bl	8003742 <memmove>
		  memset(&buffer[180], 0, 20);
 80002bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000328 <main+0x10c>)
 80002be:	2214      	movs	r2, #20
 80002c0:	2100      	movs	r1, #0
 80002c2:	0018      	movs	r0, r3
 80002c4:	f003 fa4f 	bl	8003766 <memset>
		  pno[0] = prt[0];
 80002c8:	4b18      	ldr	r3, [pc, #96]	@ (800032c <main+0x110>)
 80002ca:	781a      	ldrb	r2, [r3, #0]
 80002cc:	4b18      	ldr	r3, [pc, #96]	@ (8000330 <main+0x114>)
 80002ce:	701a      	strb	r2, [r3, #0]
		  memmove(prt, &prt[1],9);
 80002d0:	4918      	ldr	r1, [pc, #96]	@ (8000334 <main+0x118>)
 80002d2:	4b16      	ldr	r3, [pc, #88]	@ (800032c <main+0x110>)
 80002d4:	2209      	movs	r2, #9
 80002d6:	0018      	movs	r0, r3
 80002d8:	f003 fa33 	bl	8003742 <memmove>
		  HAL_UART_Transmit(&huart4, transfer, RxDataLen, 500);
 80002dc:	4b16      	ldr	r3, [pc, #88]	@ (8000338 <main+0x11c>)
 80002de:	881a      	ldrh	r2, [r3, #0]
 80002e0:	23fa      	movs	r3, #250	@ 0xfa
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	490e      	ldr	r1, [pc, #56]	@ (8000320 <main+0x104>)
 80002e6:	480b      	ldr	r0, [pc, #44]	@ (8000314 <main+0xf8>)
 80002e8:	f002 f89c 	bl	8002424 <HAL_UART_Transmit>
		  HAL_Delay(500);
 80002ec:	23fa      	movs	r3, #250	@ 0xfa
 80002ee:	005b      	lsls	r3, r3, #1
 80002f0:	0018      	movs	r0, r3
 80002f2:	f000 fe89 	bl	8001008 <HAL_Delay>
	  if (buffer[0] != 0 )
 80002f6:	e7d1      	b.n	800029c <main+0x80>
 80002f8:	20000424 	.word	0x20000424
 80002fc:	20000028 	.word	0x20000028
 8000300:	20000358 	.word	0x20000358
 8000304:	20000438 	.word	0x20000438
 8000308:	20000248 	.word	0x20000248
 800030c:	200003e0 	.word	0x200003e0
 8000310:	2000044c 	.word	0x2000044c
 8000314:	200001c0 	.word	0x200001c0
 8000318:	2000039c 	.word	0x2000039c
 800031c:	2000054c 	.word	0x2000054c
 8000320:	20000614 	.word	0x20000614
 8000324:	20000560 	.word	0x20000560
 8000328:	20000600 	.word	0x20000600
 800032c:	20000628 	.word	0x20000628
 8000330:	20000634 	.word	0x20000634
 8000334:	20000629 	.word	0x20000629
 8000338:	20000636 	.word	0x20000636

0800033c <HAL_UARTEx_RxEventCallback>:

  /* USER CODE END 3 */
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	000a      	movs	r2, r1
 8000346:	1cbb      	adds	r3, r7, #2
 8000348:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART1)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a6d      	ldr	r2, [pc, #436]	@ (8000504 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d14f      	bne.n	80003f4 <HAL_UARTEx_RxEventCallback+0xb8>
	{
		RxDataLen = Size;
 8000354:	4b6c      	ldr	r3, [pc, #432]	@ (8000508 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8000356:	1cba      	adds	r2, r7, #2
 8000358:	8812      	ldrh	r2, [r2, #0]
 800035a:	801a      	strh	r2, [r3, #0]
		uint8_t i;
		p = 1;
 800035c:	4b6b      	ldr	r3, [pc, #428]	@ (800050c <HAL_UARTEx_RxEventCallback+0x1d0>)
 800035e:	2201      	movs	r2, #1
 8000360:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit(&huart4, UART1_RxBuffer, RxDataLen, 500);
		for (i = 0; i<10; i++)
 8000362:	230f      	movs	r3, #15
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
 800036a:	e02f      	b.n	80003cc <HAL_UARTEx_RxEventCallback+0x90>
		{
			if (buffer[i*20] == 0) {
 800036c:	210f      	movs	r1, #15
 800036e:	187b      	adds	r3, r7, r1
 8000370:	781a      	ldrb	r2, [r3, #0]
 8000372:	0013      	movs	r3, r2
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	189b      	adds	r3, r3, r2
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	001a      	movs	r2, r3
 800037c:	4b64      	ldr	r3, [pc, #400]	@ (8000510 <HAL_UARTEx_RxEventCallback+0x1d4>)
 800037e:	5c9b      	ldrb	r3, [r3, r2]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d10f      	bne.n	80003a4 <HAL_UARTEx_RxEventCallback+0x68>
				memcpy(&buffer[i*20], UART1_RxBuffer, 20);
 8000384:	187b      	adds	r3, r7, r1
 8000386:	781a      	ldrb	r2, [r3, #0]
 8000388:	0013      	movs	r3, r2
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	189b      	adds	r3, r3, r2
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	001a      	movs	r2, r3
 8000392:	4b5f      	ldr	r3, [pc, #380]	@ (8000510 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8000394:	18d2      	adds	r2, r2, r3
 8000396:	4b5f      	ldr	r3, [pc, #380]	@ (8000514 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8000398:	0010      	movs	r0, r2
 800039a:	0019      	movs	r1, r3
 800039c:	2314      	movs	r3, #20
 800039e:	001a      	movs	r2, r3
 80003a0:	f003 fa0e 	bl	80037c0 <memcpy>
				//break;
			}
			if (prt[i] == 0){
 80003a4:	210f      	movs	r1, #15
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	4a5b      	ldr	r2, [pc, #364]	@ (8000518 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80003ac:	5cd3      	ldrb	r3, [r2, r3]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d106      	bne.n	80003c0 <HAL_UARTEx_RxEventCallback+0x84>
				prt[i] = p;
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	4a55      	ldr	r2, [pc, #340]	@ (800050c <HAL_UARTEx_RxEventCallback+0x1d0>)
 80003b8:	7811      	ldrb	r1, [r2, #0]
 80003ba:	4a57      	ldr	r2, [pc, #348]	@ (8000518 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80003bc:	54d1      	strb	r1, [r2, r3]
				break;
 80003be:	e00a      	b.n	80003d6 <HAL_UARTEx_RxEventCallback+0x9a>
		for (i = 0; i<10; i++)
 80003c0:	210f      	movs	r1, #15
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	781a      	ldrb	r2, [r3, #0]
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	3201      	adds	r2, #1
 80003ca:	701a      	strb	r2, [r3, #0]
 80003cc:	230f      	movs	r3, #15
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b09      	cmp	r3, #9
 80003d4:	d9ca      	bls.n	800036c <HAL_UARTEx_RxEventCallback+0x30>
			}
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART1_RxBuffer, 20);
 80003d6:	494f      	ldr	r1, [pc, #316]	@ (8000514 <HAL_UARTEx_RxEventCallback+0x1d8>)
 80003d8:	4b50      	ldr	r3, [pc, #320]	@ (800051c <HAL_UARTEx_RxEventCallback+0x1e0>)
 80003da:	2214      	movs	r2, #20
 80003dc:	0018      	movs	r0, r3
 80003de:	f003 f948 	bl	8003672 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80003e2:	4b4f      	ldr	r3, [pc, #316]	@ (8000520 <HAL_UARTEx_RxEventCallback+0x1e4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	4b4d      	ldr	r3, [pc, #308]	@ (8000520 <HAL_UARTEx_RxEventCallback+0x1e4>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2104      	movs	r1, #4
 80003ee:	438a      	bics	r2, r1
 80003f0:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart5, UART4_RxBuffer, RxDataLen, 100);
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart4, UART4_RxBuffer, 256);
		__HAL_DMA_DISABLE_IT(&hdma_usart4_rx, DMA_IT_HT);
	}
}
 80003f2:	e083      	b.n	80004fc <HAL_UARTEx_RxEventCallback+0x1c0>
	else if (huart->Instance == USART5)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a4a      	ldr	r2, [pc, #296]	@ (8000524 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d14f      	bne.n	800049e <HAL_UARTEx_RxEventCallback+0x162>
		RxDataLen = Size;
 80003fe:	4b42      	ldr	r3, [pc, #264]	@ (8000508 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8000400:	1cba      	adds	r2, r7, #2
 8000402:	8812      	ldrh	r2, [r2, #0]
 8000404:	801a      	strh	r2, [r3, #0]
		p = 5;
 8000406:	4b41      	ldr	r3, [pc, #260]	@ (800050c <HAL_UARTEx_RxEventCallback+0x1d0>)
 8000408:	2205      	movs	r2, #5
 800040a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i<10; i++)
 800040c:	230e      	movs	r3, #14
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
 8000414:	e02f      	b.n	8000476 <HAL_UARTEx_RxEventCallback+0x13a>
			if (buffer[i*20] == 0) {
 8000416:	210e      	movs	r1, #14
 8000418:	187b      	adds	r3, r7, r1
 800041a:	781a      	ldrb	r2, [r3, #0]
 800041c:	0013      	movs	r3, r2
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	189b      	adds	r3, r3, r2
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	001a      	movs	r2, r3
 8000426:	4b3a      	ldr	r3, [pc, #232]	@ (8000510 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8000428:	5c9b      	ldrb	r3, [r3, r2]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d10f      	bne.n	800044e <HAL_UARTEx_RxEventCallback+0x112>
				memcpy(&buffer[i*20], UART5_RxBuffer, 20);
 800042e:	187b      	adds	r3, r7, r1
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	0013      	movs	r3, r2
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	189b      	adds	r3, r3, r2
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	001a      	movs	r2, r3
 800043c:	4b34      	ldr	r3, [pc, #208]	@ (8000510 <HAL_UARTEx_RxEventCallback+0x1d4>)
 800043e:	18d2      	adds	r2, r2, r3
 8000440:	4b39      	ldr	r3, [pc, #228]	@ (8000528 <HAL_UARTEx_RxEventCallback+0x1ec>)
 8000442:	0010      	movs	r0, r2
 8000444:	0019      	movs	r1, r3
 8000446:	2314      	movs	r3, #20
 8000448:	001a      	movs	r2, r3
 800044a:	f003 f9b9 	bl	80037c0 <memcpy>
			if (prt[i] == 0){
 800044e:	210e      	movs	r1, #14
 8000450:	187b      	adds	r3, r7, r1
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4a30      	ldr	r2, [pc, #192]	@ (8000518 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8000456:	5cd3      	ldrb	r3, [r2, r3]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d106      	bne.n	800046a <HAL_UARTEx_RxEventCallback+0x12e>
				prt[i] = p;
 800045c:	187b      	adds	r3, r7, r1
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	4a2a      	ldr	r2, [pc, #168]	@ (800050c <HAL_UARTEx_RxEventCallback+0x1d0>)
 8000462:	7811      	ldrb	r1, [r2, #0]
 8000464:	4a2c      	ldr	r2, [pc, #176]	@ (8000518 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8000466:	54d1      	strb	r1, [r2, r3]
				break;
 8000468:	e00a      	b.n	8000480 <HAL_UARTEx_RxEventCallback+0x144>
		for (i = 0; i<10; i++)
 800046a:	210e      	movs	r1, #14
 800046c:	187b      	adds	r3, r7, r1
 800046e:	781a      	ldrb	r2, [r3, #0]
 8000470:	187b      	adds	r3, r7, r1
 8000472:	3201      	adds	r2, #1
 8000474:	701a      	strb	r2, [r3, #0]
 8000476:	230e      	movs	r3, #14
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b09      	cmp	r3, #9
 800047e:	d9ca      	bls.n	8000416 <HAL_UARTEx_RxEventCallback+0xda>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart5, UART5_RxBuffer, 20);
 8000480:	4929      	ldr	r1, [pc, #164]	@ (8000528 <HAL_UARTEx_RxEventCallback+0x1ec>)
 8000482:	4b2a      	ldr	r3, [pc, #168]	@ (800052c <HAL_UARTEx_RxEventCallback+0x1f0>)
 8000484:	2214      	movs	r2, #20
 8000486:	0018      	movs	r0, r3
 8000488:	f003 f8f3 	bl	8003672 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart5_rx, DMA_IT_HT);
 800048c:	4b28      	ldr	r3, [pc, #160]	@ (8000530 <HAL_UARTEx_RxEventCallback+0x1f4>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	4b27      	ldr	r3, [pc, #156]	@ (8000530 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2104      	movs	r1, #4
 8000498:	438a      	bics	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	e02e      	b.n	80004fc <HAL_UARTEx_RxEventCallback+0x1c0>
	else if (huart->Instance == USART4)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a24      	ldr	r2, [pc, #144]	@ (8000534 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d129      	bne.n	80004fc <HAL_UARTEx_RxEventCallback+0x1c0>
		RxDataLen = Size;
 80004a8:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80004aa:	1cba      	adds	r2, r7, #2
 80004ac:	8812      	ldrh	r2, [r2, #0]
 80004ae:	801a      	strh	r2, [r3, #0]
		if (pno[0] == 1){
 80004b0:	4b21      	ldr	r3, [pc, #132]	@ (8000538 <HAL_UARTEx_RxEventCallback+0x1fc>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d107      	bne.n	80004c8 <HAL_UARTEx_RxEventCallback+0x18c>
			HAL_UART_Transmit(&huart1, UART4_RxBuffer, RxDataLen, 100);
 80004b8:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80004ba:	881a      	ldrh	r2, [r3, #0]
 80004bc:	491f      	ldr	r1, [pc, #124]	@ (800053c <HAL_UARTEx_RxEventCallback+0x200>)
 80004be:	4817      	ldr	r0, [pc, #92]	@ (800051c <HAL_UARTEx_RxEventCallback+0x1e0>)
 80004c0:	2364      	movs	r3, #100	@ 0x64
 80004c2:	f001 ffaf 	bl	8002424 <HAL_UART_Transmit>
 80004c6:	e00a      	b.n	80004de <HAL_UARTEx_RxEventCallback+0x1a2>
		else if (pno[0] == 5){
 80004c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000538 <HAL_UARTEx_RxEventCallback+0x1fc>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b05      	cmp	r3, #5
 80004ce:	d106      	bne.n	80004de <HAL_UARTEx_RxEventCallback+0x1a2>
			HAL_UART_Transmit(&huart5, UART4_RxBuffer, RxDataLen, 100);
 80004d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000508 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80004d2:	881a      	ldrh	r2, [r3, #0]
 80004d4:	4919      	ldr	r1, [pc, #100]	@ (800053c <HAL_UARTEx_RxEventCallback+0x200>)
 80004d6:	4815      	ldr	r0, [pc, #84]	@ (800052c <HAL_UARTEx_RxEventCallback+0x1f0>)
 80004d8:	2364      	movs	r3, #100	@ 0x64
 80004da:	f001 ffa3 	bl	8002424 <HAL_UART_Transmit>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart4, UART4_RxBuffer, 256);
 80004de:	2380      	movs	r3, #128	@ 0x80
 80004e0:	005a      	lsls	r2, r3, #1
 80004e2:	4916      	ldr	r1, [pc, #88]	@ (800053c <HAL_UARTEx_RxEventCallback+0x200>)
 80004e4:	4b16      	ldr	r3, [pc, #88]	@ (8000540 <HAL_UARTEx_RxEventCallback+0x204>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f003 f8c3 	bl	8003672 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart4_rx, DMA_IT_HT);
 80004ec:	4b15      	ldr	r3, [pc, #84]	@ (8000544 <HAL_UARTEx_RxEventCallback+0x208>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	4b14      	ldr	r3, [pc, #80]	@ (8000544 <HAL_UARTEx_RxEventCallback+0x208>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2104      	movs	r1, #4
 80004f8:	438a      	bics	r2, r1
 80004fa:	601a      	str	r2, [r3, #0]
}
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b004      	add	sp, #16
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40013800 	.word	0x40013800
 8000508:	20000636 	.word	0x20000636
 800050c:	20000632 	.word	0x20000632
 8000510:	2000054c 	.word	0x2000054c
 8000514:	20000424 	.word	0x20000424
 8000518:	20000628 	.word	0x20000628
 800051c:	20000028 	.word	0x20000028
 8000520:	20000358 	.word	0x20000358
 8000524:	40005000 	.word	0x40005000
 8000528:	20000438 	.word	0x20000438
 800052c:	20000248 	.word	0x20000248
 8000530:	200003e0 	.word	0x200003e0
 8000534:	40004c00 	.word	0x40004c00
 8000538:	20000634 	.word	0x20000634
 800053c:	2000044c 	.word	0x2000044c
 8000540:	200001c0 	.word	0x200001c0
 8000544:	2000039c 	.word	0x2000039c

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b095      	sub	sp, #84	@ 0x54
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	2420      	movs	r4, #32
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	2330      	movs	r3, #48	@ 0x30
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f003 f904 	bl	8003766 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055e:	2310      	movs	r3, #16
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	0018      	movs	r0, r3
 8000564:	2310      	movs	r3, #16
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f003 f8fc 	bl	8003766 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056e:	003b      	movs	r3, r7
 8000570:	0018      	movs	r0, r3
 8000572:	2310      	movs	r3, #16
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f003 f8f5 	bl	8003766 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	0021      	movs	r1, r4
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2202      	movs	r2, #2
 8000582:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2201      	movs	r2, #1
 8000588:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2210      	movs	r2, #16
 800058e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2202      	movs	r2, #2
 8000594:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2280      	movs	r2, #128	@ 0x80
 800059a:	0212      	lsls	r2, r2, #8
 800059c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2280      	movs	r2, #128	@ 0x80
 80005a2:	0352      	lsls	r2, r2, #13
 80005a4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2200      	movs	r2, #0
 80005aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 f9b2 	bl	8001918 <HAL_RCC_OscConfig>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005b8:	f000 f9aa 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	2110      	movs	r1, #16
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2207      	movs	r2, #7
 80005c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2202      	movs	r2, #2
 80005c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2101      	movs	r1, #1
 80005da:	0018      	movs	r0, r3
 80005dc:	f001 fcba 	bl	8001f54 <HAL_RCC_ClockConfig>
 80005e0:	1e03      	subs	r3, r0, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005e4:	f000 f994 	bl	8000910 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005e8:	003b      	movs	r3, r7
 80005ea:	2201      	movs	r2, #1
 80005ec:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80005ee:	003b      	movs	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f4:	003b      	movs	r3, r7
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 fdf2 	bl	80021e0 <HAL_RCCEx_PeriphCLKConfig>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000600:	f000 f986 	bl	8000910 <Error_Handler>
  }
}
 8000604:	46c0      	nop			@ (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b015      	add	sp, #84	@ 0x54
 800060a:	bd90      	pop	{r4, r7, pc}

0800060c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000610:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <MX_USART1_UART_Init+0x58>)
 8000612:	4a15      	ldr	r2, [pc, #84]	@ (8000668 <MX_USART1_UART_Init+0x5c>)
 8000614:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000616:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <MX_USART1_UART_Init+0x58>)
 8000618:	2296      	movs	r2, #150	@ 0x96
 800061a:	0192      	lsls	r2, r2, #6
 800061c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_USART1_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_USART1_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_USART1_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <MX_USART1_UART_Init+0x58>)
 8000632:	220c      	movs	r2, #12
 8000634:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <MX_USART1_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_USART1_UART_Init+0x58>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <MX_USART1_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_USART1_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800064e:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <MX_USART1_UART_Init+0x58>)
 8000650:	0018      	movs	r0, r3
 8000652:	f001 fe93 	bl	800237c <HAL_UART_Init>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800065a:	f000 f959 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000028 	.word	0x20000028
 8000668:	40013800 	.word	0x40013800

0800066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000670:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000672:	4a15      	ldr	r2, [pc, #84]	@ (80006c8 <MX_USART2_UART_Init+0x5c>)
 8000674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000678:	2296      	movs	r2, #150	@ 0x96
 800067a:	0192      	lsls	r2, r2, #6
 800067c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 fe63 	bl	800237c <HAL_UART_Init>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ba:	f000 f929 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200000b0 	.word	0x200000b0
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d0:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_USART3_UART_Init+0x58>)
 80006d2:	4a15      	ldr	r2, [pc, #84]	@ (8000728 <MX_USART3_UART_Init+0x5c>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80006d6:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <MX_USART3_UART_Init+0x58>)
 80006d8:	2296      	movs	r2, #150	@ 0x96
 80006da:	0192      	lsls	r2, r2, #6
 80006dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_USART3_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_USART3_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <MX_USART3_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_USART3_UART_Init+0x58>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <MX_USART3_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_USART3_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000702:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <MX_USART3_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_USART3_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800070e:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <MX_USART3_UART_Init+0x58>)
 8000710:	0018      	movs	r0, r3
 8000712:	f001 fe33 	bl	800237c <HAL_UART_Init>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800071a:	f000 f8f9 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000138 	.word	0x20000138
 8000728:	40004800 	.word	0x40004800

0800072c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_USART4_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	@ (8000788 <MX_USART4_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_USART4_UART_Init+0x58>)
 8000738:	2296      	movs	r2, #150	@ 0x96
 800073a:	0192      	lsls	r2, r2, #6
 800073c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_USART4_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_USART4_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_USART4_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_USART4_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <MX_USART4_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_USART4_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <MX_USART4_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_USART4_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800076e:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <MX_USART4_UART_Init+0x58>)
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fe03 	bl	800237c <HAL_UART_Init>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f8c9 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200001c0 	.word	0x200001c0
 8000788:	40004c00 	.word	0x40004c00

0800078c <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_USART5_UART_Init+0x58>)
 8000792:	4a15      	ldr	r2, [pc, #84]	@ (80007e8 <MX_USART5_UART_Init+0x5c>)
 8000794:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_USART5_UART_Init+0x58>)
 8000798:	2296      	movs	r2, #150	@ 0x96
 800079a:	0192      	lsls	r2, r2, #6
 800079c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_USART5_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_USART5_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART5_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART5_UART_Init+0x58>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_USART5_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_USART5_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_USART5_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_USART5_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007ce:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <MX_USART5_UART_Init+0x58>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 fdd3 	bl	800237c <HAL_UART_Init>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f899 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000248 	.word	0x20000248
 80007e8:	40005000 	.word	0x40005000

080007ec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_USART6_UART_Init+0x58>)
 80007f2:	4a15      	ldr	r2, [pc, #84]	@ (8000848 <MX_USART6_UART_Init+0x5c>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80007f6:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_USART6_UART_Init+0x58>)
 80007f8:	2296      	movs	r2, #150	@ 0x96
 80007fa:	0192      	lsls	r2, r2, #6
 80007fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_USART6_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_USART6_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USART6_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_USART6_UART_Init+0x58>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USART6_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_USART6_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USART6_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_USART6_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800082e:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <MX_USART6_UART_Init+0x58>)
 8000830:	0018      	movs	r0, r3
 8000832:	f001 fda3 	bl	800237c <HAL_UART_Init>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f869 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200002d0 	.word	0x200002d0
 8000848:	40011400 	.word	0x40011400

0800084c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000852:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_DMA_Init+0x58>)
 8000854:	695a      	ldr	r2, [r3, #20]
 8000856:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_DMA_Init+0x58>)
 8000858:	2101      	movs	r1, #1
 800085a:	430a      	orrs	r2, r1
 800085c:	615a      	str	r2, [r3, #20]
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_DMA_Init+0x58>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	2201      	movs	r2, #1
 8000864:	4013      	ands	r3, r2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	2009      	movs	r0, #9
 8000870:	f000 fc9a 	bl	80011a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000874:	2009      	movs	r0, #9
 8000876:	f000 fcac 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	200a      	movs	r0, #10
 8000880:	f000 fc92 	bl	80011a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000884:	200a      	movs	r0, #10
 8000886:	f000 fca4 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	200b      	movs	r0, #11
 8000890:	f000 fc8a 	bl	80011a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000894:	200b      	movs	r0, #11
 8000896:	f000 fc9c 	bl	80011d2 <HAL_NVIC_EnableIRQ>

}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b002      	add	sp, #8
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	40021000 	.word	0x40021000

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ae:	4b17      	ldr	r3, [pc, #92]	@ (800090c <MX_GPIO_Init+0x64>)
 80008b0:	695a      	ldr	r2, [r3, #20]
 80008b2:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MX_GPIO_Init+0x64>)
 80008b4:	2180      	movs	r1, #128	@ 0x80
 80008b6:	03c9      	lsls	r1, r1, #15
 80008b8:	430a      	orrs	r2, r1
 80008ba:	615a      	str	r2, [r3, #20]
 80008bc:	4b13      	ldr	r3, [pc, #76]	@ (800090c <MX_GPIO_Init+0x64>)
 80008be:	695a      	ldr	r2, [r3, #20]
 80008c0:	2380      	movs	r3, #128	@ 0x80
 80008c2:	03db      	lsls	r3, r3, #15
 80008c4:	4013      	ands	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b10      	ldr	r3, [pc, #64]	@ (800090c <MX_GPIO_Init+0x64>)
 80008cc:	695a      	ldr	r2, [r3, #20]
 80008ce:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <MX_GPIO_Init+0x64>)
 80008d0:	2180      	movs	r1, #128	@ 0x80
 80008d2:	0289      	lsls	r1, r1, #10
 80008d4:	430a      	orrs	r2, r1
 80008d6:	615a      	str	r2, [r3, #20]
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_GPIO_Init+0x64>)
 80008da:	695a      	ldr	r2, [r3, #20]
 80008dc:	2380      	movs	r3, #128	@ 0x80
 80008de:	029b      	lsls	r3, r3, #10
 80008e0:	4013      	ands	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_GPIO_Init+0x64>)
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <MX_GPIO_Init+0x64>)
 80008ec:	2180      	movs	r1, #128	@ 0x80
 80008ee:	02c9      	lsls	r1, r1, #11
 80008f0:	430a      	orrs	r2, r1
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	4b05      	ldr	r3, [pc, #20]	@ (800090c <MX_GPIO_Init+0x64>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	2380      	movs	r3, #128	@ 0x80
 80008fa:	02db      	lsls	r3, r3, #11
 80008fc:	4013      	ands	r3, r2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b004      	add	sp, #16
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	40021000 	.word	0x40021000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	e7fd      	b.n	8000918 <Error_Handler+0x8>

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_MspInit+0x44>)
 8000924:	699a      	ldr	r2, [r3, #24]
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <HAL_MspInit+0x44>)
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	619a      	str	r2, [r3, #24]
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <HAL_MspInit+0x44>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	2201      	movs	r2, #1
 8000934:	4013      	ands	r3, r2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <HAL_MspInit+0x44>)
 800093c:	69da      	ldr	r2, [r3, #28]
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <HAL_MspInit+0x44>)
 8000940:	2180      	movs	r1, #128	@ 0x80
 8000942:	0549      	lsls	r1, r1, #21
 8000944:	430a      	orrs	r2, r1
 8000946:	61da      	str	r2, [r3, #28]
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_MspInit+0x44>)
 800094a:	69da      	ldr	r2, [r3, #28]
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	055b      	lsls	r3, r3, #21
 8000950:	4013      	ands	r3, r2
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b095      	sub	sp, #84	@ 0x54
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	243c      	movs	r4, #60	@ 0x3c
 800096e:	193b      	adds	r3, r7, r4
 8000970:	0018      	movs	r0, r3
 8000972:	2314      	movs	r3, #20
 8000974:	001a      	movs	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	f002 fef5 	bl	8003766 <memset>
  if(huart->Instance==USART1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4af0      	ldr	r2, [pc, #960]	@ (8000d44 <HAL_UART_MspInit+0x3e0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d173      	bne.n	8000a6e <HAL_UART_MspInit+0x10a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000986:	4bf0      	ldr	r3, [pc, #960]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000988:	699a      	ldr	r2, [r3, #24]
 800098a:	4bef      	ldr	r3, [pc, #956]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 800098c:	2180      	movs	r1, #128	@ 0x80
 800098e:	01c9      	lsls	r1, r1, #7
 8000990:	430a      	orrs	r2, r1
 8000992:	619a      	str	r2, [r3, #24]
 8000994:	4bec      	ldr	r3, [pc, #944]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000996:	699a      	ldr	r2, [r3, #24]
 8000998:	2380      	movs	r3, #128	@ 0x80
 800099a:	01db      	lsls	r3, r3, #7
 800099c:	4013      	ands	r3, r2
 800099e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4be9      	ldr	r3, [pc, #932]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 80009a4:	695a      	ldr	r2, [r3, #20]
 80009a6:	4be8      	ldr	r3, [pc, #928]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 80009a8:	2180      	movs	r1, #128	@ 0x80
 80009aa:	0289      	lsls	r1, r1, #10
 80009ac:	430a      	orrs	r2, r1
 80009ae:	615a      	str	r2, [r3, #20]
 80009b0:	4be5      	ldr	r3, [pc, #916]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 80009b2:	695a      	ldr	r2, [r3, #20]
 80009b4:	2380      	movs	r3, #128	@ 0x80
 80009b6:	029b      	lsls	r3, r3, #10
 80009b8:	4013      	ands	r3, r2
 80009ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80009bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	22c0      	movs	r2, #192	@ 0xc0
 80009c2:	00d2      	lsls	r2, r2, #3
 80009c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	0021      	movs	r1, r4
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2202      	movs	r2, #2
 80009cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2203      	movs	r2, #3
 80009d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2201      	movs	r2, #1
 80009de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	187a      	adds	r2, r7, r1
 80009e2:	2390      	movs	r3, #144	@ 0x90
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	0011      	movs	r1, r2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f000 fe25 	bl	8001638 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80009ee:	4bd7      	ldr	r3, [pc, #860]	@ (8000d4c <HAL_UART_MspInit+0x3e8>)
 80009f0:	4ad7      	ldr	r2, [pc, #860]	@ (8000d50 <HAL_UART_MspInit+0x3ec>)
 80009f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f4:	4bd5      	ldr	r3, [pc, #852]	@ (8000d4c <HAL_UART_MspInit+0x3e8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fa:	4bd4      	ldr	r3, [pc, #848]	@ (8000d4c <HAL_UART_MspInit+0x3e8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a00:	4bd2      	ldr	r3, [pc, #840]	@ (8000d4c <HAL_UART_MspInit+0x3e8>)
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a06:	4bd1      	ldr	r3, [pc, #836]	@ (8000d4c <HAL_UART_MspInit+0x3e8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a0c:	4bcf      	ldr	r3, [pc, #828]	@ (8000d4c <HAL_UART_MspInit+0x3e8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a12:	4bce      	ldr	r3, [pc, #824]	@ (8000d4c <HAL_UART_MspInit+0x3e8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a18:	4bcc      	ldr	r3, [pc, #816]	@ (8000d4c <HAL_UART_MspInit+0x3e8>)
 8000a1a:	2280      	movs	r2, #128	@ 0x80
 8000a1c:	0152      	lsls	r2, r2, #5
 8000a1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a20:	4bca      	ldr	r3, [pc, #808]	@ (8000d4c <HAL_UART_MspInit+0x3e8>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 fbf2 	bl	800120c <HAL_DMA_Init>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000a2c:	f7ff ff70 	bl	8000910 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 8000a30:	4ac8      	ldr	r2, [pc, #800]	@ (8000d54 <HAL_UART_MspInit+0x3f0>)
 8000a32:	23a8      	movs	r3, #168	@ 0xa8
 8000a34:	58d3      	ldr	r3, [r2, r3]
 8000a36:	49c7      	ldr	r1, [pc, #796]	@ (8000d54 <HAL_UART_MspInit+0x3f0>)
 8000a38:	220f      	movs	r2, #15
 8000a3a:	4393      	bics	r3, r2
 8000a3c:	22a8      	movs	r2, #168	@ 0xa8
 8000a3e:	508b      	str	r3, [r1, r2]
 8000a40:	4ac4      	ldr	r2, [pc, #784]	@ (8000d54 <HAL_UART_MspInit+0x3f0>)
 8000a42:	23a8      	movs	r3, #168	@ 0xa8
 8000a44:	58d3      	ldr	r3, [r2, r3]
 8000a46:	49c3      	ldr	r1, [pc, #780]	@ (8000d54 <HAL_UART_MspInit+0x3f0>)
 8000a48:	2208      	movs	r2, #8
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	22a8      	movs	r2, #168	@ 0xa8
 8000a4e:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4abe      	ldr	r2, [pc, #760]	@ (8000d4c <HAL_UART_MspInit+0x3e8>)
 8000a54:	675a      	str	r2, [r3, #116]	@ 0x74
 8000a56:	4bbd      	ldr	r3, [pc, #756]	@ (8000d4c <HAL_UART_MspInit+0x3e8>)
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	201b      	movs	r0, #27
 8000a62:	f000 fba1 	bl	80011a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a66:	201b      	movs	r0, #27
 8000a68:	f000 fbb3 	bl	80011d2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000a6c:	e1c8      	b.n	8000e00 <HAL_UART_MspInit+0x49c>
  else if(huart->Instance==USART2)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4ab9      	ldr	r2, [pc, #740]	@ (8000d58 <HAL_UART_MspInit+0x3f4>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d133      	bne.n	8000ae0 <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a78:	4bb3      	ldr	r3, [pc, #716]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000a7a:	69da      	ldr	r2, [r3, #28]
 8000a7c:	4bb2      	ldr	r3, [pc, #712]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000a7e:	2180      	movs	r1, #128	@ 0x80
 8000a80:	0289      	lsls	r1, r1, #10
 8000a82:	430a      	orrs	r2, r1
 8000a84:	61da      	str	r2, [r3, #28]
 8000a86:	4bb0      	ldr	r3, [pc, #704]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000a88:	69da      	ldr	r2, [r3, #28]
 8000a8a:	2380      	movs	r3, #128	@ 0x80
 8000a8c:	029b      	lsls	r3, r3, #10
 8000a8e:	4013      	ands	r3, r2
 8000a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4bac      	ldr	r3, [pc, #688]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000a96:	695a      	ldr	r2, [r3, #20]
 8000a98:	4bab      	ldr	r3, [pc, #684]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000a9a:	2180      	movs	r1, #128	@ 0x80
 8000a9c:	0289      	lsls	r1, r1, #10
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	615a      	str	r2, [r3, #20]
 8000aa2:	4ba9      	ldr	r3, [pc, #676]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000aa4:	695a      	ldr	r2, [r3, #20]
 8000aa6:	2380      	movs	r3, #128	@ 0x80
 8000aa8:	029b      	lsls	r3, r3, #10
 8000aaa:	4013      	ands	r3, r2
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab0:	213c      	movs	r1, #60	@ 0x3c
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	220c      	movs	r2, #12
 8000ab6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2202      	movs	r2, #2
 8000abc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2201      	movs	r2, #1
 8000ace:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	187a      	adds	r2, r7, r1
 8000ad2:	2390      	movs	r3, #144	@ 0x90
 8000ad4:	05db      	lsls	r3, r3, #23
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f000 fdad 	bl	8001638 <HAL_GPIO_Init>
}
 8000ade:	e18f      	b.n	8000e00 <HAL_UART_MspInit+0x49c>
  else if(huart->Instance==USART3)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a9d      	ldr	r2, [pc, #628]	@ (8000d5c <HAL_UART_MspInit+0x3f8>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d13b      	bne.n	8000b62 <HAL_UART_MspInit+0x1fe>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aea:	4b97      	ldr	r3, [pc, #604]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000aec:	69da      	ldr	r2, [r3, #28]
 8000aee:	4b96      	ldr	r3, [pc, #600]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000af0:	2180      	movs	r1, #128	@ 0x80
 8000af2:	02c9      	lsls	r1, r1, #11
 8000af4:	430a      	orrs	r2, r1
 8000af6:	61da      	str	r2, [r3, #28]
 8000af8:	4b93      	ldr	r3, [pc, #588]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000afa:	69da      	ldr	r2, [r3, #28]
 8000afc:	2380      	movs	r3, #128	@ 0x80
 8000afe:	02db      	lsls	r3, r3, #11
 8000b00:	4013      	ands	r3, r2
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b90      	ldr	r3, [pc, #576]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000b08:	695a      	ldr	r2, [r3, #20]
 8000b0a:	4b8f      	ldr	r3, [pc, #572]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000b0c:	2180      	movs	r1, #128	@ 0x80
 8000b0e:	02c9      	lsls	r1, r1, #11
 8000b10:	430a      	orrs	r2, r1
 8000b12:	615a      	str	r2, [r3, #20]
 8000b14:	4b8c      	ldr	r3, [pc, #560]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000b16:	695a      	ldr	r2, [r3, #20]
 8000b18:	2380      	movs	r3, #128	@ 0x80
 8000b1a:	02db      	lsls	r3, r3, #11
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b22:	213c      	movs	r1, #60	@ 0x3c
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	22c0      	movs	r2, #192	@ 0xc0
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2202      	movs	r2, #2
 8000b30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2204      	movs	r2, #4
 8000b42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	4a86      	ldr	r2, [pc, #536]	@ (8000d60 <HAL_UART_MspInit+0x3fc>)
 8000b48:	0019      	movs	r1, r3
 8000b4a:	0010      	movs	r0, r2
 8000b4c:	f000 fd74 	bl	8001638 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	201d      	movs	r0, #29
 8000b56:	f000 fb27 	bl	80011a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 8000b5a:	201d      	movs	r0, #29
 8000b5c:	f000 fb39 	bl	80011d2 <HAL_NVIC_EnableIRQ>
}
 8000b60:	e14e      	b.n	8000e00 <HAL_UART_MspInit+0x49c>
  else if(huart->Instance==USART4)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a7f      	ldr	r2, [pc, #508]	@ (8000d64 <HAL_UART_MspInit+0x400>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d172      	bne.n	8000c52 <HAL_UART_MspInit+0x2ee>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000b6c:	4b76      	ldr	r3, [pc, #472]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000b6e:	69da      	ldr	r2, [r3, #28]
 8000b70:	4b75      	ldr	r3, [pc, #468]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000b72:	2180      	movs	r1, #128	@ 0x80
 8000b74:	0309      	lsls	r1, r1, #12
 8000b76:	430a      	orrs	r2, r1
 8000b78:	61da      	str	r2, [r3, #28]
 8000b7a:	4b73      	ldr	r3, [pc, #460]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000b7c:	69da      	ldr	r2, [r3, #28]
 8000b7e:	2380      	movs	r3, #128	@ 0x80
 8000b80:	031b      	lsls	r3, r3, #12
 8000b82:	4013      	ands	r3, r2
 8000b84:	623b      	str	r3, [r7, #32]
 8000b86:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b6f      	ldr	r3, [pc, #444]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000b8a:	695a      	ldr	r2, [r3, #20]
 8000b8c:	4b6e      	ldr	r3, [pc, #440]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000b8e:	2180      	movs	r1, #128	@ 0x80
 8000b90:	0289      	lsls	r1, r1, #10
 8000b92:	430a      	orrs	r2, r1
 8000b94:	615a      	str	r2, [r3, #20]
 8000b96:	4b6c      	ldr	r3, [pc, #432]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	2380      	movs	r3, #128	@ 0x80
 8000b9c:	029b      	lsls	r3, r3, #10
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	61fb      	str	r3, [r7, #28]
 8000ba2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ba4:	213c      	movs	r1, #60	@ 0x3c
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2203      	movs	r2, #3
 8000baa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2202      	movs	r2, #2
 8000bb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2203      	movs	r2, #3
 8000bbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	187a      	adds	r2, r7, r1
 8000bc6:	2390      	movs	r3, #144	@ 0x90
 8000bc8:	05db      	lsls	r3, r3, #23
 8000bca:	0011      	movs	r1, r2
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 fd33 	bl	8001638 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel5;
 8000bd2:	4b65      	ldr	r3, [pc, #404]	@ (8000d68 <HAL_UART_MspInit+0x404>)
 8000bd4:	4a65      	ldr	r2, [pc, #404]	@ (8000d6c <HAL_UART_MspInit+0x408>)
 8000bd6:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd8:	4b63      	ldr	r3, [pc, #396]	@ (8000d68 <HAL_UART_MspInit+0x404>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bde:	4b62      	ldr	r3, [pc, #392]	@ (8000d68 <HAL_UART_MspInit+0x404>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000be4:	4b60      	ldr	r3, [pc, #384]	@ (8000d68 <HAL_UART_MspInit+0x404>)
 8000be6:	2280      	movs	r2, #128	@ 0x80
 8000be8:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bea:	4b5f      	ldr	r3, [pc, #380]	@ (8000d68 <HAL_UART_MspInit+0x404>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf0:	4b5d      	ldr	r3, [pc, #372]	@ (8000d68 <HAL_UART_MspInit+0x404>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 8000bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8000d68 <HAL_UART_MspInit+0x404>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bfc:	4b5a      	ldr	r3, [pc, #360]	@ (8000d68 <HAL_UART_MspInit+0x404>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8000c02:	4b59      	ldr	r3, [pc, #356]	@ (8000d68 <HAL_UART_MspInit+0x404>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f000 fb01 	bl	800120c <HAL_DMA_Init>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_UART_MspInit+0x2ae>
      Error_Handler();
 8000c0e:	f7ff fe7f 	bl	8000910 <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);
 8000c12:	4a50      	ldr	r2, [pc, #320]	@ (8000d54 <HAL_UART_MspInit+0x3f0>)
 8000c14:	23a8      	movs	r3, #168	@ 0xa8
 8000c16:	58d3      	ldr	r3, [r2, r3]
 8000c18:	494e      	ldr	r1, [pc, #312]	@ (8000d54 <HAL_UART_MspInit+0x3f0>)
 8000c1a:	4a55      	ldr	r2, [pc, #340]	@ (8000d70 <HAL_UART_MspInit+0x40c>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	22a8      	movs	r2, #168	@ 0xa8
 8000c20:	508b      	str	r3, [r1, r2]
 8000c22:	4a4c      	ldr	r2, [pc, #304]	@ (8000d54 <HAL_UART_MspInit+0x3f0>)
 8000c24:	23a8      	movs	r3, #168	@ 0xa8
 8000c26:	58d3      	ldr	r3, [r2, r3]
 8000c28:	494a      	ldr	r1, [pc, #296]	@ (8000d54 <HAL_UART_MspInit+0x3f0>)
 8000c2a:	22b0      	movs	r2, #176	@ 0xb0
 8000c2c:	0312      	lsls	r2, r2, #12
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	22a8      	movs	r2, #168	@ 0xa8
 8000c32:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a4c      	ldr	r2, [pc, #304]	@ (8000d68 <HAL_UART_MspInit+0x404>)
 8000c38:	675a      	str	r2, [r3, #116]	@ 0x74
 8000c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8000d68 <HAL_UART_MspInit+0x404>)
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	201d      	movs	r0, #29
 8000c46:	f000 faaf 	bl	80011a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 8000c4a:	201d      	movs	r0, #29
 8000c4c:	f000 fac1 	bl	80011d2 <HAL_NVIC_EnableIRQ>
}
 8000c50:	e0d6      	b.n	8000e00 <HAL_UART_MspInit+0x49c>
  else if(huart->Instance==USART5)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a47      	ldr	r2, [pc, #284]	@ (8000d74 <HAL_UART_MspInit+0x410>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d000      	beq.n	8000c5e <HAL_UART_MspInit+0x2fa>
 8000c5c:	e092      	b.n	8000d84 <HAL_UART_MspInit+0x420>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000c60:	69da      	ldr	r2, [r3, #28]
 8000c62:	4b39      	ldr	r3, [pc, #228]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000c64:	2180      	movs	r1, #128	@ 0x80
 8000c66:	0349      	lsls	r1, r1, #13
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	61da      	str	r2, [r3, #28]
 8000c6c:	4b36      	ldr	r3, [pc, #216]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000c6e:	69da      	ldr	r2, [r3, #28]
 8000c70:	2380      	movs	r3, #128	@ 0x80
 8000c72:	035b      	lsls	r3, r3, #13
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b33      	ldr	r3, [pc, #204]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000c7c:	695a      	ldr	r2, [r3, #20]
 8000c7e:	4b32      	ldr	r3, [pc, #200]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000c80:	2180      	movs	r1, #128	@ 0x80
 8000c82:	02c9      	lsls	r1, r1, #11
 8000c84:	430a      	orrs	r2, r1
 8000c86:	615a      	str	r2, [r3, #20]
 8000c88:	4b2f      	ldr	r3, [pc, #188]	@ (8000d48 <HAL_UART_MspInit+0x3e4>)
 8000c8a:	695a      	ldr	r2, [r3, #20]
 8000c8c:	2380      	movs	r3, #128	@ 0x80
 8000c8e:	02db      	lsls	r3, r3, #11
 8000c90:	4013      	ands	r3, r2
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c96:	213c      	movs	r1, #60	@ 0x3c
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2218      	movs	r2, #24
 8000c9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2203      	movs	r2, #3
 8000cae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART5;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	4a29      	ldr	r2, [pc, #164]	@ (8000d60 <HAL_UART_MspInit+0x3fc>)
 8000cba:	0019      	movs	r1, r3
 8000cbc:	0010      	movs	r0, r2
 8000cbe:	f000 fcbb 	bl	8001638 <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA1_Channel3;
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d78 <HAL_UART_MspInit+0x414>)
 8000cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8000d7c <HAL_UART_MspInit+0x418>)
 8000cc6:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d78 <HAL_UART_MspInit+0x414>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cce:	4b2a      	ldr	r3, [pc, #168]	@ (8000d78 <HAL_UART_MspInit+0x414>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cd4:	4b28      	ldr	r3, [pc, #160]	@ (8000d78 <HAL_UART_MspInit+0x414>)
 8000cd6:	2280      	movs	r2, #128	@ 0x80
 8000cd8:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cda:	4b27      	ldr	r3, [pc, #156]	@ (8000d78 <HAL_UART_MspInit+0x414>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ce0:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <HAL_UART_MspInit+0x414>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.Mode = DMA_NORMAL;
 8000ce6:	4b24      	ldr	r3, [pc, #144]	@ (8000d78 <HAL_UART_MspInit+0x414>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000cec:	4b22      	ldr	r3, [pc, #136]	@ (8000d78 <HAL_UART_MspInit+0x414>)
 8000cee:	2280      	movs	r2, #128	@ 0x80
 8000cf0:	0152      	lsls	r2, r2, #5
 8000cf2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 8000cf4:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <HAL_UART_MspInit+0x414>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fa88 	bl	800120c <HAL_DMA_Init>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_UART_MspInit+0x3a0>
      Error_Handler();
 8000d00:	f7ff fe06 	bl	8000910 <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 8000d04:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <HAL_UART_MspInit+0x3f0>)
 8000d06:	23a8      	movs	r3, #168	@ 0xa8
 8000d08:	58d3      	ldr	r3, [r2, r3]
 8000d0a:	4912      	ldr	r1, [pc, #72]	@ (8000d54 <HAL_UART_MspInit+0x3f0>)
 8000d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000d80 <HAL_UART_MspInit+0x41c>)
 8000d0e:	4013      	ands	r3, r2
 8000d10:	22a8      	movs	r2, #168	@ 0xa8
 8000d12:	508b      	str	r3, [r1, r2]
 8000d14:	4a0f      	ldr	r2, [pc, #60]	@ (8000d54 <HAL_UART_MspInit+0x3f0>)
 8000d16:	23a8      	movs	r3, #168	@ 0xa8
 8000d18:	58d3      	ldr	r3, [r2, r3]
 8000d1a:	490e      	ldr	r1, [pc, #56]	@ (8000d54 <HAL_UART_MspInit+0x3f0>)
 8000d1c:	22c0      	movs	r2, #192	@ 0xc0
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	4313      	orrs	r3, r2
 8000d22:	22a8      	movs	r2, #168	@ 0xa8
 8000d24:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart5_rx);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a13      	ldr	r2, [pc, #76]	@ (8000d78 <HAL_UART_MspInit+0x414>)
 8000d2a:	675a      	str	r2, [r3, #116]	@ 0x74
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_UART_MspInit+0x414>)
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	201d      	movs	r0, #29
 8000d38:	f000 fa36 	bl	80011a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 8000d3c:	201d      	movs	r0, #29
 8000d3e:	f000 fa48 	bl	80011d2 <HAL_NVIC_EnableIRQ>
}
 8000d42:	e05d      	b.n	8000e00 <HAL_UART_MspInit+0x49c>
 8000d44:	40013800 	.word	0x40013800
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	20000358 	.word	0x20000358
 8000d50:	40020008 	.word	0x40020008
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40004400 	.word	0x40004400
 8000d5c:	40004800 	.word	0x40004800
 8000d60:	48000400 	.word	0x48000400
 8000d64:	40004c00 	.word	0x40004c00
 8000d68:	2000039c 	.word	0x2000039c
 8000d6c:	40020058 	.word	0x40020058
 8000d70:	fff0ffff 	.word	0xfff0ffff
 8000d74:	40005000 	.word	0x40005000
 8000d78:	200003e0 	.word	0x200003e0
 8000d7c:	40020030 	.word	0x40020030
 8000d80:	fffff0ff 	.word	0xfffff0ff
  else if(huart->Instance==USART6)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a1f      	ldr	r2, [pc, #124]	@ (8000e08 <HAL_UART_MspInit+0x4a4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d138      	bne.n	8000e00 <HAL_UART_MspInit+0x49c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <HAL_UART_MspInit+0x4a8>)
 8000d90:	699a      	ldr	r2, [r3, #24]
 8000d92:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <HAL_UART_MspInit+0x4a8>)
 8000d94:	2120      	movs	r1, #32
 8000d96:	430a      	orrs	r2, r1
 8000d98:	619a      	str	r2, [r3, #24]
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <HAL_UART_MspInit+0x4a8>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	2220      	movs	r2, #32
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <HAL_UART_MspInit+0x4a8>)
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <HAL_UART_MspInit+0x4a8>)
 8000dac:	2180      	movs	r1, #128	@ 0x80
 8000dae:	0289      	lsls	r1, r1, #10
 8000db0:	430a      	orrs	r2, r1
 8000db2:	615a      	str	r2, [r3, #20]
 8000db4:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <HAL_UART_MspInit+0x4a8>)
 8000db6:	695a      	ldr	r2, [r3, #20]
 8000db8:	2380      	movs	r3, #128	@ 0x80
 8000dba:	029b      	lsls	r3, r3, #10
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dc2:	213c      	movs	r1, #60	@ 0x3c
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2230      	movs	r2, #48	@ 0x30
 8000dc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2202      	movs	r2, #2
 8000dce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_USART6;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2205      	movs	r2, #5
 8000de0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	187a      	adds	r2, r7, r1
 8000de4:	2390      	movs	r3, #144	@ 0x90
 8000de6:	05db      	lsls	r3, r3, #23
 8000de8:	0011      	movs	r1, r2
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 fc24 	bl	8001638 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	201d      	movs	r0, #29
 8000df6:	f000 f9d7 	bl	80011a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 8000dfa:	201d      	movs	r0, #29
 8000dfc:	f000 f9e9 	bl	80011d2 <HAL_NVIC_EnableIRQ>
}
 8000e00:	46c0      	nop			@ (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b015      	add	sp, #84	@ 0x54
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	40011400 	.word	0x40011400
 8000e0c:	40021000 	.word	0x40021000

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e14:	46c0      	nop			@ (mov r8, r8)
 8000e16:	e7fd      	b.n	8000e14 <NMI_Handler+0x4>

08000e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1c:	46c0      	nop			@ (mov r8, r8)
 8000e1e:	e7fd      	b.n	8000e1c <HardFault_Handler+0x4>

08000e20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 f8ca 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e48:	4b03      	ldr	r3, [pc, #12]	@ (8000e58 <DMA1_Channel1_IRQHandler+0x14>)
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 fb09 	bl	8001462 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	20000358 	.word	0x20000358

08000e5c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart5_rx);
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 fafd 	bl	8001462 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000e68:	46c0      	nop			@ (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	200003e0 	.word	0x200003e0

08000e74 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8000e78:	4b03      	ldr	r3, [pc, #12]	@ (8000e88 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 faf1 	bl	8001462 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000e80:	46c0      	nop			@ (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	2000039c 	.word	0x2000039c

08000e8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e90:	4b03      	ldr	r3, [pc, #12]	@ (8000ea0 <USART1_IRQHandler+0x14>)
 8000e92:	0018      	movs	r0, r3
 8000e94:	f001 fb66 	bl	8002564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e98:	46c0      	nop			@ (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	20000028 	.word	0x20000028

08000ea4 <USART3_6_IRQHandler>:

/**
  * @brief This function handles USART3 to USART6 global interrupts.
  */
void USART3_6_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_6_IRQn 0 */

  /* USER CODE END USART3_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ea8:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <USART3_6_IRQHandler+0x2c>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f001 fb5a 	bl	8002564 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8000eb0:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <USART3_6_IRQHandler+0x30>)
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f001 fb56 	bl	8002564 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <USART3_6_IRQHandler+0x34>)
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f001 fb52 	bl	8002564 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart6);(&huart6);
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <USART3_6_IRQHandler+0x38>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f001 fb4e 	bl	8002564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_6_IRQn 1 */

  /* USER CODE END USART3_6_IRQn 1 */
}
 8000ec8:	46c0      	nop			@ (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	20000138 	.word	0x20000138
 8000ed4:	200001c0 	.word	0x200001c0
 8000ed8:	20000248 	.word	0x20000248
 8000edc:	200002d0 	.word	0x200002d0

08000ee0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ee4:	46c0      	nop			@ (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eec:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ef0:	f7ff fff6 	bl	8000ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef4:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef6:	490d      	ldr	r1, [pc, #52]	@ (8000f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <LoopForever+0xe>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f38 <LoopForever+0x16>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f1a:	f002 fc2d 	bl	8003778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f1e:	f7ff f97d 	bl	800021c <main>

08000f22 <LoopForever>:

LoopForever:
    b LoopForever
 8000f22:	e7fe      	b.n	8000f22 <LoopForever>
  ldr   r0, =_estack
 8000f24:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f30:	0800382c 	.word	0x0800382c
  ldr r2, =_sbss
 8000f34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f38:	2000063c 	.word	0x2000063c

08000f3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC1_IRQHandler>
	...

08000f40 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <HAL_Init+0x24>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_Init+0x24>)
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f809 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f56:	f7ff fce1 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	40022000 	.word	0x40022000

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f70:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <HAL_InitTick+0x5c>)
 8000f72:	681c      	ldr	r4, [r3, #0]
 8000f74:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <HAL_InitTick+0x60>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	0019      	movs	r1, r3
 8000f7a:	23fa      	movs	r3, #250	@ 0xfa
 8000f7c:	0098      	lsls	r0, r3, #2
 8000f7e:	f7ff f8c1 	bl	8000104 <__udivsi3>
 8000f82:	0003      	movs	r3, r0
 8000f84:	0019      	movs	r1, r3
 8000f86:	0020      	movs	r0, r4
 8000f88:	f7ff f8bc 	bl	8000104 <__udivsi3>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f000 f92f 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f94:	1e03      	subs	r3, r0, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e00f      	b.n	8000fbc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d80b      	bhi.n	8000fba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	425b      	negs	r3, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	0018      	movs	r0, r3
 8000fac:	f000 f8fc 	bl	80011a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_InitTick+0x64>)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b003      	add	sp, #12
 8000fc2:	bd90      	pop	{r4, r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <HAL_IncTick+0x1c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	001a      	movs	r2, r3
 8000fda:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	18d2      	adds	r2, r2, r3
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fe2:	601a      	str	r2, [r3, #0]
}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000638 	.word	0x20000638

08000ff4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	@ (8001004 <HAL_GetTick+0x10>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	20000638 	.word	0x20000638

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff fff0 	bl	8000ff4 <HAL_GetTick>
 8001014:	0003      	movs	r3, r0
 8001016:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3301      	adds	r3, #1
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	001a      	movs	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	189b      	adds	r3, r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	f7ff ffe0 	bl	8000ff4 <HAL_GetTick>
 8001034:	0002      	movs	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	46c0      	nop			@ (mov r8, r8)
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b004      	add	sp, #16
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	20000008 	.word	0x20000008

08001050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	0002      	movs	r2, r0
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b7f      	cmp	r3, #127	@ 0x7f
 8001062:	d809      	bhi.n	8001078 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001064:	1dfb      	adds	r3, r7, #7
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	001a      	movs	r2, r3
 800106a:	231f      	movs	r3, #31
 800106c:	401a      	ands	r2, r3
 800106e:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <__NVIC_EnableIRQ+0x30>)
 8001070:	2101      	movs	r1, #1
 8001072:	4091      	lsls	r1, r2
 8001074:	000a      	movs	r2, r1
 8001076:	601a      	str	r2, [r3, #0]
  }
}
 8001078:	46c0      	nop			@ (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b002      	add	sp, #8
 800107e:	bd80      	pop	{r7, pc}
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	0002      	movs	r2, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b7f      	cmp	r3, #127	@ 0x7f
 8001098:	d828      	bhi.n	80010ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800109a:	4a2f      	ldr	r2, [pc, #188]	@ (8001158 <__NVIC_SetPriority+0xd4>)
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	33c0      	adds	r3, #192	@ 0xc0
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	589b      	ldr	r3, [r3, r2]
 80010aa:	1dfa      	adds	r2, r7, #7
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	0011      	movs	r1, r2
 80010b0:	2203      	movs	r2, #3
 80010b2:	400a      	ands	r2, r1
 80010b4:	00d2      	lsls	r2, r2, #3
 80010b6:	21ff      	movs	r1, #255	@ 0xff
 80010b8:	4091      	lsls	r1, r2
 80010ba:	000a      	movs	r2, r1
 80010bc:	43d2      	mvns	r2, r2
 80010be:	401a      	ands	r2, r3
 80010c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	019b      	lsls	r3, r3, #6
 80010c6:	22ff      	movs	r2, #255	@ 0xff
 80010c8:	401a      	ands	r2, r3
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	0018      	movs	r0, r3
 80010d0:	2303      	movs	r3, #3
 80010d2:	4003      	ands	r3, r0
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d8:	481f      	ldr	r0, [pc, #124]	@ (8001158 <__NVIC_SetPriority+0xd4>)
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	430a      	orrs	r2, r1
 80010e4:	33c0      	adds	r3, #192	@ 0xc0
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010ea:	e031      	b.n	8001150 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ec:	4a1b      	ldr	r2, [pc, #108]	@ (800115c <__NVIC_SetPriority+0xd8>)
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	0019      	movs	r1, r3
 80010f4:	230f      	movs	r3, #15
 80010f6:	400b      	ands	r3, r1
 80010f8:	3b08      	subs	r3, #8
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3306      	adds	r3, #6
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	18d3      	adds	r3, r2, r3
 8001102:	3304      	adds	r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	1dfa      	adds	r2, r7, #7
 8001108:	7812      	ldrb	r2, [r2, #0]
 800110a:	0011      	movs	r1, r2
 800110c:	2203      	movs	r2, #3
 800110e:	400a      	ands	r2, r1
 8001110:	00d2      	lsls	r2, r2, #3
 8001112:	21ff      	movs	r1, #255	@ 0xff
 8001114:	4091      	lsls	r1, r2
 8001116:	000a      	movs	r2, r1
 8001118:	43d2      	mvns	r2, r2
 800111a:	401a      	ands	r2, r3
 800111c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	019b      	lsls	r3, r3, #6
 8001122:	22ff      	movs	r2, #255	@ 0xff
 8001124:	401a      	ands	r2, r3
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	0018      	movs	r0, r3
 800112c:	2303      	movs	r3, #3
 800112e:	4003      	ands	r3, r0
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001134:	4809      	ldr	r0, [pc, #36]	@ (800115c <__NVIC_SetPriority+0xd8>)
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	001c      	movs	r4, r3
 800113c:	230f      	movs	r3, #15
 800113e:	4023      	ands	r3, r4
 8001140:	3b08      	subs	r3, #8
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	430a      	orrs	r2, r1
 8001146:	3306      	adds	r3, #6
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	18c3      	adds	r3, r0, r3
 800114c:	3304      	adds	r3, #4
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	46c0      	nop			@ (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b003      	add	sp, #12
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1e5a      	subs	r2, r3, #1
 800116c:	2380      	movs	r3, #128	@ 0x80
 800116e:	045b      	lsls	r3, r3, #17
 8001170:	429a      	cmp	r2, r3
 8001172:	d301      	bcc.n	8001178 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001174:	2301      	movs	r3, #1
 8001176:	e010      	b.n	800119a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <SysTick_Config+0x44>)
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	3a01      	subs	r2, #1
 800117e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001180:	2301      	movs	r3, #1
 8001182:	425b      	negs	r3, r3
 8001184:	2103      	movs	r1, #3
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff ff7c 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <SysTick_Config+0x44>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <SysTick_Config+0x44>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	0018      	movs	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	210f      	movs	r1, #15
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	1c02      	adds	r2, r0, #0
 80011b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	0011      	movs	r1, r2
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff ff5d 	bl	8001084 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b004      	add	sp, #16
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	0002      	movs	r2, r0
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	0018      	movs	r0, r3
 80011e6:	f7ff ff33 	bl	8001050 <__NVIC_EnableIRQ>
}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff ffaf 	bl	8001160 <SysTick_Config>
 8001202:	0003      	movs	r3, r0
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	b002      	add	sp, #8
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e036      	b.n	8001290 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2221      	movs	r2, #33	@ 0x21
 8001226:	2102      	movs	r1, #2
 8001228:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4a18      	ldr	r2, [pc, #96]	@ (8001298 <HAL_DMA_Init+0x8c>)
 8001236:	4013      	ands	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001242:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	0018      	movs	r0, r3
 8001274:	f000 f9c4 	bl	8001600 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2221      	movs	r2, #33	@ 0x21
 8001282:	2101      	movs	r1, #1
 8001284:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2220      	movs	r2, #32
 800128a:	2100      	movs	r1, #0
 800128c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	0018      	movs	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	b004      	add	sp, #16
 8001296:	bd80      	pop	{r7, pc}
 8001298:	ffffc00f 	.word	0xffffc00f

0800129c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012aa:	2317      	movs	r3, #23
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2220      	movs	r2, #32
 80012b6:	5c9b      	ldrb	r3, [r3, r2]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <HAL_DMA_Start_IT+0x24>
 80012bc:	2302      	movs	r3, #2
 80012be:	e04f      	b.n	8001360 <HAL_DMA_Start_IT+0xc4>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2220      	movs	r2, #32
 80012c4:	2101      	movs	r1, #1
 80012c6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2221      	movs	r2, #33	@ 0x21
 80012cc:	5c9b      	ldrb	r3, [r3, r2]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d13a      	bne.n	800134a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2221      	movs	r2, #33	@ 0x21
 80012d8:	2102      	movs	r1, #2
 80012da:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2200      	movs	r2, #0
 80012e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2101      	movs	r1, #1
 80012ee:	438a      	bics	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f000 f954 	bl	80015a6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001302:	2b00      	cmp	r3, #0
 8001304:	d008      	beq.n	8001318 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	210e      	movs	r1, #14
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e00f      	b.n	8001338 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	210a      	movs	r1, #10
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2104      	movs	r1, #4
 8001334:	438a      	bics	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2101      	movs	r1, #1
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	e007      	b.n	800135a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2220      	movs	r2, #32
 800134e:	2100      	movs	r1, #0
 8001350:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001352:	2317      	movs	r3, #23
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	2202      	movs	r2, #2
 8001358:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800135a:	2317      	movs	r3, #23
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	781b      	ldrb	r3, [r3, #0]
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b006      	add	sp, #24
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2221      	movs	r2, #33	@ 0x21
 8001374:	5c9b      	ldrb	r3, [r3, r2]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d008      	beq.n	800138e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2220      	movs	r2, #32
 8001386:	2100      	movs	r1, #0
 8001388:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e020      	b.n	80013d0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	210e      	movs	r1, #14
 800139a:	438a      	bics	r2, r1
 800139c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2101      	movs	r1, #1
 80013aa:	438a      	bics	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013b6:	2101      	movs	r1, #1
 80013b8:	4091      	lsls	r1, r2
 80013ba:	000a      	movs	r2, r1
 80013bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2221      	movs	r2, #33	@ 0x21
 80013c2:	2101      	movs	r1, #1
 80013c4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2220      	movs	r2, #32
 80013ca:	2100      	movs	r1, #0
 80013cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	0018      	movs	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b002      	add	sp, #8
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e0:	210f      	movs	r1, #15
 80013e2:	187b      	adds	r3, r7, r1
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2221      	movs	r2, #33	@ 0x21
 80013ec:	5c9b      	ldrb	r3, [r3, r2]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d006      	beq.n	8001402 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2204      	movs	r2, #4
 80013f8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e028      	b.n	8001454 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	210e      	movs	r1, #14
 800140e:	438a      	bics	r2, r1
 8001410:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2101      	movs	r1, #1
 800141e:	438a      	bics	r2, r1
 8001420:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800142a:	2101      	movs	r1, #1
 800142c:	4091      	lsls	r1, r2
 800142e:	000a      	movs	r2, r1
 8001430:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2221      	movs	r2, #33	@ 0x21
 8001436:	2101      	movs	r1, #1
 8001438:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2220      	movs	r2, #32
 800143e:	2100      	movs	r1, #0
 8001440:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001446:	2b00      	cmp	r3, #0
 8001448:	d004      	beq.n	8001454 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	0010      	movs	r0, r2
 8001452:	4798      	blx	r3
    }
  }
  return status;
 8001454:	230f      	movs	r3, #15
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	781b      	ldrb	r3, [r3, #0]
}
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b004      	add	sp, #16
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	2204      	movs	r2, #4
 8001480:	409a      	lsls	r2, r3
 8001482:	0013      	movs	r3, r2
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	4013      	ands	r3, r2
 8001488:	d024      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x72>
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2204      	movs	r2, #4
 800148e:	4013      	ands	r3, r2
 8001490:	d020      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2220      	movs	r2, #32
 800149a:	4013      	ands	r3, r2
 800149c:	d107      	bne.n	80014ae <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2104      	movs	r1, #4
 80014aa:	438a      	bics	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014b6:	2104      	movs	r1, #4
 80014b8:	4091      	lsls	r1, r2
 80014ba:	000a      	movs	r2, r1
 80014bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d100      	bne.n	80014c8 <HAL_DMA_IRQHandler+0x66>
 80014c6:	e06a      	b.n	800159e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	0010      	movs	r0, r2
 80014d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80014d2:	e064      	b.n	800159e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	2202      	movs	r2, #2
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	d02b      	beq.n	800153c <HAL_DMA_IRQHandler+0xda>
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2202      	movs	r2, #2
 80014e8:	4013      	ands	r3, r2
 80014ea:	d027      	beq.n	800153c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2220      	movs	r2, #32
 80014f4:	4013      	ands	r3, r2
 80014f6:	d10b      	bne.n	8001510 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	210a      	movs	r1, #10
 8001504:	438a      	bics	r2, r1
 8001506:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2221      	movs	r2, #33	@ 0x21
 800150c:	2101      	movs	r1, #1
 800150e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001518:	2102      	movs	r1, #2
 800151a:	4091      	lsls	r1, r2
 800151c:	000a      	movs	r2, r1
 800151e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2220      	movs	r2, #32
 8001524:	2100      	movs	r1, #0
 8001526:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152c:	2b00      	cmp	r3, #0
 800152e:	d036      	beq.n	800159e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	0010      	movs	r0, r2
 8001538:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800153a:	e030      	b.n	800159e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	2208      	movs	r2, #8
 8001542:	409a      	lsls	r2, r3
 8001544:	0013      	movs	r3, r2
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4013      	ands	r3, r2
 800154a:	d028      	beq.n	800159e <HAL_DMA_IRQHandler+0x13c>
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2208      	movs	r2, #8
 8001550:	4013      	ands	r3, r2
 8001552:	d024      	beq.n	800159e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	210e      	movs	r1, #14
 8001560:	438a      	bics	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800156c:	2101      	movs	r1, #1
 800156e:	4091      	lsls	r1, r2
 8001570:	000a      	movs	r2, r1
 8001572:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2221      	movs	r2, #33	@ 0x21
 800157e:	2101      	movs	r1, #1
 8001580:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2220      	movs	r2, #32
 8001586:	2100      	movs	r1, #0
 8001588:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	0010      	movs	r0, r2
 800159a:	4798      	blx	r3
    }
  }
}
 800159c:	e7ff      	b.n	800159e <HAL_DMA_IRQHandler+0x13c>
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b004      	add	sp, #16
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015bc:	2101      	movs	r1, #1
 80015be:	4091      	lsls	r1, r2
 80015c0:	000a      	movs	r2, r1
 80015c2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b10      	cmp	r3, #16
 80015d2:	d108      	bne.n	80015e6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015e4:	e007      	b.n	80015f6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	60da      	str	r2, [r3, #12]
}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b004      	add	sp, #16
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a08      	ldr	r2, [pc, #32]	@ (8001630 <DMA_CalcBaseAndBitshift+0x30>)
 800160e:	4694      	mov	ip, r2
 8001610:	4463      	add	r3, ip
 8001612:	2114      	movs	r1, #20
 8001614:	0018      	movs	r0, r3
 8001616:	f7fe fd75 	bl	8000104 <__udivsi3>
 800161a:	0003      	movs	r3, r0
 800161c:	009a      	lsls	r2, r3, #2
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a03      	ldr	r2, [pc, #12]	@ (8001634 <DMA_CalcBaseAndBitshift+0x34>)
 8001626:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001628:	46c0      	nop			@ (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b002      	add	sp, #8
 800162e:	bd80      	pop	{r7, pc}
 8001630:	bffdfff8 	.word	0xbffdfff8
 8001634:	40020000 	.word	0x40020000

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001646:	e14f      	b.n	80018e8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2101      	movs	r1, #1
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4091      	lsls	r1, r2
 8001652:	000a      	movs	r2, r1
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d100      	bne.n	8001660 <HAL_GPIO_Init+0x28>
 800165e:	e140      	b.n	80018e2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2203      	movs	r2, #3
 8001666:	4013      	ands	r3, r2
 8001668:	2b01      	cmp	r3, #1
 800166a:	d005      	beq.n	8001678 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2203      	movs	r2, #3
 8001672:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001674:	2b02      	cmp	r3, #2
 8001676:	d130      	bne.n	80016da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	409a      	lsls	r2, r3
 8001686:	0013      	movs	r3, r2
 8001688:	43da      	mvns	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	409a      	lsls	r2, r3
 800169a:	0013      	movs	r3, r2
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ae:	2201      	movs	r2, #1
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	43da      	mvns	r2, r3
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	2201      	movs	r2, #1
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
 80016cc:	0013      	movs	r3, r2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2203      	movs	r2, #3
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d017      	beq.n	8001716 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2203      	movs	r2, #3
 80016f2:	409a      	lsls	r2, r3
 80016f4:	0013      	movs	r3, r2
 80016f6:	43da      	mvns	r2, r3
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2203      	movs	r2, #3
 800171c:	4013      	ands	r3, r2
 800171e:	2b02      	cmp	r3, #2
 8001720:	d123      	bne.n	800176a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	08da      	lsrs	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3208      	adds	r2, #8
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	58d3      	ldr	r3, [r2, r3]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2207      	movs	r2, #7
 8001734:	4013      	ands	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	409a      	lsls	r2, r3
 800173c:	0013      	movs	r3, r2
 800173e:	43da      	mvns	r2, r3
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	691a      	ldr	r2, [r3, #16]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2107      	movs	r1, #7
 800174e:	400b      	ands	r3, r1
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	08da      	lsrs	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3208      	adds	r2, #8
 8001764:	0092      	lsls	r2, r2, #2
 8001766:	6939      	ldr	r1, [r7, #16]
 8001768:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	409a      	lsls	r2, r3
 8001778:	0013      	movs	r3, r2
 800177a:	43da      	mvns	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2203      	movs	r2, #3
 8001788:	401a      	ands	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	409a      	lsls	r2, r3
 8001790:	0013      	movs	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	23c0      	movs	r3, #192	@ 0xc0
 80017a4:	029b      	lsls	r3, r3, #10
 80017a6:	4013      	ands	r3, r2
 80017a8:	d100      	bne.n	80017ac <HAL_GPIO_Init+0x174>
 80017aa:	e09a      	b.n	80018e2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ac:	4b54      	ldr	r3, [pc, #336]	@ (8001900 <HAL_GPIO_Init+0x2c8>)
 80017ae:	699a      	ldr	r2, [r3, #24]
 80017b0:	4b53      	ldr	r3, [pc, #332]	@ (8001900 <HAL_GPIO_Init+0x2c8>)
 80017b2:	2101      	movs	r1, #1
 80017b4:	430a      	orrs	r2, r1
 80017b6:	619a      	str	r2, [r3, #24]
 80017b8:	4b51      	ldr	r3, [pc, #324]	@ (8001900 <HAL_GPIO_Init+0x2c8>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2201      	movs	r2, #1
 80017be:	4013      	ands	r3, r2
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001904 <HAL_GPIO_Init+0x2cc>)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	589b      	ldr	r3, [r3, r2]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2203      	movs	r2, #3
 80017d6:	4013      	ands	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	409a      	lsls	r2, r3
 80017de:	0013      	movs	r3, r2
 80017e0:	43da      	mvns	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	2390      	movs	r3, #144	@ 0x90
 80017ec:	05db      	lsls	r3, r3, #23
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d013      	beq.n	800181a <HAL_GPIO_Init+0x1e2>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a44      	ldr	r2, [pc, #272]	@ (8001908 <HAL_GPIO_Init+0x2d0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00d      	beq.n	8001816 <HAL_GPIO_Init+0x1de>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a43      	ldr	r2, [pc, #268]	@ (800190c <HAL_GPIO_Init+0x2d4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d007      	beq.n	8001812 <HAL_GPIO_Init+0x1da>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a42      	ldr	r2, [pc, #264]	@ (8001910 <HAL_GPIO_Init+0x2d8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <HAL_GPIO_Init+0x1d6>
 800180a:	2303      	movs	r3, #3
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x1e4>
 800180e:	2305      	movs	r3, #5
 8001810:	e004      	b.n	800181c <HAL_GPIO_Init+0x1e4>
 8001812:	2302      	movs	r3, #2
 8001814:	e002      	b.n	800181c <HAL_GPIO_Init+0x1e4>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x1e4>
 800181a:	2300      	movs	r3, #0
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	2103      	movs	r1, #3
 8001820:	400a      	ands	r2, r1
 8001822:	0092      	lsls	r2, r2, #2
 8001824:	4093      	lsls	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800182c:	4935      	ldr	r1, [pc, #212]	@ (8001904 <HAL_GPIO_Init+0x2cc>)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183a:	4b36      	ldr	r3, [pc, #216]	@ (8001914 <HAL_GPIO_Init+0x2dc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	43da      	mvns	r2, r3
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	2380      	movs	r3, #128	@ 0x80
 8001850:	035b      	lsls	r3, r3, #13
 8001852:	4013      	ands	r3, r2
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800185e:	4b2d      	ldr	r3, [pc, #180]	@ (8001914 <HAL_GPIO_Init+0x2dc>)
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001864:	4b2b      	ldr	r3, [pc, #172]	@ (8001914 <HAL_GPIO_Init+0x2dc>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	43da      	mvns	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	2380      	movs	r3, #128	@ 0x80
 800187a:	039b      	lsls	r3, r3, #14
 800187c:	4013      	ands	r3, r2
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001888:	4b22      	ldr	r3, [pc, #136]	@ (8001914 <HAL_GPIO_Init+0x2dc>)
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800188e:	4b21      	ldr	r3, [pc, #132]	@ (8001914 <HAL_GPIO_Init+0x2dc>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43da      	mvns	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	2380      	movs	r3, #128	@ 0x80
 80018a4:	029b      	lsls	r3, r3, #10
 80018a6:	4013      	ands	r3, r2
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018b2:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <HAL_GPIO_Init+0x2dc>)
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80018b8:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <HAL_GPIO_Init+0x2dc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	43da      	mvns	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	025b      	lsls	r3, r3, #9
 80018d0:	4013      	ands	r3, r2
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <HAL_GPIO_Init+0x2dc>)
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	40da      	lsrs	r2, r3
 80018f0:	1e13      	subs	r3, r2, #0
 80018f2:	d000      	beq.n	80018f6 <HAL_GPIO_Init+0x2be>
 80018f4:	e6a8      	b.n	8001648 <HAL_GPIO_Init+0x10>
  } 
}
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	46c0      	nop			@ (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b006      	add	sp, #24
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000
 8001904:	40010000 	.word	0x40010000
 8001908:	48000400 	.word	0x48000400
 800190c:	48000800 	.word	0x48000800
 8001910:	48000c00 	.word	0x48000c00
 8001914:	40010400 	.word	0x40010400

08001918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e305      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2201      	movs	r2, #1
 8001930:	4013      	ands	r3, r2
 8001932:	d100      	bne.n	8001936 <HAL_RCC_OscConfig+0x1e>
 8001934:	e08d      	b.n	8001a52 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001936:	4bc5      	ldr	r3, [pc, #788]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	220c      	movs	r2, #12
 800193c:	4013      	ands	r3, r2
 800193e:	2b04      	cmp	r3, #4
 8001940:	d00e      	beq.n	8001960 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001942:	4bc2      	ldr	r3, [pc, #776]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	220c      	movs	r2, #12
 8001948:	4013      	ands	r3, r2
 800194a:	2b08      	cmp	r3, #8
 800194c:	d116      	bne.n	800197c <HAL_RCC_OscConfig+0x64>
 800194e:	4bbf      	ldr	r3, [pc, #764]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	23c0      	movs	r3, #192	@ 0xc0
 8001954:	025b      	lsls	r3, r3, #9
 8001956:	401a      	ands	r2, r3
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	025b      	lsls	r3, r3, #9
 800195c:	429a      	cmp	r2, r3
 800195e:	d10d      	bne.n	800197c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	4bba      	ldr	r3, [pc, #744]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	@ 0x80
 8001966:	029b      	lsls	r3, r3, #10
 8001968:	4013      	ands	r3, r2
 800196a:	d100      	bne.n	800196e <HAL_RCC_OscConfig+0x56>
 800196c:	e070      	b.n	8001a50 <HAL_RCC_OscConfig+0x138>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d000      	beq.n	8001978 <HAL_RCC_OscConfig+0x60>
 8001976:	e06b      	b.n	8001a50 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e2dc      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d107      	bne.n	8001994 <HAL_RCC_OscConfig+0x7c>
 8001984:	4bb1      	ldr	r3, [pc, #708]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4bb0      	ldr	r3, [pc, #704]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 800198a:	2180      	movs	r1, #128	@ 0x80
 800198c:	0249      	lsls	r1, r1, #9
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e02f      	b.n	80019f4 <HAL_RCC_OscConfig+0xdc>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10c      	bne.n	80019b6 <HAL_RCC_OscConfig+0x9e>
 800199c:	4bab      	ldr	r3, [pc, #684]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4baa      	ldr	r3, [pc, #680]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 80019a2:	49ab      	ldr	r1, [pc, #684]	@ (8001c50 <HAL_RCC_OscConfig+0x338>)
 80019a4:	400a      	ands	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	4ba8      	ldr	r3, [pc, #672]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4ba7      	ldr	r3, [pc, #668]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 80019ae:	49a9      	ldr	r1, [pc, #676]	@ (8001c54 <HAL_RCC_OscConfig+0x33c>)
 80019b0:	400a      	ands	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e01e      	b.n	80019f4 <HAL_RCC_OscConfig+0xdc>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d10e      	bne.n	80019dc <HAL_RCC_OscConfig+0xc4>
 80019be:	4ba3      	ldr	r3, [pc, #652]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4ba2      	ldr	r3, [pc, #648]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 80019c4:	2180      	movs	r1, #128	@ 0x80
 80019c6:	02c9      	lsls	r1, r1, #11
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	4b9f      	ldr	r3, [pc, #636]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b9e      	ldr	r3, [pc, #632]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 80019d2:	2180      	movs	r1, #128	@ 0x80
 80019d4:	0249      	lsls	r1, r1, #9
 80019d6:	430a      	orrs	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e00b      	b.n	80019f4 <HAL_RCC_OscConfig+0xdc>
 80019dc:	4b9b      	ldr	r3, [pc, #620]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b9a      	ldr	r3, [pc, #616]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 80019e2:	499b      	ldr	r1, [pc, #620]	@ (8001c50 <HAL_RCC_OscConfig+0x338>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	4b98      	ldr	r3, [pc, #608]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b97      	ldr	r3, [pc, #604]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 80019ee:	4999      	ldr	r1, [pc, #612]	@ (8001c54 <HAL_RCC_OscConfig+0x33c>)
 80019f0:	400a      	ands	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d014      	beq.n	8001a26 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fafa 	bl	8000ff4 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a06:	f7ff faf5 	bl	8000ff4 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b64      	cmp	r3, #100	@ 0x64
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e28e      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a18:	4b8c      	ldr	r3, [pc, #560]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	029b      	lsls	r3, r3, #10
 8001a20:	4013      	ands	r3, r2
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0xee>
 8001a24:	e015      	b.n	8001a52 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7ff fae5 	bl	8000ff4 <HAL_GetTick>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff fae0 	bl	8000ff4 <HAL_GetTick>
 8001a34:	0002      	movs	r2, r0
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	@ 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e279      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a42:	4b82      	ldr	r3, [pc, #520]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	@ 0x80
 8001a48:	029b      	lsls	r3, r3, #10
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x118>
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a50:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2202      	movs	r2, #2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d100      	bne.n	8001a5e <HAL_RCC_OscConfig+0x146>
 8001a5c:	e06c      	b.n	8001b38 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a5e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	220c      	movs	r2, #12
 8001a64:	4013      	ands	r3, r2
 8001a66:	d00e      	beq.n	8001a86 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a68:	4b78      	ldr	r3, [pc, #480]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d11f      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x19c>
 8001a74:	4b75      	ldr	r3, [pc, #468]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	23c0      	movs	r3, #192	@ 0xc0
 8001a7a:	025b      	lsls	r3, r3, #9
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d116      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a86:	4b71      	ldr	r3, [pc, #452]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_OscConfig+0x184>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e24c      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9c:	4b6b      	ldr	r3, [pc, #428]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	22f8      	movs	r2, #248	@ 0xf8
 8001aa2:	4393      	bics	r3, r2
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	00da      	lsls	r2, r3, #3
 8001aac:	4b67      	ldr	r3, [pc, #412]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	e041      	b.n	8001b38 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d024      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001abc:	4b63      	ldr	r3, [pc, #396]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b62      	ldr	r3, [pc, #392]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fa94 	bl	8000ff4 <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fa8f 	bl	8000ff4 <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e228      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	4b59      	ldr	r3, [pc, #356]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2202      	movs	r2, #2
 8001aea:	4013      	ands	r3, r2
 8001aec:	d0f1      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aee:	4b57      	ldr	r3, [pc, #348]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	22f8      	movs	r2, #248	@ 0xf8
 8001af4:	4393      	bics	r3, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	00da      	lsls	r2, r3, #3
 8001afe:	4b53      	ldr	r3, [pc, #332]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e018      	b.n	8001b38 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b06:	4b51      	ldr	r3, [pc, #324]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b50      	ldr	r3, [pc, #320]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	438a      	bics	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fa6f 	bl	8000ff4 <HAL_GetTick>
 8001b16:	0003      	movs	r3, r0
 8001b18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fa6a 	bl	8000ff4 <HAL_GetTick>
 8001b20:	0002      	movs	r2, r0
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e203      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2e:	4b47      	ldr	r3, [pc, #284]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2202      	movs	r2, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	d1f1      	bne.n	8001b1c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d036      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d019      	beq.n	8001b7e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4a:	4b40      	ldr	r3, [pc, #256]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001b4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001b50:	2101      	movs	r1, #1
 8001b52:	430a      	orrs	r2, r1
 8001b54:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b56:	f7ff fa4d 	bl	8000ff4 <HAL_GetTick>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b60:	f7ff fa48 	bl	8000ff4 <HAL_GetTick>
 8001b64:	0002      	movs	r2, r0
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e1e1      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b72:	4b36      	ldr	r3, [pc, #216]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	2202      	movs	r2, #2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d0f1      	beq.n	8001b60 <HAL_RCC_OscConfig+0x248>
 8001b7c:	e018      	b.n	8001bb0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7e:	4b33      	ldr	r3, [pc, #204]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001b80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b82:	4b32      	ldr	r3, [pc, #200]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001b84:	2101      	movs	r1, #1
 8001b86:	438a      	bics	r2, r1
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fa33 	bl	8000ff4 <HAL_GetTick>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b94:	f7ff fa2e 	bl	8000ff4 <HAL_GetTick>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e1c7      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba6:	4b29      	ldr	r3, [pc, #164]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	2202      	movs	r2, #2
 8001bac:	4013      	ands	r3, r2
 8001bae:	d1f1      	bne.n	8001b94 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d100      	bne.n	8001bbc <HAL_RCC_OscConfig+0x2a4>
 8001bba:	e0b5      	b.n	8001d28 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bbc:	201f      	movs	r0, #31
 8001bbe:	183b      	adds	r3, r7, r0
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc4:	4b21      	ldr	r3, [pc, #132]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001bc6:	69da      	ldr	r2, [r3, #28]
 8001bc8:	2380      	movs	r3, #128	@ 0x80
 8001bca:	055b      	lsls	r3, r3, #21
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d110      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001bd2:	69da      	ldr	r2, [r3, #28]
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001bd6:	2180      	movs	r1, #128	@ 0x80
 8001bd8:	0549      	lsls	r1, r1, #21
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	61da      	str	r2, [r3, #28]
 8001bde:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001be0:	69da      	ldr	r2, [r3, #28]
 8001be2:	2380      	movs	r3, #128	@ 0x80
 8001be4:	055b      	lsls	r3, r3, #21
 8001be6:	4013      	ands	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bec:	183b      	adds	r3, r7, r0
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf2:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <HAL_RCC_OscConfig+0x340>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	2380      	movs	r3, #128	@ 0x80
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d11a      	bne.n	8001c34 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfe:	4b16      	ldr	r3, [pc, #88]	@ (8001c58 <HAL_RCC_OscConfig+0x340>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <HAL_RCC_OscConfig+0x340>)
 8001c04:	2180      	movs	r1, #128	@ 0x80
 8001c06:	0049      	lsls	r1, r1, #1
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0c:	f7ff f9f2 	bl	8000ff4 <HAL_GetTick>
 8001c10:	0003      	movs	r3, r0
 8001c12:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c16:	f7ff f9ed 	bl	8000ff4 <HAL_GetTick>
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b64      	cmp	r3, #100	@ 0x64
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e186      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <HAL_RCC_OscConfig+0x340>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4013      	ands	r3, r2
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d10f      	bne.n	8001c5c <HAL_RCC_OscConfig+0x344>
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001c3e:	6a1a      	ldr	r2, [r3, #32]
 8001c40:	4b02      	ldr	r3, [pc, #8]	@ (8001c4c <HAL_RCC_OscConfig+0x334>)
 8001c42:	2101      	movs	r1, #1
 8001c44:	430a      	orrs	r2, r1
 8001c46:	621a      	str	r2, [r3, #32]
 8001c48:	e036      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3a0>
 8001c4a:	46c0      	nop			@ (mov r8, r8)
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	fffeffff 	.word	0xfffeffff
 8001c54:	fffbffff 	.word	0xfffbffff
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x366>
 8001c64:	4bb6      	ldr	r3, [pc, #728]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001c66:	6a1a      	ldr	r2, [r3, #32]
 8001c68:	4bb5      	ldr	r3, [pc, #724]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	438a      	bics	r2, r1
 8001c6e:	621a      	str	r2, [r3, #32]
 8001c70:	4bb3      	ldr	r3, [pc, #716]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001c72:	6a1a      	ldr	r2, [r3, #32]
 8001c74:	4bb2      	ldr	r3, [pc, #712]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001c76:	2104      	movs	r1, #4
 8001c78:	438a      	bics	r2, r1
 8001c7a:	621a      	str	r2, [r3, #32]
 8001c7c:	e01c      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3a0>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x388>
 8001c86:	4bae      	ldr	r3, [pc, #696]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001c88:	6a1a      	ldr	r2, [r3, #32]
 8001c8a:	4bad      	ldr	r3, [pc, #692]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001c8c:	2104      	movs	r1, #4
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	621a      	str	r2, [r3, #32]
 8001c92:	4bab      	ldr	r3, [pc, #684]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001c94:	6a1a      	ldr	r2, [r3, #32]
 8001c96:	4baa      	ldr	r3, [pc, #680]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001c98:	2101      	movs	r1, #1
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	621a      	str	r2, [r3, #32]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3a0>
 8001ca0:	4ba7      	ldr	r3, [pc, #668]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001ca2:	6a1a      	ldr	r2, [r3, #32]
 8001ca4:	4ba6      	ldr	r3, [pc, #664]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	438a      	bics	r2, r1
 8001caa:	621a      	str	r2, [r3, #32]
 8001cac:	4ba4      	ldr	r3, [pc, #656]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001cae:	6a1a      	ldr	r2, [r3, #32]
 8001cb0:	4ba3      	ldr	r3, [pc, #652]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	438a      	bics	r2, r1
 8001cb6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d014      	beq.n	8001cea <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f998 	bl	8000ff4 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc8:	e009      	b.n	8001cde <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cca:	f7ff f993 	bl	8000ff4 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	4a9b      	ldr	r2, [pc, #620]	@ (8001f44 <HAL_RCC_OscConfig+0x62c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e12b      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cde:	4b98      	ldr	r3, [pc, #608]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x3b2>
 8001ce8:	e013      	b.n	8001d12 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cea:	f7ff f983 	bl	8000ff4 <HAL_GetTick>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf2:	e009      	b.n	8001d08 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf4:	f7ff f97e 	bl	8000ff4 <HAL_GetTick>
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	4a91      	ldr	r2, [pc, #580]	@ (8001f44 <HAL_RCC_OscConfig+0x62c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e116      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d08:	4b8d      	ldr	r3, [pc, #564]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d12:	231f      	movs	r3, #31
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d105      	bne.n	8001d28 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1c:	4b88      	ldr	r3, [pc, #544]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001d1e:	69da      	ldr	r2, [r3, #28]
 8001d20:	4b87      	ldr	r3, [pc, #540]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001d22:	4989      	ldr	r1, [pc, #548]	@ (8001f48 <HAL_RCC_OscConfig+0x630>)
 8001d24:	400a      	ands	r2, r1
 8001d26:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d063      	beq.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d12a      	bne.n	8001d90 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d3a:	4b81      	ldr	r3, [pc, #516]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d3e:	4b80      	ldr	r3, [pc, #512]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001d40:	2104      	movs	r1, #4
 8001d42:	430a      	orrs	r2, r1
 8001d44:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d46:	4b7e      	ldr	r3, [pc, #504]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d52:	f7ff f94f 	bl	8000ff4 <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d5c:	f7ff f94a 	bl	8000ff4 <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e0e3      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d6e:	4b74      	ldr	r3, [pc, #464]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d72:	2202      	movs	r2, #2
 8001d74:	4013      	ands	r3, r2
 8001d76:	d0f1      	beq.n	8001d5c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d78:	4b71      	ldr	r3, [pc, #452]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7c:	22f8      	movs	r2, #248	@ 0xf8
 8001d7e:	4393      	bics	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	00da      	lsls	r2, r3, #3
 8001d88:	4b6d      	ldr	r3, [pc, #436]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d8e:	e034      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	3305      	adds	r3, #5
 8001d96:	d111      	bne.n	8001dbc <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d98:	4b69      	ldr	r3, [pc, #420]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001d9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d9c:	4b68      	ldr	r3, [pc, #416]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001d9e:	2104      	movs	r1, #4
 8001da0:	438a      	bics	r2, r1
 8001da2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001da4:	4b66      	ldr	r3, [pc, #408]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da8:	22f8      	movs	r2, #248	@ 0xf8
 8001daa:	4393      	bics	r3, r2
 8001dac:	0019      	movs	r1, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	00da      	lsls	r2, r3, #3
 8001db4:	4b62      	ldr	r3, [pc, #392]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001db6:	430a      	orrs	r2, r1
 8001db8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dba:	e01e      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dbc:	4b60      	ldr	r3, [pc, #384]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001dbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dc0:	4b5f      	ldr	r3, [pc, #380]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001dc8:	4b5d      	ldr	r3, [pc, #372]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001dce:	2101      	movs	r1, #1
 8001dd0:	438a      	bics	r2, r1
 8001dd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd4:	f7ff f90e 	bl	8000ff4 <HAL_GetTick>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dde:	f7ff f909 	bl	8000ff4 <HAL_GetTick>
 8001de2:	0002      	movs	r2, r0
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e0a2      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001df0:	4b53      	ldr	r3, [pc, #332]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001df4:	2202      	movs	r2, #2
 8001df6:	4013      	ands	r3, r2
 8001df8:	d1f1      	bne.n	8001dde <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d100      	bne.n	8001e04 <HAL_RCC_OscConfig+0x4ec>
 8001e02:	e097      	b.n	8001f34 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e04:	4b4e      	ldr	r3, [pc, #312]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	220c      	movs	r2, #12
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d100      	bne.n	8001e12 <HAL_RCC_OscConfig+0x4fa>
 8001e10:	e06b      	b.n	8001eea <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d14c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b49      	ldr	r3, [pc, #292]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4b48      	ldr	r3, [pc, #288]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001e20:	494a      	ldr	r1, [pc, #296]	@ (8001f4c <HAL_RCC_OscConfig+0x634>)
 8001e22:	400a      	ands	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff f8e5 	bl	8000ff4 <HAL_GetTick>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e30:	f7ff f8e0 	bl	8000ff4 <HAL_GetTick>
 8001e34:	0002      	movs	r2, r0
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e079      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e42:	4b3f      	ldr	r3, [pc, #252]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	2380      	movs	r3, #128	@ 0x80
 8001e48:	049b      	lsls	r3, r3, #18
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e52:	220f      	movs	r2, #15
 8001e54:	4393      	bics	r3, r2
 8001e56:	0019      	movs	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e5c:	4b38      	ldr	r3, [pc, #224]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e62:	4b37      	ldr	r3, [pc, #220]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4a3a      	ldr	r2, [pc, #232]	@ (8001f50 <HAL_RCC_OscConfig+0x638>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	431a      	orrs	r2, r3
 8001e76:	4b32      	ldr	r3, [pc, #200]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b30      	ldr	r3, [pc, #192]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b2f      	ldr	r3, [pc, #188]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001e82:	2180      	movs	r1, #128	@ 0x80
 8001e84:	0449      	lsls	r1, r1, #17
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff f8b3 	bl	8000ff4 <HAL_GetTick>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff f8ae 	bl	8000ff4 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e047      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea6:	4b26      	ldr	r3, [pc, #152]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2380      	movs	r3, #128	@ 0x80
 8001eac:	049b      	lsls	r3, r3, #18
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x57c>
 8001eb2:	e03f      	b.n	8001f34 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb4:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001eba:	4924      	ldr	r1, [pc, #144]	@ (8001f4c <HAL_RCC_OscConfig+0x634>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f898 	bl	8000ff4 <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eca:	f7ff f893 	bl	8000ff4 <HAL_GetTick>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e02c      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001edc:	4b18      	ldr	r3, [pc, #96]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2380      	movs	r3, #128	@ 0x80
 8001ee2:	049b      	lsls	r3, r3, #18
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x5b2>
 8001ee8:	e024      	b.n	8001f34 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e01f      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ef6:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001efc:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <HAL_RCC_OscConfig+0x628>)
 8001efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f00:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	23c0      	movs	r3, #192	@ 0xc0
 8001f06:	025b      	lsls	r3, r3, #9
 8001f08:	401a      	ands	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d10e      	bne.n	8001f30 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	220f      	movs	r2, #15
 8001f16:	401a      	ands	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	23f0      	movs	r3, #240	@ 0xf0
 8001f24:	039b      	lsls	r3, r3, #14
 8001f26:	401a      	ands	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	0018      	movs	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b008      	add	sp, #32
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	40021000 	.word	0x40021000
 8001f44:	00001388 	.word	0x00001388
 8001f48:	efffffff 	.word	0xefffffff
 8001f4c:	feffffff 	.word	0xfeffffff
 8001f50:	ffc27fff 	.word	0xffc27fff

08001f54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0b3      	b.n	80020d0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f68:	4b5b      	ldr	r3, [pc, #364]	@ (80020d8 <HAL_RCC_ClockConfig+0x184>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d911      	bls.n	8001f9a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b58      	ldr	r3, [pc, #352]	@ (80020d8 <HAL_RCC_ClockConfig+0x184>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4393      	bics	r3, r2
 8001f7e:	0019      	movs	r1, r3
 8001f80:	4b55      	ldr	r3, [pc, #340]	@ (80020d8 <HAL_RCC_ClockConfig+0x184>)
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f88:	4b53      	ldr	r3, [pc, #332]	@ (80020d8 <HAL_RCC_ClockConfig+0x184>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4013      	ands	r3, r2
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d001      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e09a      	b.n	80020d0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d015      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	4013      	ands	r3, r2
 8001fac:	d006      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fae:	4b4b      	ldr	r3, [pc, #300]	@ (80020dc <HAL_RCC_ClockConfig+0x188>)
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80020dc <HAL_RCC_ClockConfig+0x188>)
 8001fb4:	21e0      	movs	r1, #224	@ 0xe0
 8001fb6:	00c9      	lsls	r1, r1, #3
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fbc:	4b47      	ldr	r3, [pc, #284]	@ (80020dc <HAL_RCC_ClockConfig+0x188>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	22f0      	movs	r2, #240	@ 0xf0
 8001fc2:	4393      	bics	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	4b44      	ldr	r3, [pc, #272]	@ (80020dc <HAL_RCC_ClockConfig+0x188>)
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d040      	beq.n	800205c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80020dc <HAL_RCC_ClockConfig+0x188>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	2380      	movs	r3, #128	@ 0x80
 8001fe8:	029b      	lsls	r3, r3, #10
 8001fea:	4013      	ands	r3, r2
 8001fec:	d114      	bne.n	8002018 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e06e      	b.n	80020d0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	4b38      	ldr	r3, [pc, #224]	@ (80020dc <HAL_RCC_ClockConfig+0x188>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	2380      	movs	r3, #128	@ 0x80
 8002000:	049b      	lsls	r3, r3, #18
 8002002:	4013      	ands	r3, r2
 8002004:	d108      	bne.n	8002018 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e062      	b.n	80020d0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200a:	4b34      	ldr	r3, [pc, #208]	@ (80020dc <HAL_RCC_ClockConfig+0x188>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2202      	movs	r2, #2
 8002010:	4013      	ands	r3, r2
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e05b      	b.n	80020d0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002018:	4b30      	ldr	r3, [pc, #192]	@ (80020dc <HAL_RCC_ClockConfig+0x188>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2203      	movs	r2, #3
 800201e:	4393      	bics	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	4b2d      	ldr	r3, [pc, #180]	@ (80020dc <HAL_RCC_ClockConfig+0x188>)
 8002028:	430a      	orrs	r2, r1
 800202a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800202c:	f7fe ffe2 	bl	8000ff4 <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002034:	e009      	b.n	800204a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002036:	f7fe ffdd 	bl	8000ff4 <HAL_GetTick>
 800203a:	0002      	movs	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	4a27      	ldr	r2, [pc, #156]	@ (80020e0 <HAL_RCC_ClockConfig+0x18c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e042      	b.n	80020d0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_RCC_ClockConfig+0x188>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	220c      	movs	r2, #12
 8002050:	401a      	ands	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	d1ec      	bne.n	8002036 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <HAL_RCC_ClockConfig+0x184>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2201      	movs	r2, #1
 8002062:	4013      	ands	r3, r2
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d211      	bcs.n	800208e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <HAL_RCC_ClockConfig+0x184>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2201      	movs	r2, #1
 8002070:	4393      	bics	r3, r2
 8002072:	0019      	movs	r1, r3
 8002074:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <HAL_RCC_ClockConfig+0x184>)
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207c:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <HAL_RCC_ClockConfig+0x184>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2201      	movs	r2, #1
 8002082:	4013      	ands	r3, r2
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d001      	beq.n	800208e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e020      	b.n	80020d0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2204      	movs	r2, #4
 8002094:	4013      	ands	r3, r2
 8002096:	d009      	beq.n	80020ac <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <HAL_RCC_ClockConfig+0x188>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a11      	ldr	r2, [pc, #68]	@ (80020e4 <HAL_RCC_ClockConfig+0x190>)
 800209e:	4013      	ands	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <HAL_RCC_ClockConfig+0x188>)
 80020a8:	430a      	orrs	r2, r1
 80020aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020ac:	f000 f820 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80020b0:	0001      	movs	r1, r0
 80020b2:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <HAL_RCC_ClockConfig+0x188>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	220f      	movs	r2, #15
 80020ba:	4013      	ands	r3, r2
 80020bc:	4a0a      	ldr	r2, [pc, #40]	@ (80020e8 <HAL_RCC_ClockConfig+0x194>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	000a      	movs	r2, r1
 80020c2:	40da      	lsrs	r2, r3
 80020c4:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <HAL_RCC_ClockConfig+0x198>)
 80020c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020c8:	2003      	movs	r0, #3
 80020ca:	f7fe ff4d 	bl	8000f68 <HAL_InitTick>
  
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	0018      	movs	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b004      	add	sp, #16
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40022000 	.word	0x40022000
 80020dc:	40021000 	.word	0x40021000
 80020e0:	00001388 	.word	0x00001388
 80020e4:	fffff8ff 	.word	0xfffff8ff
 80020e8:	080037ec 	.word	0x080037ec
 80020ec:	20000000 	.word	0x20000000

080020f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800210a:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xa0>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	220c      	movs	r2, #12
 8002114:	4013      	ands	r3, r2
 8002116:	2b04      	cmp	r3, #4
 8002118:	d002      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x30>
 800211a:	2b08      	cmp	r3, #8
 800211c:	d003      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x36>
 800211e:	e02e      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002120:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002122:	613b      	str	r3, [r7, #16]
      break;
 8002124:	e02e      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	0c9b      	lsrs	r3, r3, #18
 800212a:	220f      	movs	r2, #15
 800212c:	4013      	ands	r3, r2
 800212e:	4a1a      	ldr	r2, [pc, #104]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002130:	5cd3      	ldrb	r3, [r2, r3]
 8002132:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002134:	4b16      	ldr	r3, [pc, #88]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	220f      	movs	r2, #15
 800213a:	4013      	ands	r3, r2
 800213c:	4a17      	ldr	r2, [pc, #92]	@ (800219c <HAL_RCC_GetSysClockFreq+0xac>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	23c0      	movs	r3, #192	@ 0xc0
 8002146:	025b      	lsls	r3, r3, #9
 8002148:	401a      	ands	r2, r3
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	025b      	lsls	r3, r3, #9
 800214e:	429a      	cmp	r2, r3
 8002150:	d109      	bne.n	8002166 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002152:	68b9      	ldr	r1, [r7, #8]
 8002154:	480f      	ldr	r0, [pc, #60]	@ (8002194 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002156:	f7fd ffd5 	bl	8000104 <__udivsi3>
 800215a:	0003      	movs	r3, r0
 800215c:	001a      	movs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4353      	muls	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e008      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	480a      	ldr	r0, [pc, #40]	@ (8002194 <HAL_RCC_GetSysClockFreq+0xa4>)
 800216a:	f7fd ffcb 	bl	8000104 <__udivsi3>
 800216e:	0003      	movs	r3, r0
 8002170:	001a      	movs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4353      	muls	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	613b      	str	r3, [r7, #16]
      break;
 800217c:	e002      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217e:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002180:	613b      	str	r3, [r7, #16]
      break;
 8002182:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002184:	693b      	ldr	r3, [r7, #16]
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b006      	add	sp, #24
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	40021000 	.word	0x40021000
 8002194:	007a1200 	.word	0x007a1200
 8002198:	08003804 	.word	0x08003804
 800219c:	08003814 	.word	0x08003814

080021a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a4:	4b02      	ldr	r3, [pc, #8]	@ (80021b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			@ (mov r8, r8)
 80021b0:	20000000 	.word	0x20000000

080021b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80021b8:	f7ff fff2 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021bc:	0001      	movs	r1, r0
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	2207      	movs	r2, #7
 80021c6:	4013      	ands	r3, r2
 80021c8:	4a04      	ldr	r2, [pc, #16]	@ (80021dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ca:	5cd3      	ldrb	r3, [r2, r3]
 80021cc:	40d9      	lsrs	r1, r3
 80021ce:	000b      	movs	r3, r1
}    
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	40021000 	.word	0x40021000
 80021dc:	080037fc 	.word	0x080037fc

080021e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2380      	movs	r3, #128	@ 0x80
 80021f6:	025b      	lsls	r3, r3, #9
 80021f8:	4013      	ands	r3, r2
 80021fa:	d100      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80021fc:	e08e      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2017      	movs	r0, #23
 8002200:	183b      	adds	r3, r7, r0
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002206:	4b57      	ldr	r3, [pc, #348]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002208:	69da      	ldr	r2, [r3, #28]
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	055b      	lsls	r3, r3, #21
 800220e:	4013      	ands	r3, r2
 8002210:	d110      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	4b54      	ldr	r3, [pc, #336]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002214:	69da      	ldr	r2, [r3, #28]
 8002216:	4b53      	ldr	r3, [pc, #332]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002218:	2180      	movs	r1, #128	@ 0x80
 800221a:	0549      	lsls	r1, r1, #21
 800221c:	430a      	orrs	r2, r1
 800221e:	61da      	str	r2, [r3, #28]
 8002220:	4b50      	ldr	r3, [pc, #320]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	2380      	movs	r3, #128	@ 0x80
 8002226:	055b      	lsls	r3, r3, #21
 8002228:	4013      	ands	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222e:	183b      	adds	r3, r7, r0
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	4b4c      	ldr	r3, [pc, #304]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4013      	ands	r3, r2
 800223e:	d11a      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002240:	4b49      	ldr	r3, [pc, #292]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b48      	ldr	r3, [pc, #288]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002246:	2180      	movs	r1, #128	@ 0x80
 8002248:	0049      	lsls	r1, r1, #1
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224e:	f7fe fed1 	bl	8000ff4 <HAL_GetTick>
 8002252:	0003      	movs	r3, r0
 8002254:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002256:	e008      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002258:	f7fe fecc 	bl	8000ff4 <HAL_GetTick>
 800225c:	0002      	movs	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	@ 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e077      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226a:	4b3f      	ldr	r3, [pc, #252]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	2380      	movs	r3, #128	@ 0x80
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4013      	ands	r3, r2
 8002274:	d0f0      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002276:	4b3b      	ldr	r3, [pc, #236]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002278:	6a1a      	ldr	r2, [r3, #32]
 800227a:	23c0      	movs	r3, #192	@ 0xc0
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4013      	ands	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d034      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	23c0      	movs	r3, #192	@ 0xc0
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4013      	ands	r3, r2
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	429a      	cmp	r2, r3
 8002296:	d02c      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002298:	4b32      	ldr	r3, [pc, #200]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a33      	ldr	r2, [pc, #204]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800229e:	4013      	ands	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022a2:	4b30      	ldr	r3, [pc, #192]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022a4:	6a1a      	ldr	r2, [r3, #32]
 80022a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022a8:	2180      	movs	r1, #128	@ 0x80
 80022aa:	0249      	lsls	r1, r1, #9
 80022ac:	430a      	orrs	r2, r1
 80022ae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022b2:	6a1a      	ldr	r2, [r3, #32]
 80022b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022b6:	492e      	ldr	r1, [pc, #184]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80022b8:	400a      	ands	r2, r1
 80022ba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022bc:	4b29      	ldr	r3, [pc, #164]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	4013      	ands	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe fe93 	bl	8000ff4 <HAL_GetTick>
 80022ce:	0003      	movs	r3, r0
 80022d0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d2:	e009      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d4:	f7fe fe8e 	bl	8000ff4 <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	4a25      	ldr	r2, [pc, #148]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e038      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	2202      	movs	r2, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a1d      	ldr	r2, [pc, #116]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	0019      	movs	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	4b18      	ldr	r3, [pc, #96]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002302:	430a      	orrs	r2, r1
 8002304:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002306:	2317      	movs	r3, #23
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002310:	4b14      	ldr	r3, [pc, #80]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002312:	69da      	ldr	r2, [r3, #28]
 8002314:	4b13      	ldr	r3, [pc, #76]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002316:	4918      	ldr	r1, [pc, #96]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002318:	400a      	ands	r2, r1
 800231a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2201      	movs	r2, #1
 8002322:	4013      	ands	r3, r2
 8002324:	d009      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002326:	4b0f      	ldr	r3, [pc, #60]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	2203      	movs	r2, #3
 800232c:	4393      	bics	r3, r2
 800232e:	0019      	movs	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002336:	430a      	orrs	r2, r1
 8002338:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2220      	movs	r2, #32
 8002340:	4013      	ands	r3, r2
 8002342:	d009      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002344:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002348:	2210      	movs	r2, #16
 800234a:	4393      	bics	r3, r2
 800234c:	0019      	movs	r1, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002354:	430a      	orrs	r2, r1
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	0018      	movs	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	b006      	add	sp, #24
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			@ (mov r8, r8)
 8002364:	40021000 	.word	0x40021000
 8002368:	40007000 	.word	0x40007000
 800236c:	fffffcff 	.word	0xfffffcff
 8002370:	fffeffff 	.word	0xfffeffff
 8002374:	00001388 	.word	0x00001388
 8002378:	efffffff 	.word	0xefffffff

0800237c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e044      	b.n	8002418 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002392:	2b00      	cmp	r3, #0
 8002394:	d107      	bne.n	80023a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2278      	movs	r2, #120	@ 0x78
 800239a:	2100      	movs	r1, #0
 800239c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f7fe fadf 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2224      	movs	r2, #36	@ 0x24
 80023aa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2101      	movs	r1, #1
 80023b8:	438a      	bics	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	0018      	movs	r0, r3
 80023c8:	f000 fd24 	bl	8002e14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 fbb0 	bl	8002b34 <UART_SetConfig>
 80023d4:	0003      	movs	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e01c      	b.n	8002418 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	490d      	ldr	r1, [pc, #52]	@ (8002420 <HAL_UART_Init+0xa4>)
 80023ea:	400a      	ands	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2108      	movs	r1, #8
 80023fa:	438a      	bics	r2, r1
 80023fc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2101      	movs	r1, #1
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	0018      	movs	r0, r3
 8002412:	f000 fdb3 	bl	8002f7c <UART_CheckIdleState>
 8002416:	0003      	movs	r3, r0
}
 8002418:	0018      	movs	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	b002      	add	sp, #8
 800241e:	bd80      	pop	{r7, pc}
 8002420:	fffff7ff 	.word	0xfffff7ff

08002424 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	@ 0x28
 8002428:	af02      	add	r7, sp, #8
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	1dbb      	adds	r3, r7, #6
 8002432:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002438:	2b20      	cmp	r3, #32
 800243a:	d000      	beq.n	800243e <HAL_UART_Transmit+0x1a>
 800243c:	e08c      	b.n	8002558 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_UART_Transmit+0x28>
 8002444:	1dbb      	adds	r3, r7, #6
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e084      	b.n	800255a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	015b      	lsls	r3, r3, #5
 8002458:	429a      	cmp	r2, r3
 800245a:	d109      	bne.n	8002470 <HAL_UART_Transmit+0x4c>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d105      	bne.n	8002470 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2201      	movs	r2, #1
 8002468:	4013      	ands	r3, r2
 800246a:	d001      	beq.n	8002470 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e074      	b.n	800255a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2284      	movs	r2, #132	@ 0x84
 8002474:	2100      	movs	r1, #0
 8002476:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2221      	movs	r2, #33	@ 0x21
 800247c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800247e:	f7fe fdb9 	bl	8000ff4 <HAL_GetTick>
 8002482:	0003      	movs	r3, r0
 8002484:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1dba      	adds	r2, r7, #6
 800248a:	2150      	movs	r1, #80	@ 0x50
 800248c:	8812      	ldrh	r2, [r2, #0]
 800248e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1dba      	adds	r2, r7, #6
 8002494:	2152      	movs	r1, #82	@ 0x52
 8002496:	8812      	ldrh	r2, [r2, #0]
 8002498:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	2380      	movs	r3, #128	@ 0x80
 80024a0:	015b      	lsls	r3, r3, #5
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d108      	bne.n	80024b8 <HAL_UART_Transmit+0x94>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d104      	bne.n	80024b8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	e003      	b.n	80024c0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024c0:	e02f      	b.n	8002522 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	0013      	movs	r3, r2
 80024cc:	2200      	movs	r2, #0
 80024ce:	2180      	movs	r1, #128	@ 0x80
 80024d0:	f000 fdfc 	bl	80030cc <UART_WaitOnFlagUntilTimeout>
 80024d4:	1e03      	subs	r3, r0, #0
 80024d6:	d004      	beq.n	80024e2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e03b      	b.n	800255a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	881a      	ldrh	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	05d2      	lsls	r2, r2, #23
 80024f2:	0dd2      	lsrs	r2, r2, #23
 80024f4:	b292      	uxth	r2, r2
 80024f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	3302      	adds	r3, #2
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	e007      	b.n	8002510 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3301      	adds	r3, #1
 800250e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2252      	movs	r2, #82	@ 0x52
 8002514:	5a9b      	ldrh	r3, [r3, r2]
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b299      	uxth	r1, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2252      	movs	r2, #82	@ 0x52
 8002520:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2252      	movs	r2, #82	@ 0x52
 8002526:	5a9b      	ldrh	r3, [r3, r2]
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1c9      	bne.n	80024c2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	0013      	movs	r3, r2
 8002538:	2200      	movs	r2, #0
 800253a:	2140      	movs	r1, #64	@ 0x40
 800253c:	f000 fdc6 	bl	80030cc <UART_WaitOnFlagUntilTimeout>
 8002540:	1e03      	subs	r3, r0, #0
 8002542:	d004      	beq.n	800254e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e005      	b.n	800255a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	e000      	b.n	800255a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002558:	2302      	movs	r3, #2
  }
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b008      	add	sp, #32
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b0ab      	sub	sp, #172	@ 0xac
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	22a4      	movs	r2, #164	@ 0xa4
 8002574:	18b9      	adds	r1, r7, r2
 8002576:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	20a0      	movs	r0, #160	@ 0xa0
 8002580:	1839      	adds	r1, r7, r0
 8002582:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	219c      	movs	r1, #156	@ 0x9c
 800258c:	1879      	adds	r1, r7, r1
 800258e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002590:	0011      	movs	r1, r2
 8002592:	18bb      	adds	r3, r7, r2
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a99      	ldr	r2, [pc, #612]	@ (80027fc <HAL_UART_IRQHandler+0x298>)
 8002598:	4013      	ands	r3, r2
 800259a:	2298      	movs	r2, #152	@ 0x98
 800259c:	18bc      	adds	r4, r7, r2
 800259e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80025a0:	18bb      	adds	r3, r7, r2
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d114      	bne.n	80025d2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2220      	movs	r2, #32
 80025ae:	4013      	ands	r3, r2
 80025b0:	d00f      	beq.n	80025d2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80025b2:	183b      	adds	r3, r7, r0
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2220      	movs	r2, #32
 80025b8:	4013      	ands	r3, r2
 80025ba:	d00a      	beq.n	80025d2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d100      	bne.n	80025c6 <HAL_UART_IRQHandler+0x62>
 80025c4:	e286      	b.n	8002ad4 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	0010      	movs	r0, r2
 80025ce:	4798      	blx	r3
      }
      return;
 80025d0:	e280      	b.n	8002ad4 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80025d2:	2398      	movs	r3, #152	@ 0x98
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d100      	bne.n	80025de <HAL_UART_IRQHandler+0x7a>
 80025dc:	e114      	b.n	8002808 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80025de:	239c      	movs	r3, #156	@ 0x9c
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2201      	movs	r2, #1
 80025e6:	4013      	ands	r3, r2
 80025e8:	d106      	bne.n	80025f8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80025ea:	23a0      	movs	r3, #160	@ 0xa0
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a83      	ldr	r2, [pc, #524]	@ (8002800 <HAL_UART_IRQHandler+0x29c>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	d100      	bne.n	80025f8 <HAL_UART_IRQHandler+0x94>
 80025f6:	e107      	b.n	8002808 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80025f8:	23a4      	movs	r3, #164	@ 0xa4
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2201      	movs	r2, #1
 8002600:	4013      	ands	r3, r2
 8002602:	d012      	beq.n	800262a <HAL_UART_IRQHandler+0xc6>
 8002604:	23a0      	movs	r3, #160	@ 0xa0
 8002606:	18fb      	adds	r3, r7, r3
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	@ 0x80
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4013      	ands	r3, r2
 8002610:	d00b      	beq.n	800262a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2201      	movs	r2, #1
 8002618:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2284      	movs	r2, #132	@ 0x84
 800261e:	589b      	ldr	r3, [r3, r2]
 8002620:	2201      	movs	r2, #1
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2184      	movs	r1, #132	@ 0x84
 8002628:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800262a:	23a4      	movs	r3, #164	@ 0xa4
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2202      	movs	r2, #2
 8002632:	4013      	ands	r3, r2
 8002634:	d011      	beq.n	800265a <HAL_UART_IRQHandler+0xf6>
 8002636:	239c      	movs	r3, #156	@ 0x9c
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2201      	movs	r2, #1
 800263e:	4013      	ands	r3, r2
 8002640:	d00b      	beq.n	800265a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2202      	movs	r2, #2
 8002648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2284      	movs	r2, #132	@ 0x84
 800264e:	589b      	ldr	r3, [r3, r2]
 8002650:	2204      	movs	r2, #4
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2184      	movs	r1, #132	@ 0x84
 8002658:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800265a:	23a4      	movs	r3, #164	@ 0xa4
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2204      	movs	r2, #4
 8002662:	4013      	ands	r3, r2
 8002664:	d011      	beq.n	800268a <HAL_UART_IRQHandler+0x126>
 8002666:	239c      	movs	r3, #156	@ 0x9c
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2201      	movs	r2, #1
 800266e:	4013      	ands	r3, r2
 8002670:	d00b      	beq.n	800268a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2204      	movs	r2, #4
 8002678:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2284      	movs	r2, #132	@ 0x84
 800267e:	589b      	ldr	r3, [r3, r2]
 8002680:	2202      	movs	r2, #2
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2184      	movs	r1, #132	@ 0x84
 8002688:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800268a:	23a4      	movs	r3, #164	@ 0xa4
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2208      	movs	r2, #8
 8002692:	4013      	ands	r3, r2
 8002694:	d017      	beq.n	80026c6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002696:	23a0      	movs	r3, #160	@ 0xa0
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2220      	movs	r2, #32
 800269e:	4013      	ands	r3, r2
 80026a0:	d105      	bne.n	80026ae <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80026a2:	239c      	movs	r3, #156	@ 0x9c
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2201      	movs	r2, #1
 80026aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80026ac:	d00b      	beq.n	80026c6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2208      	movs	r2, #8
 80026b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2284      	movs	r2, #132	@ 0x84
 80026ba:	589b      	ldr	r3, [r3, r2]
 80026bc:	2208      	movs	r2, #8
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2184      	movs	r1, #132	@ 0x84
 80026c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80026c6:	23a4      	movs	r3, #164	@ 0xa4
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	4013      	ands	r3, r2
 80026d2:	d013      	beq.n	80026fc <HAL_UART_IRQHandler+0x198>
 80026d4:	23a0      	movs	r3, #160	@ 0xa0
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	2380      	movs	r3, #128	@ 0x80
 80026dc:	04db      	lsls	r3, r3, #19
 80026de:	4013      	ands	r3, r2
 80026e0:	d00c      	beq.n	80026fc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2280      	movs	r2, #128	@ 0x80
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2284      	movs	r2, #132	@ 0x84
 80026f0:	589b      	ldr	r3, [r3, r2]
 80026f2:	2220      	movs	r2, #32
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2184      	movs	r1, #132	@ 0x84
 80026fa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2284      	movs	r2, #132	@ 0x84
 8002700:	589b      	ldr	r3, [r3, r2]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d100      	bne.n	8002708 <HAL_UART_IRQHandler+0x1a4>
 8002706:	e1e7      	b.n	8002ad8 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002708:	23a4      	movs	r3, #164	@ 0xa4
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2220      	movs	r2, #32
 8002710:	4013      	ands	r3, r2
 8002712:	d00e      	beq.n	8002732 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002714:	23a0      	movs	r3, #160	@ 0xa0
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2220      	movs	r2, #32
 800271c:	4013      	ands	r3, r2
 800271e:	d008      	beq.n	8002732 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002724:	2b00      	cmp	r3, #0
 8002726:	d004      	beq.n	8002732 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	0010      	movs	r0, r2
 8002730:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2284      	movs	r2, #132	@ 0x84
 8002736:	589b      	ldr	r3, [r3, r2]
 8002738:	2194      	movs	r1, #148	@ 0x94
 800273a:	187a      	adds	r2, r7, r1
 800273c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2240      	movs	r2, #64	@ 0x40
 8002746:	4013      	ands	r3, r2
 8002748:	2b40      	cmp	r3, #64	@ 0x40
 800274a:	d004      	beq.n	8002756 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800274c:	187b      	adds	r3, r7, r1
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2228      	movs	r2, #40	@ 0x28
 8002752:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002754:	d047      	beq.n	80027e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	0018      	movs	r0, r3
 800275a:	f000 fdeb 	bl	8003334 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2240      	movs	r2, #64	@ 0x40
 8002766:	4013      	ands	r3, r2
 8002768:	2b40      	cmp	r3, #64	@ 0x40
 800276a:	d137      	bne.n	80027dc <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800276c:	f3ef 8310 	mrs	r3, PRIMASK
 8002770:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002774:	2090      	movs	r0, #144	@ 0x90
 8002776:	183a      	adds	r2, r7, r0
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	2301      	movs	r3, #1
 800277c:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002780:	f383 8810 	msr	PRIMASK, r3
}
 8002784:	46c0      	nop			@ (mov r8, r8)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2140      	movs	r1, #64	@ 0x40
 8002792:	438a      	bics	r2, r1
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	183b      	adds	r3, r7, r0
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800279e:	f383 8810 	msr	PRIMASK, r3
}
 80027a2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d012      	beq.n	80027d2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b0:	4a14      	ldr	r2, [pc, #80]	@ (8002804 <HAL_UART_IRQHandler+0x2a0>)
 80027b2:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7fe fe0d 	bl	80013d8 <HAL_DMA_Abort_IT>
 80027be:	1e03      	subs	r3, r0, #0
 80027c0:	d01a      	beq.n	80027f8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027cc:	0018      	movs	r0, r3
 80027ce:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d0:	e012      	b.n	80027f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f000 f9a5 	bl	8002b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027da:	e00d      	b.n	80027f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 f9a0 	bl	8002b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e4:	e008      	b.n	80027f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f000 f99b 	bl	8002b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2284      	movs	r2, #132	@ 0x84
 80027f2:	2100      	movs	r1, #0
 80027f4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80027f6:	e16f      	b.n	8002ad8 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f8:	46c0      	nop			@ (mov r8, r8)
    return;
 80027fa:	e16d      	b.n	8002ad8 <HAL_UART_IRQHandler+0x574>
 80027fc:	0000080f 	.word	0x0000080f
 8002800:	04000120 	.word	0x04000120
 8002804:	080035ef 	.word	0x080035ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800280c:	2b01      	cmp	r3, #1
 800280e:	d000      	beq.n	8002812 <HAL_UART_IRQHandler+0x2ae>
 8002810:	e139      	b.n	8002a86 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002812:	23a4      	movs	r3, #164	@ 0xa4
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2210      	movs	r2, #16
 800281a:	4013      	ands	r3, r2
 800281c:	d100      	bne.n	8002820 <HAL_UART_IRQHandler+0x2bc>
 800281e:	e132      	b.n	8002a86 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002820:	23a0      	movs	r3, #160	@ 0xa0
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2210      	movs	r2, #16
 8002828:	4013      	ands	r3, r2
 800282a:	d100      	bne.n	800282e <HAL_UART_IRQHandler+0x2ca>
 800282c:	e12b      	b.n	8002a86 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2210      	movs	r2, #16
 8002834:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2240      	movs	r2, #64	@ 0x40
 800283e:	4013      	ands	r3, r2
 8002840:	2b40      	cmp	r3, #64	@ 0x40
 8002842:	d000      	beq.n	8002846 <HAL_UART_IRQHandler+0x2e2>
 8002844:	e09f      	b.n	8002986 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	217e      	movs	r1, #126	@ 0x7e
 8002850:	187b      	adds	r3, r7, r1
 8002852:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002854:	187b      	adds	r3, r7, r1
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d100      	bne.n	800285e <HAL_UART_IRQHandler+0x2fa>
 800285c:	e13e      	b.n	8002adc <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2258      	movs	r2, #88	@ 0x58
 8002862:	5a9b      	ldrh	r3, [r3, r2]
 8002864:	187a      	adds	r2, r7, r1
 8002866:	8812      	ldrh	r2, [r2, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d300      	bcc.n	800286e <HAL_UART_IRQHandler+0x30a>
 800286c:	e136      	b.n	8002adc <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	187a      	adds	r2, r7, r1
 8002872:	215a      	movs	r1, #90	@ 0x5a
 8002874:	8812      	ldrh	r2, [r2, #0]
 8002876:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b20      	cmp	r3, #32
 8002880:	d06f      	beq.n	8002962 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002882:	f3ef 8310 	mrs	r3, PRIMASK
 8002886:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800288a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800288c:	2301      	movs	r3, #1
 800288e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002892:	f383 8810 	msr	PRIMASK, r3
}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4992      	ldr	r1, [pc, #584]	@ (8002aec <HAL_UART_IRQHandler+0x588>)
 80028a4:	400a      	ands	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ae:	f383 8810 	msr	PRIMASK, r3
}
 80028b2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b4:	f3ef 8310 	mrs	r3, PRIMASK
 80028b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80028ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80028be:	2301      	movs	r3, #1
 80028c0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028c4:	f383 8810 	msr	PRIMASK, r3
}
 80028c8:	46c0      	nop			@ (mov r8, r8)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	438a      	bics	r2, r1
 80028d8:	609a      	str	r2, [r3, #8]
 80028da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028dc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028e0:	f383 8810 	msr	PRIMASK, r3
}
 80028e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e6:	f3ef 8310 	mrs	r3, PRIMASK
 80028ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80028ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80028f0:	2301      	movs	r3, #1
 80028f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028f6:	f383 8810 	msr	PRIMASK, r3
}
 80028fa:	46c0      	nop			@ (mov r8, r8)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2140      	movs	r1, #64	@ 0x40
 8002908:	438a      	bics	r2, r1
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800290e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002910:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002912:	f383 8810 	msr	PRIMASK, r3
}
 8002916:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2280      	movs	r2, #128	@ 0x80
 800291c:	2120      	movs	r1, #32
 800291e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002926:	f3ef 8310 	mrs	r3, PRIMASK
 800292a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800292c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800292e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002930:	2301      	movs	r3, #1
 8002932:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002934:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002936:	f383 8810 	msr	PRIMASK, r3
}
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2110      	movs	r1, #16
 8002948:	438a      	bics	r2, r1
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800294e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002952:	f383 8810 	msr	PRIMASK, r3
}
 8002956:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800295c:	0018      	movs	r0, r3
 800295e:	f7fe fd03 	bl	8001368 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2258      	movs	r2, #88	@ 0x58
 800296c:	5a9a      	ldrh	r2, [r3, r2]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	215a      	movs	r1, #90	@ 0x5a
 8002972:	5a5b      	ldrh	r3, [r3, r1]
 8002974:	b29b      	uxth	r3, r3
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	b29a      	uxth	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0011      	movs	r1, r2
 800297e:	0018      	movs	r0, r3
 8002980:	f7fd fcdc 	bl	800033c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002984:	e0aa      	b.n	8002adc <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2258      	movs	r2, #88	@ 0x58
 800298a:	5a99      	ldrh	r1, [r3, r2]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	225a      	movs	r2, #90	@ 0x5a
 8002990:	5a9b      	ldrh	r3, [r3, r2]
 8002992:	b29a      	uxth	r2, r3
 8002994:	208e      	movs	r0, #142	@ 0x8e
 8002996:	183b      	adds	r3, r7, r0
 8002998:	1a8a      	subs	r2, r1, r2
 800299a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	225a      	movs	r2, #90	@ 0x5a
 80029a0:	5a9b      	ldrh	r3, [r3, r2]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d100      	bne.n	80029aa <HAL_UART_IRQHandler+0x446>
 80029a8:	e09a      	b.n	8002ae0 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80029aa:	183b      	adds	r3, r7, r0
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d100      	bne.n	80029b4 <HAL_UART_IRQHandler+0x450>
 80029b2:	e095      	b.n	8002ae0 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b4:	f3ef 8310 	mrs	r3, PRIMASK
 80029b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80029ba:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029bc:	2488      	movs	r4, #136	@ 0x88
 80029be:	193a      	adds	r2, r7, r4
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	2301      	movs	r3, #1
 80029c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f383 8810 	msr	PRIMASK, r3
}
 80029cc:	46c0      	nop			@ (mov r8, r8)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4945      	ldr	r1, [pc, #276]	@ (8002af0 <HAL_UART_IRQHandler+0x58c>)
 80029da:	400a      	ands	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	193b      	adds	r3, r7, r4
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f383 8810 	msr	PRIMASK, r3
}
 80029ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ec:	f3ef 8310 	mrs	r3, PRIMASK
 80029f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80029f2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f4:	2484      	movs	r4, #132	@ 0x84
 80029f6:	193a      	adds	r2, r7, r4
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	2301      	movs	r3, #1
 80029fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f383 8810 	msr	PRIMASK, r3
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2101      	movs	r1, #1
 8002a12:	438a      	bics	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	193b      	adds	r3, r7, r4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	f383 8810 	msr	PRIMASK, r3
}
 8002a22:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2280      	movs	r2, #128	@ 0x80
 8002a28:	2120      	movs	r1, #32
 8002a2a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a38:	f3ef 8310 	mrs	r3, PRIMASK
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a40:	2480      	movs	r4, #128	@ 0x80
 8002a42:	193a      	adds	r2, r7, r4
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	2301      	movs	r3, #1
 8002a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4c:	f383 8810 	msr	PRIMASK, r3
}
 8002a50:	46c0      	nop			@ (mov r8, r8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2110      	movs	r1, #16
 8002a5e:	438a      	bics	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	193b      	adds	r3, r7, r4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6a:	f383 8810 	msr	PRIMASK, r3
}
 8002a6e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a76:	183b      	adds	r3, r7, r0
 8002a78:	881a      	ldrh	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0011      	movs	r1, r2
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f7fd fc5c 	bl	800033c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a84:	e02c      	b.n	8002ae0 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002a86:	23a4      	movs	r3, #164	@ 0xa4
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2280      	movs	r2, #128	@ 0x80
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d00f      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002a92:	23a0      	movs	r3, #160	@ 0xa0
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2280      	movs	r2, #128	@ 0x80
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d009      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01e      	beq.n	8002ae4 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	0010      	movs	r0, r2
 8002aae:	4798      	blx	r3
    }
    return;
 8002ab0:	e018      	b.n	8002ae4 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ab2:	23a4      	movs	r3, #164	@ 0xa4
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2240      	movs	r2, #64	@ 0x40
 8002aba:	4013      	ands	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x582>
 8002abe:	23a0      	movs	r3, #160	@ 0xa0
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2240      	movs	r2, #64	@ 0x40
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d00d      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f000 fda5 	bl	800361c <UART_EndTransmit_IT>
    return;
 8002ad2:	e008      	b.n	8002ae6 <HAL_UART_IRQHandler+0x582>
      return;
 8002ad4:	46c0      	nop			@ (mov r8, r8)
 8002ad6:	e006      	b.n	8002ae6 <HAL_UART_IRQHandler+0x582>
    return;
 8002ad8:	46c0      	nop			@ (mov r8, r8)
 8002ada:	e004      	b.n	8002ae6 <HAL_UART_IRQHandler+0x582>
      return;
 8002adc:	46c0      	nop			@ (mov r8, r8)
 8002ade:	e002      	b.n	8002ae6 <HAL_UART_IRQHandler+0x582>
      return;
 8002ae0:	46c0      	nop			@ (mov r8, r8)
 8002ae2:	e000      	b.n	8002ae6 <HAL_UART_IRQHandler+0x582>
    return;
 8002ae4:	46c0      	nop			@ (mov r8, r8)
  }

}
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b02b      	add	sp, #172	@ 0xac
 8002aea:	bd90      	pop	{r4, r7, pc}
 8002aec:	fffffeff 	.word	0xfffffeff
 8002af0:	fffffedf 	.word	0xfffffedf

08002af4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002afc:	46c0      	nop			@ (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002b0c:	46c0      	nop			@ (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002b1c:	46c0      	nop			@ (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b002      	add	sp, #8
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b2c:	46c0      	nop			@ (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b002      	add	sp, #8
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b3c:	231e      	movs	r3, #30
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4aa1      	ldr	r2, [pc, #644]	@ (8002de8 <UART_SetConfig+0x2b4>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4a9c      	ldr	r2, [pc, #624]	@ (8002dec <UART_SetConfig+0x2b8>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a93      	ldr	r2, [pc, #588]	@ (8002df0 <UART_SetConfig+0x2bc>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a8f      	ldr	r2, [pc, #572]	@ (8002df4 <UART_SetConfig+0x2c0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d127      	bne.n	8002c0a <UART_SetConfig+0xd6>
 8002bba:	4b8f      	ldr	r3, [pc, #572]	@ (8002df8 <UART_SetConfig+0x2c4>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d00d      	beq.n	8002be2 <UART_SetConfig+0xae>
 8002bc6:	d81b      	bhi.n	8002c00 <UART_SetConfig+0xcc>
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d014      	beq.n	8002bf6 <UART_SetConfig+0xc2>
 8002bcc:	d818      	bhi.n	8002c00 <UART_SetConfig+0xcc>
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <UART_SetConfig+0xa4>
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d00a      	beq.n	8002bec <UART_SetConfig+0xb8>
 8002bd6:	e013      	b.n	8002c00 <UART_SetConfig+0xcc>
 8002bd8:	231f      	movs	r3, #31
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	e049      	b.n	8002c76 <UART_SetConfig+0x142>
 8002be2:	231f      	movs	r3, #31
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	2202      	movs	r2, #2
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e044      	b.n	8002c76 <UART_SetConfig+0x142>
 8002bec:	231f      	movs	r3, #31
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	e03f      	b.n	8002c76 <UART_SetConfig+0x142>
 8002bf6:	231f      	movs	r3, #31
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	e03a      	b.n	8002c76 <UART_SetConfig+0x142>
 8002c00:	231f      	movs	r3, #31
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	2210      	movs	r2, #16
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e035      	b.n	8002c76 <UART_SetConfig+0x142>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7b      	ldr	r2, [pc, #492]	@ (8002dfc <UART_SetConfig+0x2c8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d104      	bne.n	8002c1e <UART_SetConfig+0xea>
 8002c14:	231f      	movs	r3, #31
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	e02b      	b.n	8002c76 <UART_SetConfig+0x142>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a77      	ldr	r2, [pc, #476]	@ (8002e00 <UART_SetConfig+0x2cc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d104      	bne.n	8002c32 <UART_SetConfig+0xfe>
 8002c28:	231f      	movs	r3, #31
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e021      	b.n	8002c76 <UART_SetConfig+0x142>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a73      	ldr	r2, [pc, #460]	@ (8002e04 <UART_SetConfig+0x2d0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d104      	bne.n	8002c46 <UART_SetConfig+0x112>
 8002c3c:	231f      	movs	r3, #31
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
 8002c44:	e017      	b.n	8002c76 <UART_SetConfig+0x142>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6f      	ldr	r2, [pc, #444]	@ (8002e08 <UART_SetConfig+0x2d4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d104      	bne.n	8002c5a <UART_SetConfig+0x126>
 8002c50:	231f      	movs	r3, #31
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
 8002c58:	e00d      	b.n	8002c76 <UART_SetConfig+0x142>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6b      	ldr	r2, [pc, #428]	@ (8002e0c <UART_SetConfig+0x2d8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d104      	bne.n	8002c6e <UART_SetConfig+0x13a>
 8002c64:	231f      	movs	r3, #31
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	e003      	b.n	8002c76 <UART_SetConfig+0x142>
 8002c6e:	231f      	movs	r3, #31
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	2210      	movs	r2, #16
 8002c74:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	2380      	movs	r3, #128	@ 0x80
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d15c      	bne.n	8002d3c <UART_SetConfig+0x208>
  {
    switch (clocksource)
 8002c82:	231f      	movs	r3, #31
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d015      	beq.n	8002cb8 <UART_SetConfig+0x184>
 8002c8c:	dc18      	bgt.n	8002cc0 <UART_SetConfig+0x18c>
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d00d      	beq.n	8002cae <UART_SetConfig+0x17a>
 8002c92:	dc15      	bgt.n	8002cc0 <UART_SetConfig+0x18c>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <UART_SetConfig+0x16a>
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d005      	beq.n	8002ca8 <UART_SetConfig+0x174>
 8002c9c:	e010      	b.n	8002cc0 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c9e:	f7ff fa89 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	61bb      	str	r3, [r7, #24]
        break;
 8002ca6:	e012      	b.n	8002cce <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ca8:	4b59      	ldr	r3, [pc, #356]	@ (8002e10 <UART_SetConfig+0x2dc>)
 8002caa:	61bb      	str	r3, [r7, #24]
        break;
 8002cac:	e00f      	b.n	8002cce <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cae:	f7ff fa1f 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	61bb      	str	r3, [r7, #24]
        break;
 8002cb6:	e00a      	b.n	8002cce <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cb8:	2380      	movs	r3, #128	@ 0x80
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	61bb      	str	r3, [r7, #24]
        break;
 8002cbe:	e006      	b.n	8002cce <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cc4:	231e      	movs	r3, #30
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
        break;
 8002ccc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d100      	bne.n	8002cd6 <UART_SetConfig+0x1a2>
 8002cd4:	e07a      	b.n	8002dcc <UART_SetConfig+0x298>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	005a      	lsls	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	085b      	lsrs	r3, r3, #1
 8002ce0:	18d2      	adds	r2, r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	0010      	movs	r0, r2
 8002cea:	f7fd fa0b 	bl	8000104 <__udivsi3>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b0f      	cmp	r3, #15
 8002cf6:	d91c      	bls.n	8002d32 <UART_SetConfig+0x1fe>
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	025b      	lsls	r3, r3, #9
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d217      	bcs.n	8002d32 <UART_SetConfig+0x1fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	200e      	movs	r0, #14
 8002d08:	183b      	adds	r3, r7, r0
 8002d0a:	210f      	movs	r1, #15
 8002d0c:	438a      	bics	r2, r1
 8002d0e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	085b      	lsrs	r3, r3, #1
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2207      	movs	r2, #7
 8002d18:	4013      	ands	r3, r2
 8002d1a:	b299      	uxth	r1, r3
 8002d1c:	183b      	adds	r3, r7, r0
 8002d1e:	183a      	adds	r2, r7, r0
 8002d20:	8812      	ldrh	r2, [r2, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	183a      	adds	r2, r7, r0
 8002d2c:	8812      	ldrh	r2, [r2, #0]
 8002d2e:	60da      	str	r2, [r3, #12]
 8002d30:	e04c      	b.n	8002dcc <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8002d32:	231e      	movs	r3, #30
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	2201      	movs	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	e047      	b.n	8002dcc <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d3c:	231f      	movs	r3, #31
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d015      	beq.n	8002d72 <UART_SetConfig+0x23e>
 8002d46:	dc18      	bgt.n	8002d7a <UART_SetConfig+0x246>
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d00d      	beq.n	8002d68 <UART_SetConfig+0x234>
 8002d4c:	dc15      	bgt.n	8002d7a <UART_SetConfig+0x246>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <UART_SetConfig+0x224>
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d005      	beq.n	8002d62 <UART_SetConfig+0x22e>
 8002d56:	e010      	b.n	8002d7a <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d58:	f7ff fa2c 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	61bb      	str	r3, [r7, #24]
        break;
 8002d60:	e012      	b.n	8002d88 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d62:	4b2b      	ldr	r3, [pc, #172]	@ (8002e10 <UART_SetConfig+0x2dc>)
 8002d64:	61bb      	str	r3, [r7, #24]
        break;
 8002d66:	e00f      	b.n	8002d88 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d68:	f7ff f9c2 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	61bb      	str	r3, [r7, #24]
        break;
 8002d70:	e00a      	b.n	8002d88 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d72:	2380      	movs	r3, #128	@ 0x80
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	61bb      	str	r3, [r7, #24]
        break;
 8002d78:	e006      	b.n	8002d88 <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d7e:	231e      	movs	r3, #30
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]
        break;
 8002d86:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01e      	beq.n	8002dcc <UART_SetConfig+0x298>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	085a      	lsrs	r2, r3, #1
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	18d2      	adds	r2, r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	0010      	movs	r0, r2
 8002da0:	f7fd f9b0 	bl	8000104 <__udivsi3>
 8002da4:	0003      	movs	r3, r0
 8002da6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	2b0f      	cmp	r3, #15
 8002dac:	d90a      	bls.n	8002dc4 <UART_SetConfig+0x290>
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	2380      	movs	r3, #128	@ 0x80
 8002db2:	025b      	lsls	r3, r3, #9
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d205      	bcs.n	8002dc4 <UART_SetConfig+0x290>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	e003      	b.n	8002dcc <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8002dc4:	231e      	movs	r3, #30
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002dd8:	231e      	movs	r3, #30
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	781b      	ldrb	r3, [r3, #0]
}
 8002dde:	0018      	movs	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b008      	add	sp, #32
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	efff69f3 	.word	0xefff69f3
 8002dec:	ffffcfff 	.word	0xffffcfff
 8002df0:	fffff4ff 	.word	0xfffff4ff
 8002df4:	40013800 	.word	0x40013800
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40004400 	.word	0x40004400
 8002e00:	40004800 	.word	0x40004800
 8002e04:	40004c00 	.word	0x40004c00
 8002e08:	40005000 	.word	0x40005000
 8002e0c:	40011400 	.word	0x40011400
 8002e10:	007a1200 	.word	0x007a1200

08002e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	2208      	movs	r2, #8
 8002e22:	4013      	ands	r3, r2
 8002e24:	d00b      	beq.n	8002e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f58 <UART_AdvFeatureConfig+0x144>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	0019      	movs	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	2201      	movs	r2, #1
 8002e44:	4013      	ands	r3, r2
 8002e46:	d00b      	beq.n	8002e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4a43      	ldr	r2, [pc, #268]	@ (8002f5c <UART_AdvFeatureConfig+0x148>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	2202      	movs	r2, #2
 8002e66:	4013      	ands	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a3b      	ldr	r2, [pc, #236]	@ (8002f60 <UART_AdvFeatureConfig+0x14c>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	0019      	movs	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	2204      	movs	r2, #4
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d00b      	beq.n	8002ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4a34      	ldr	r2, [pc, #208]	@ (8002f64 <UART_AdvFeatureConfig+0x150>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d00b      	beq.n	8002ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8002f68 <UART_AdvFeatureConfig+0x154>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	2220      	movs	r2, #32
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d00b      	beq.n	8002ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	4a25      	ldr	r2, [pc, #148]	@ (8002f6c <UART_AdvFeatureConfig+0x158>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eec:	2240      	movs	r2, #64	@ 0x40
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d01d      	beq.n	8002f2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f70 <UART_AdvFeatureConfig+0x15c>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f0e:	2380      	movs	r3, #128	@ 0x80
 8002f10:	035b      	lsls	r3, r3, #13
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d10b      	bne.n	8002f2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a15      	ldr	r2, [pc, #84]	@ (8002f74 <UART_AdvFeatureConfig+0x160>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	2280      	movs	r2, #128	@ 0x80
 8002f34:	4013      	ands	r3, r2
 8002f36:	d00b      	beq.n	8002f50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8002f78 <UART_AdvFeatureConfig+0x164>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	0019      	movs	r1, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
  }
}
 8002f50:	46c0      	nop			@ (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	ffff7fff 	.word	0xffff7fff
 8002f5c:	fffdffff 	.word	0xfffdffff
 8002f60:	fffeffff 	.word	0xfffeffff
 8002f64:	fffbffff 	.word	0xfffbffff
 8002f68:	ffffefff 	.word	0xffffefff
 8002f6c:	ffffdfff 	.word	0xffffdfff
 8002f70:	ffefffff 	.word	0xffefffff
 8002f74:	ff9fffff 	.word	0xff9fffff
 8002f78:	fff7ffff 	.word	0xfff7ffff

08002f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b092      	sub	sp, #72	@ 0x48
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2284      	movs	r2, #132	@ 0x84
 8002f88:	2100      	movs	r1, #0
 8002f8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f8c:	f7fe f832 	bl	8000ff4 <HAL_GetTick>
 8002f90:	0003      	movs	r3, r0
 8002f92:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d12c      	bne.n	8002ffc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa4:	2280      	movs	r2, #128	@ 0x80
 8002fa6:	0391      	lsls	r1, r2, #14
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4a46      	ldr	r2, [pc, #280]	@ (80030c4 <UART_CheckIdleState+0x148>)
 8002fac:	9200      	str	r2, [sp, #0]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f000 f88c 	bl	80030cc <UART_WaitOnFlagUntilTimeout>
 8002fb4:	1e03      	subs	r3, r0, #0
 8002fb6:	d021      	beq.n	8002ffc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc8:	f383 8810 	msr	PRIMASK, r3
}
 8002fcc:	46c0      	nop			@ (mov r8, r8)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2180      	movs	r1, #128	@ 0x80
 8002fda:	438a      	bics	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe4:	f383 8810 	msr	PRIMASK, r3
}
 8002fe8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2278      	movs	r2, #120	@ 0x78
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e05f      	b.n	80030bc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2204      	movs	r2, #4
 8003004:	4013      	ands	r3, r2
 8003006:	2b04      	cmp	r3, #4
 8003008:	d146      	bne.n	8003098 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800300a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800300c:	2280      	movs	r2, #128	@ 0x80
 800300e:	03d1      	lsls	r1, r2, #15
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	4a2c      	ldr	r2, [pc, #176]	@ (80030c4 <UART_CheckIdleState+0x148>)
 8003014:	9200      	str	r2, [sp, #0]
 8003016:	2200      	movs	r2, #0
 8003018:	f000 f858 	bl	80030cc <UART_WaitOnFlagUntilTimeout>
 800301c:	1e03      	subs	r3, r0, #0
 800301e:	d03b      	beq.n	8003098 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003020:	f3ef 8310 	mrs	r3, PRIMASK
 8003024:	60fb      	str	r3, [r7, #12]
  return(result);
 8003026:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003028:	637b      	str	r3, [r7, #52]	@ 0x34
 800302a:	2301      	movs	r3, #1
 800302c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f383 8810 	msr	PRIMASK, r3
}
 8003034:	46c0      	nop			@ (mov r8, r8)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4921      	ldr	r1, [pc, #132]	@ (80030c8 <UART_CheckIdleState+0x14c>)
 8003042:	400a      	ands	r2, r1
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003048:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f383 8810 	msr	PRIMASK, r3
}
 8003050:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003052:	f3ef 8310 	mrs	r3, PRIMASK
 8003056:	61bb      	str	r3, [r7, #24]
  return(result);
 8003058:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305a:	633b      	str	r3, [r7, #48]	@ 0x30
 800305c:	2301      	movs	r3, #1
 800305e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f383 8810 	msr	PRIMASK, r3
}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2101      	movs	r1, #1
 8003074:	438a      	bics	r2, r1
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	f383 8810 	msr	PRIMASK, r3
}
 8003082:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2280      	movs	r2, #128	@ 0x80
 8003088:	2120      	movs	r1, #32
 800308a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2278      	movs	r2, #120	@ 0x78
 8003090:	2100      	movs	r1, #0
 8003092:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e011      	b.n	80030bc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2280      	movs	r2, #128	@ 0x80
 80030a2:	2120      	movs	r1, #32
 80030a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2278      	movs	r2, #120	@ 0x78
 80030b6:	2100      	movs	r1, #0
 80030b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b010      	add	sp, #64	@ 0x40
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	01ffffff 	.word	0x01ffffff
 80030c8:	fffffedf 	.word	0xfffffedf

080030cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	1dfb      	adds	r3, r7, #7
 80030da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030dc:	e051      	b.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	3301      	adds	r3, #1
 80030e2:	d04e      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e4:	f7fd ff86 	bl	8000ff4 <HAL_GetTick>
 80030e8:	0002      	movs	r2, r0
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d302      	bcc.n	80030fa <UART_WaitOnFlagUntilTimeout+0x2e>
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e051      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2204      	movs	r2, #4
 8003106:	4013      	ands	r3, r2
 8003108:	d03b      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb6>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b80      	cmp	r3, #128	@ 0x80
 800310e:	d038      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b40      	cmp	r3, #64	@ 0x40
 8003114:	d035      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	2208      	movs	r2, #8
 800311e:	4013      	ands	r3, r2
 8003120:	2b08      	cmp	r3, #8
 8003122:	d111      	bne.n	8003148 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2208      	movs	r2, #8
 800312a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	0018      	movs	r0, r3
 8003130:	f000 f900 	bl	8003334 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2284      	movs	r2, #132	@ 0x84
 8003138:	2108      	movs	r1, #8
 800313a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2278      	movs	r2, #120	@ 0x78
 8003140:	2100      	movs	r1, #0
 8003142:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e02c      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69da      	ldr	r2, [r3, #28]
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	401a      	ands	r2, r3
 8003154:	2380      	movs	r3, #128	@ 0x80
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	429a      	cmp	r2, r3
 800315a:	d112      	bne.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2280      	movs	r2, #128	@ 0x80
 8003162:	0112      	lsls	r2, r2, #4
 8003164:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	0018      	movs	r0, r3
 800316a:	f000 f8e3 	bl	8003334 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2284      	movs	r2, #132	@ 0x84
 8003172:	2120      	movs	r1, #32
 8003174:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2278      	movs	r2, #120	@ 0x78
 800317a:	2100      	movs	r1, #0
 800317c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e00f      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	4013      	ands	r3, r2
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	425a      	negs	r2, r3
 8003192:	4153      	adcs	r3, r2
 8003194:	b2db      	uxtb	r3, r3
 8003196:	001a      	movs	r2, r3
 8003198:	1dfb      	adds	r3, r7, #7
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d09e      	beq.n	80030de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	0018      	movs	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b004      	add	sp, #16
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b090      	sub	sp, #64	@ 0x40
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	1dbb      	adds	r3, r7, #6
 80031b8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1dba      	adds	r2, r7, #6
 80031c4:	2158      	movs	r1, #88	@ 0x58
 80031c6:	8812      	ldrh	r2, [r2, #0]
 80031c8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2284      	movs	r2, #132	@ 0x84
 80031ce:	2100      	movs	r1, #0
 80031d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2280      	movs	r2, #128	@ 0x80
 80031d6:	2122      	movs	r1, #34	@ 0x22
 80031d8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d028      	beq.n	8003234 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031e6:	4a3e      	ldr	r2, [pc, #248]	@ (80032e0 <UART_Start_Receive_DMA+0x134>)
 80031e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ee:	4a3d      	ldr	r2, [pc, #244]	@ (80032e4 <UART_Start_Receive_DMA+0x138>)
 80031f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f6:	4a3c      	ldr	r2, [pc, #240]	@ (80032e8 <UART_Start_Receive_DMA+0x13c>)
 80031f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031fe:	2200      	movs	r2, #0
 8003200:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3324      	adds	r3, #36	@ 0x24
 800320c:	0019      	movs	r1, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003212:	001a      	movs	r2, r3
 8003214:	1dbb      	adds	r3, r7, #6
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	f7fe f840 	bl	800129c <HAL_DMA_Start_IT>
 800321c:	1e03      	subs	r3, r0, #0
 800321e:	d009      	beq.n	8003234 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2284      	movs	r2, #132	@ 0x84
 8003224:	2110      	movs	r1, #16
 8003226:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2280      	movs	r2, #128	@ 0x80
 800322c:	2120      	movs	r1, #32
 800322e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e050      	b.n	80032d6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d019      	beq.n	8003270 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800323c:	f3ef 8310 	mrs	r3, PRIMASK
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003244:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003246:	2301      	movs	r3, #1
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324c:	f383 8810 	msr	PRIMASK, r3
}
 8003250:	46c0      	nop			@ (mov r8, r8)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2180      	movs	r1, #128	@ 0x80
 800325e:	0049      	lsls	r1, r1, #1
 8003260:	430a      	orrs	r2, r1
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003266:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326a:	f383 8810 	msr	PRIMASK, r3
}
 800326e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003270:	f3ef 8310 	mrs	r3, PRIMASK
 8003274:	613b      	str	r3, [r7, #16]
  return(result);
 8003276:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003278:	63bb      	str	r3, [r7, #56]	@ 0x38
 800327a:	2301      	movs	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f383 8810 	msr	PRIMASK, r3
}
 8003284:	46c0      	nop			@ (mov r8, r8)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2101      	movs	r1, #1
 8003292:	430a      	orrs	r2, r1
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003298:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	f383 8810 	msr	PRIMASK, r3
}
 80032a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a2:	f3ef 8310 	mrs	r3, PRIMASK
 80032a6:	61fb      	str	r3, [r7, #28]
  return(result);
 80032a8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ac:	2301      	movs	r3, #1
 80032ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	f383 8810 	msr	PRIMASK, r3
}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2140      	movs	r1, #64	@ 0x40
 80032c4:	430a      	orrs	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	f383 8810 	msr	PRIMASK, r3
}
 80032d2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	0018      	movs	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	b010      	add	sp, #64	@ 0x40
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	080033fd 	.word	0x080033fd
 80032e4:	08003529 	.word	0x08003529
 80032e8:	0800356b 	.word	0x0800356b

080032ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f4:	f3ef 8310 	mrs	r3, PRIMASK
 80032f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80032fa:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	2301      	movs	r3, #1
 8003300:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f383 8810 	msr	PRIMASK, r3
}
 8003308:	46c0      	nop			@ (mov r8, r8)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	21c0      	movs	r1, #192	@ 0xc0
 8003316:	438a      	bics	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f383 8810 	msr	PRIMASK, r3
}
 8003324:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800332c:	46c0      	nop			@ (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b006      	add	sp, #24
 8003332:	bd80      	pop	{r7, pc}

08003334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08e      	sub	sp, #56	@ 0x38
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800333c:	f3ef 8310 	mrs	r3, PRIMASK
 8003340:	617b      	str	r3, [r7, #20]
  return(result);
 8003342:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003344:	637b      	str	r3, [r7, #52]	@ 0x34
 8003346:	2301      	movs	r3, #1
 8003348:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f383 8810 	msr	PRIMASK, r3
}
 8003350:	46c0      	nop			@ (mov r8, r8)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4926      	ldr	r1, [pc, #152]	@ (80033f8 <UART_EndRxTransfer+0xc4>)
 800335e:	400a      	ands	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003364:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f383 8810 	msr	PRIMASK, r3
}
 800336c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336e:	f3ef 8310 	mrs	r3, PRIMASK
 8003372:	623b      	str	r3, [r7, #32]
  return(result);
 8003374:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003376:	633b      	str	r3, [r7, #48]	@ 0x30
 8003378:	2301      	movs	r3, #1
 800337a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	f383 8810 	msr	PRIMASK, r3
}
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2101      	movs	r1, #1
 8003390:	438a      	bics	r2, r1
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003396:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339a:	f383 8810 	msr	PRIMASK, r3
}
 800339e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d118      	bne.n	80033da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a8:	f3ef 8310 	mrs	r3, PRIMASK
 80033ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80033ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033b2:	2301      	movs	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f383 8810 	msr	PRIMASK, r3
}
 80033bc:	46c0      	nop			@ (mov r8, r8)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2110      	movs	r1, #16
 80033ca:	438a      	bics	r2, r1
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f383 8810 	msr	PRIMASK, r3
}
 80033d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2280      	movs	r2, #128	@ 0x80
 80033de:	2120      	movs	r1, #32
 80033e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80033ee:	46c0      	nop			@ (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b00e      	add	sp, #56	@ 0x38
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	fffffedf 	.word	0xfffffedf

080033fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b094      	sub	sp, #80	@ 0x50
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b20      	cmp	r3, #32
 8003410:	d06f      	beq.n	80034f2 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003414:	225a      	movs	r2, #90	@ 0x5a
 8003416:	2100      	movs	r1, #0
 8003418:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341a:	f3ef 8310 	mrs	r3, PRIMASK
 800341e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003420:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003424:	2301      	movs	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f383 8810 	msr	PRIMASK, r3
}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	493a      	ldr	r1, [pc, #232]	@ (8003524 <UART_DMAReceiveCplt+0x128>)
 800343c:	400a      	ands	r2, r1
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003442:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	f383 8810 	msr	PRIMASK, r3
}
 800344a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344c:	f3ef 8310 	mrs	r3, PRIMASK
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003454:	647b      	str	r3, [r7, #68]	@ 0x44
 8003456:	2301      	movs	r3, #1
 8003458:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345c:	f383 8810 	msr	PRIMASK, r3
}
 8003460:	46c0      	nop			@ (mov r8, r8)
 8003462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2101      	movs	r1, #1
 800346e:	438a      	bics	r2, r1
 8003470:	609a      	str	r2, [r3, #8]
 8003472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003478:	f383 8810 	msr	PRIMASK, r3
}
 800347c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800347e:	f3ef 8310 	mrs	r3, PRIMASK
 8003482:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003486:	643b      	str	r3, [r7, #64]	@ 0x40
 8003488:	2301      	movs	r3, #1
 800348a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348e:	f383 8810 	msr	PRIMASK, r3
}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2140      	movs	r1, #64	@ 0x40
 80034a0:	438a      	bics	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034aa:	f383 8810 	msr	PRIMASK, r3
}
 80034ae:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034b2:	2280      	movs	r2, #128	@ 0x80
 80034b4:	2120      	movs	r1, #32
 80034b6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d118      	bne.n	80034f2 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c0:	f3ef 8310 	mrs	r3, PRIMASK
 80034c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80034c6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ca:	2301      	movs	r3, #1
 80034cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f383 8810 	msr	PRIMASK, r3
}
 80034d4:	46c0      	nop			@ (mov r8, r8)
 80034d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2110      	movs	r1, #16
 80034e2:	438a      	bics	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f383 8810 	msr	PRIMASK, r3
}
 80034f0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034f4:	2200      	movs	r2, #0
 80034f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d108      	bne.n	8003512 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003502:	2258      	movs	r2, #88	@ 0x58
 8003504:	5a9a      	ldrh	r2, [r3, r2]
 8003506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003508:	0011      	movs	r1, r2
 800350a:	0018      	movs	r0, r3
 800350c:	f7fc ff16 	bl	800033c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003510:	e003      	b.n	800351a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003514:	0018      	movs	r0, r3
 8003516:	f7ff faf5 	bl	8002b04 <HAL_UART_RxCpltCallback>
}
 800351a:	46c0      	nop			@ (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	b014      	add	sp, #80	@ 0x50
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	fffffeff 	.word	0xfffffeff

08003528 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003540:	2b01      	cmp	r3, #1
 8003542:	d10a      	bne.n	800355a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2258      	movs	r2, #88	@ 0x58
 8003548:	5a9b      	ldrh	r3, [r3, r2]
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	0011      	movs	r1, r2
 8003552:	0018      	movs	r0, r3
 8003554:	f7fc fef2 	bl	800033c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003558:	e003      	b.n	8003562 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff fad9 	bl	8002b14 <HAL_UART_RxHalfCpltCallback>
}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b004      	add	sp, #16
 8003568:	bd80      	pop	{r7, pc}

0800356a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003576:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800357c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2280      	movs	r2, #128	@ 0x80
 8003582:	589b      	ldr	r3, [r3, r2]
 8003584:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2280      	movs	r2, #128	@ 0x80
 800358e:	4013      	ands	r3, r2
 8003590:	2b80      	cmp	r3, #128	@ 0x80
 8003592:	d10a      	bne.n	80035aa <UART_DMAError+0x40>
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2b21      	cmp	r3, #33	@ 0x21
 8003598:	d107      	bne.n	80035aa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2252      	movs	r2, #82	@ 0x52
 800359e:	2100      	movs	r1, #0
 80035a0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff fea1 	bl	80032ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2240      	movs	r2, #64	@ 0x40
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b40      	cmp	r3, #64	@ 0x40
 80035b6:	d10a      	bne.n	80035ce <UART_DMAError+0x64>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b22      	cmp	r3, #34	@ 0x22
 80035bc:	d107      	bne.n	80035ce <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	225a      	movs	r2, #90	@ 0x5a
 80035c2:	2100      	movs	r1, #0
 80035c4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	0018      	movs	r0, r3
 80035ca:	f7ff feb3 	bl	8003334 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2284      	movs	r2, #132	@ 0x84
 80035d2:	589b      	ldr	r3, [r3, r2]
 80035d4:	2210      	movs	r2, #16
 80035d6:	431a      	orrs	r2, r3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2184      	movs	r1, #132	@ 0x84
 80035dc:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7ff fa9f 	bl	8002b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b006      	add	sp, #24
 80035ec:	bd80      	pop	{r7, pc}

080035ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	225a      	movs	r2, #90	@ 0x5a
 8003600:	2100      	movs	r1, #0
 8003602:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2252      	movs	r2, #82	@ 0x52
 8003608:	2100      	movs	r1, #0
 800360a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	0018      	movs	r0, r3
 8003610:	f7ff fa88 	bl	8002b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003614:	46c0      	nop			@ (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	b004      	add	sp, #16
 800361a:	bd80      	pop	{r7, pc}

0800361c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003624:	f3ef 8310 	mrs	r3, PRIMASK
 8003628:	60bb      	str	r3, [r7, #8]
  return(result);
 800362a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	2301      	movs	r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f383 8810 	msr	PRIMASK, r3
}
 8003638:	46c0      	nop			@ (mov r8, r8)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2140      	movs	r1, #64	@ 0x40
 8003646:	438a      	bics	r2, r1
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f383 8810 	msr	PRIMASK, r3
}
 8003654:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	0018      	movs	r0, r3
 8003666:	f7ff fa45 	bl	8002af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	b006      	add	sp, #24
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003672:	b5b0      	push	{r4, r5, r7, lr}
 8003674:	b08a      	sub	sp, #40	@ 0x28
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	1dbb      	adds	r3, r7, #6
 800367e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2280      	movs	r2, #128	@ 0x80
 8003684:	589b      	ldr	r3, [r3, r2]
 8003686:	2b20      	cmp	r3, #32
 8003688:	d156      	bne.n	8003738 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003690:	1dbb      	adds	r3, r7, #6
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e04e      	b.n	800373a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	2380      	movs	r3, #128	@ 0x80
 80036a2:	015b      	lsls	r3, r3, #5
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d109      	bne.n	80036bc <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2201      	movs	r2, #1
 80036b4:	4013      	ands	r3, r2
 80036b6:	d001      	beq.n	80036bc <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e03e      	b.n	800373a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80036c8:	2527      	movs	r5, #39	@ 0x27
 80036ca:	197c      	adds	r4, r7, r5
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	881a      	ldrh	r2, [r3, #0]
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	0018      	movs	r0, r3
 80036d6:	f7ff fd69 	bl	80031ac <UART_Start_Receive_DMA>
 80036da:	0003      	movs	r3, r0
 80036dc:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80036de:	197b      	adds	r3, r7, r5
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d124      	bne.n	8003730 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d11c      	bne.n	8003728 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2210      	movs	r2, #16
 80036f4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036f6:	f3ef 8310 	mrs	r3, PRIMASK
 80036fa:	617b      	str	r3, [r7, #20]
  return(result);
 80036fc:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036fe:	623b      	str	r3, [r7, #32]
 8003700:	2301      	movs	r3, #1
 8003702:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f383 8810 	msr	PRIMASK, r3
}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2110      	movs	r1, #16
 8003718:	430a      	orrs	r2, r1
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f383 8810 	msr	PRIMASK, r3
}
 8003726:	e003      	b.n	8003730 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003728:	2327      	movs	r3, #39	@ 0x27
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	2201      	movs	r2, #1
 800372e:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8003730:	2327      	movs	r3, #39	@ 0x27
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	e000      	b.n	800373a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
  }
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b00a      	add	sp, #40	@ 0x28
 8003740:	bdb0      	pop	{r4, r5, r7, pc}

08003742 <memmove>:
 8003742:	b510      	push	{r4, lr}
 8003744:	4288      	cmp	r0, r1
 8003746:	d902      	bls.n	800374e <memmove+0xc>
 8003748:	188b      	adds	r3, r1, r2
 800374a:	4298      	cmp	r0, r3
 800374c:	d308      	bcc.n	8003760 <memmove+0x1e>
 800374e:	2300      	movs	r3, #0
 8003750:	429a      	cmp	r2, r3
 8003752:	d007      	beq.n	8003764 <memmove+0x22>
 8003754:	5ccc      	ldrb	r4, [r1, r3]
 8003756:	54c4      	strb	r4, [r0, r3]
 8003758:	3301      	adds	r3, #1
 800375a:	e7f9      	b.n	8003750 <memmove+0xe>
 800375c:	5c8b      	ldrb	r3, [r1, r2]
 800375e:	5483      	strb	r3, [r0, r2]
 8003760:	3a01      	subs	r2, #1
 8003762:	d2fb      	bcs.n	800375c <memmove+0x1a>
 8003764:	bd10      	pop	{r4, pc}

08003766 <memset>:
 8003766:	0003      	movs	r3, r0
 8003768:	1882      	adds	r2, r0, r2
 800376a:	4293      	cmp	r3, r2
 800376c:	d100      	bne.n	8003770 <memset+0xa>
 800376e:	4770      	bx	lr
 8003770:	7019      	strb	r1, [r3, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	e7f9      	b.n	800376a <memset+0x4>
	...

08003778 <__libc_init_array>:
 8003778:	b570      	push	{r4, r5, r6, lr}
 800377a:	2600      	movs	r6, #0
 800377c:	4c0c      	ldr	r4, [pc, #48]	@ (80037b0 <__libc_init_array+0x38>)
 800377e:	4d0d      	ldr	r5, [pc, #52]	@ (80037b4 <__libc_init_array+0x3c>)
 8003780:	1b64      	subs	r4, r4, r5
 8003782:	10a4      	asrs	r4, r4, #2
 8003784:	42a6      	cmp	r6, r4
 8003786:	d109      	bne.n	800379c <__libc_init_array+0x24>
 8003788:	2600      	movs	r6, #0
 800378a:	f000 f823 	bl	80037d4 <_init>
 800378e:	4c0a      	ldr	r4, [pc, #40]	@ (80037b8 <__libc_init_array+0x40>)
 8003790:	4d0a      	ldr	r5, [pc, #40]	@ (80037bc <__libc_init_array+0x44>)
 8003792:	1b64      	subs	r4, r4, r5
 8003794:	10a4      	asrs	r4, r4, #2
 8003796:	42a6      	cmp	r6, r4
 8003798:	d105      	bne.n	80037a6 <__libc_init_array+0x2e>
 800379a:	bd70      	pop	{r4, r5, r6, pc}
 800379c:	00b3      	lsls	r3, r6, #2
 800379e:	58eb      	ldr	r3, [r5, r3]
 80037a0:	4798      	blx	r3
 80037a2:	3601      	adds	r6, #1
 80037a4:	e7ee      	b.n	8003784 <__libc_init_array+0xc>
 80037a6:	00b3      	lsls	r3, r6, #2
 80037a8:	58eb      	ldr	r3, [r5, r3]
 80037aa:	4798      	blx	r3
 80037ac:	3601      	adds	r6, #1
 80037ae:	e7f2      	b.n	8003796 <__libc_init_array+0x1e>
 80037b0:	08003824 	.word	0x08003824
 80037b4:	08003824 	.word	0x08003824
 80037b8:	08003828 	.word	0x08003828
 80037bc:	08003824 	.word	0x08003824

080037c0 <memcpy>:
 80037c0:	2300      	movs	r3, #0
 80037c2:	b510      	push	{r4, lr}
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d100      	bne.n	80037ca <memcpy+0xa>
 80037c8:	bd10      	pop	{r4, pc}
 80037ca:	5ccc      	ldrb	r4, [r1, r3]
 80037cc:	54c4      	strb	r4, [r0, r3]
 80037ce:	3301      	adds	r3, #1
 80037d0:	e7f8      	b.n	80037c4 <memcpy+0x4>
	...

080037d4 <_init>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr

080037e0 <_fini>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e6:	bc08      	pop	{r3}
 80037e8:	469e      	mov	lr, r3
 80037ea:	4770      	bx	lr
