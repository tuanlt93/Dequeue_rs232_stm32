
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800337c  0800337c  0000437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033b4  080033b4  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080033b4  080033b4  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080033b4  080033b4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033b4  080033b4  000043b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033b8  080033b8  000043b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080033bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  2000000c  080033c8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  080033c8  000053e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c72  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019bb  00000000  00000000  0000dca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000f668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052c  00000000  00000000  0000fd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001038e  00000000  00000000  00010254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d70  00000000  00000000  000205e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063140  00000000  00000000  0002a352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008d492  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000165c  00000000  00000000  0008d4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0008eb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003364 	.word	0x08003364

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003364 	.word	0x08003364

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fc42 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f828 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f9c6 	bl	80005b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800022c:	f000 f9a6 	bl	800057c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000230:	f000 f884 	bl	800033c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000234:	f000 f8b2 	bl	800039c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000238:	f000 f8e0 	bl	80003fc <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800023c:	f000 f90e 	bl	800045c <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 8000240:	f000 f93c 	bl	80004bc <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 8000244:	f000 f96a 	bl	800051c <MX_USART6_UART_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 8000248:	4907      	ldr	r1, [pc, #28]	@ (8000268 <main+0x4c>)
 800024a:	4b08      	ldr	r3, [pc, #32]	@ (800026c <main+0x50>)
 800024c:	2220      	movs	r2, #32
 800024e:	0018      	movs	r0, r3
 8000250:	f002 fff3 	bl	800323a <HAL_UARTEx_ReceiveToIdle_DMA>
	  HAL_UART_Receive(&huart5, rx5_data, 32, 500);
 8000254:	23fa      	movs	r3, #250	@ 0xfa
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	4905      	ldr	r1, [pc, #20]	@ (8000270 <main+0x54>)
 800025a:	4806      	ldr	r0, [pc, #24]	@ (8000274 <main+0x58>)
 800025c:	2220      	movs	r2, #32
 800025e:	f001 fe71 	bl	8001f44 <HAL_UART_Receive>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 8000262:	46c0      	nop			@ (mov r8, r8)
 8000264:	e7f0      	b.n	8000248 <main+0x2c>
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	20000028 	.word	0x20000028
 800026c:	20000068 	.word	0x20000068
 8000270:	20000048 	.word	0x20000048
 8000274:	20000288 	.word	0x20000288

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b095      	sub	sp, #84	@ 0x54
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	2420      	movs	r4, #32
 8000280:	193b      	adds	r3, r7, r4
 8000282:	0018      	movs	r0, r3
 8000284:	2330      	movs	r3, #48	@ 0x30
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f003 f83e 	bl	800330a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	2310      	movs	r3, #16
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	0018      	movs	r0, r3
 8000294:	2310      	movs	r3, #16
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f003 f836 	bl	800330a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029e:	003b      	movs	r3, r7
 80002a0:	0018      	movs	r0, r3
 80002a2:	2310      	movs	r3, #16
 80002a4:	001a      	movs	r2, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	f003 f82f 	bl	800330a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ac:	0021      	movs	r1, r4
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2202      	movs	r2, #2
 80002b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2201      	movs	r2, #1
 80002b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2210      	movs	r2, #16
 80002be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2202      	movs	r2, #2
 80002c4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2280      	movs	r2, #128	@ 0x80
 80002ca:	0212      	lsls	r2, r2, #8
 80002cc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2280      	movs	r2, #128	@ 0x80
 80002d2:	0352      	lsls	r2, r2, #13
 80002d4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2200      	movs	r2, #0
 80002da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 f8aa 	bl	8001438 <HAL_RCC_OscConfig>
 80002e4:	1e03      	subs	r3, r0, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002e8:	f000 f99a 	bl	8000620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ec:	2110      	movs	r1, #16
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2207      	movs	r2, #7
 80002f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2202      	movs	r2, #2
 80002f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2101      	movs	r1, #1
 800030a:	0018      	movs	r0, r3
 800030c:	f001 fbb2 	bl	8001a74 <HAL_RCC_ClockConfig>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000314:	f000 f984 	bl	8000620 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000318:	003b      	movs	r3, r7
 800031a:	2201      	movs	r2, #1
 800031c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800031e:	003b      	movs	r3, r7
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000324:	003b      	movs	r3, r7
 8000326:	0018      	movs	r0, r3
 8000328:	f001 fcea 	bl	8001d00 <HAL_RCCEx_PeriphCLKConfig>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000330:	f000 f976 	bl	8000620 <Error_Handler>
  }
}
 8000334:	46c0      	nop			@ (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b015      	add	sp, #84	@ 0x54
 800033a:	bd90      	pop	{r4, r7, pc}

0800033c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000340:	4b14      	ldr	r3, [pc, #80]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000342:	4a15      	ldr	r2, [pc, #84]	@ (8000398 <MX_USART1_UART_Init+0x5c>)
 8000344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000346:	4b13      	ldr	r3, [pc, #76]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000348:	2296      	movs	r2, #150	@ 0x96
 800034a:	0192      	lsls	r2, r2, #6
 800034c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000372:	4b08      	ldr	r3, [pc, #32]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800037e:	4b05      	ldr	r3, [pc, #20]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000380:	0018      	movs	r0, r3
 8000382:	f001 fd8b 	bl	8001e9c <HAL_UART_Init>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800038a:	f000 f949 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800038e:	46c0      	nop			@ (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000068 	.word	0x20000068
 8000398:	40013800 	.word	0x40013800

0800039c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a0:	4b14      	ldr	r3, [pc, #80]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003a2:	4a15      	ldr	r2, [pc, #84]	@ (80003f8 <MX_USART2_UART_Init+0x5c>)
 80003a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003a6:	4b13      	ldr	r3, [pc, #76]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003a8:	2296      	movs	r2, #150	@ 0x96
 80003aa:	0192      	lsls	r2, r2, #6
 80003ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003c2:	220c      	movs	r2, #12
 80003c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003cc:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003de:	4b05      	ldr	r3, [pc, #20]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 fd5b 	bl	8001e9c <HAL_UART_Init>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ea:	f000 f919 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	200000f0 	.word	0x200000f0
 80003f8:	40004400 	.word	0x40004400

080003fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000400:	4b14      	ldr	r3, [pc, #80]	@ (8000454 <MX_USART3_UART_Init+0x58>)
 8000402:	4a15      	ldr	r2, [pc, #84]	@ (8000458 <MX_USART3_UART_Init+0x5c>)
 8000404:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000406:	4b13      	ldr	r3, [pc, #76]	@ (8000454 <MX_USART3_UART_Init+0x58>)
 8000408:	2296      	movs	r2, #150	@ 0x96
 800040a:	0192      	lsls	r2, r2, #6
 800040c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800040e:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <MX_USART3_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <MX_USART3_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <MX_USART3_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000420:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <MX_USART3_UART_Init+0x58>)
 8000422:	220c      	movs	r2, #12
 8000424:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <MX_USART3_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800042c:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <MX_USART3_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000432:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <MX_USART3_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <MX_USART3_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800043e:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <MX_USART3_UART_Init+0x58>)
 8000440:	0018      	movs	r0, r3
 8000442:	f001 fd2b 	bl	8001e9c <HAL_UART_Init>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d001      	beq.n	800044e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800044a:	f000 f8e9 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000178 	.word	0x20000178
 8000458:	40004800 	.word	0x40004800

0800045c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000460:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <MX_USART4_UART_Init+0x58>)
 8000462:	4a15      	ldr	r2, [pc, #84]	@ (80004b8 <MX_USART4_UART_Init+0x5c>)
 8000464:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000466:	4b13      	ldr	r3, [pc, #76]	@ (80004b4 <MX_USART4_UART_Init+0x58>)
 8000468:	2296      	movs	r2, #150	@ 0x96
 800046a:	0192      	lsls	r2, r2, #6
 800046c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800046e:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <MX_USART4_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <MX_USART4_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800047a:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <MX_USART4_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000480:	4b0c      	ldr	r3, [pc, #48]	@ (80004b4 <MX_USART4_UART_Init+0x58>)
 8000482:	220c      	movs	r2, #12
 8000484:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	@ (80004b4 <MX_USART4_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800048c:	4b09      	ldr	r3, [pc, #36]	@ (80004b4 <MX_USART4_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000492:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <MX_USART4_UART_Init+0x58>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <MX_USART4_UART_Init+0x58>)
 800049a:	2200      	movs	r2, #0
 800049c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800049e:	4b05      	ldr	r3, [pc, #20]	@ (80004b4 <MX_USART4_UART_Init+0x58>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 fcfb 	bl	8001e9c <HAL_UART_Init>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d001      	beq.n	80004ae <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80004aa:	f000 f8b9 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000200 	.word	0x20000200
 80004b8:	40004c00 	.word	0x40004c00

080004bc <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80004c0:	4b14      	ldr	r3, [pc, #80]	@ (8000514 <MX_USART5_UART_Init+0x58>)
 80004c2:	4a15      	ldr	r2, [pc, #84]	@ (8000518 <MX_USART5_UART_Init+0x5c>)
 80004c4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80004c6:	4b13      	ldr	r3, [pc, #76]	@ (8000514 <MX_USART5_UART_Init+0x58>)
 80004c8:	2296      	movs	r2, #150	@ 0x96
 80004ca:	0192      	lsls	r2, r2, #6
 80004cc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <MX_USART5_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <MX_USART5_UART_Init+0x58>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80004da:	4b0e      	ldr	r3, [pc, #56]	@ (8000514 <MX_USART5_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <MX_USART5_UART_Init+0x58>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <MX_USART5_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ec:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <MX_USART5_UART_Init+0x58>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004f2:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <MX_USART5_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <MX_USART5_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80004fe:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <MX_USART5_UART_Init+0x58>)
 8000500:	0018      	movs	r0, r3
 8000502:	f001 fccb 	bl	8001e9c <HAL_UART_Init>
 8000506:	1e03      	subs	r3, r0, #0
 8000508:	d001      	beq.n	800050e <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 800050a:	f000 f889 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000288 	.word	0x20000288
 8000518:	40005000 	.word	0x40005000

0800051c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000520:	4b14      	ldr	r3, [pc, #80]	@ (8000574 <MX_USART6_UART_Init+0x58>)
 8000522:	4a15      	ldr	r2, [pc, #84]	@ (8000578 <MX_USART6_UART_Init+0x5c>)
 8000524:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000526:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <MX_USART6_UART_Init+0x58>)
 8000528:	2296      	movs	r2, #150	@ 0x96
 800052a:	0192      	lsls	r2, r2, #6
 800052c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800052e:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <MX_USART6_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <MX_USART6_UART_Init+0x58>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800053a:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <MX_USART6_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000540:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <MX_USART6_UART_Init+0x58>)
 8000542:	220c      	movs	r2, #12
 8000544:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000546:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <MX_USART6_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800054c:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <MX_USART6_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000552:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <MX_USART6_UART_Init+0x58>)
 8000554:	2200      	movs	r2, #0
 8000556:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <MX_USART6_UART_Init+0x58>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800055e:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <MX_USART6_UART_Init+0x58>)
 8000560:	0018      	movs	r0, r3
 8000562:	f001 fc9b 	bl	8001e9c <HAL_UART_Init>
 8000566:	1e03      	subs	r3, r0, #0
 8000568:	d001      	beq.n	800056e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800056a:	f000 f859 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000310 	.word	0x20000310
 8000578:	40011400 	.word	0x40011400

0800057c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000582:	4b0c      	ldr	r3, [pc, #48]	@ (80005b4 <MX_DMA_Init+0x38>)
 8000584:	695a      	ldr	r2, [r3, #20]
 8000586:	4b0b      	ldr	r3, [pc, #44]	@ (80005b4 <MX_DMA_Init+0x38>)
 8000588:	2101      	movs	r1, #1
 800058a:	430a      	orrs	r2, r1
 800058c:	615a      	str	r2, [r3, #20]
 800058e:	4b09      	ldr	r3, [pc, #36]	@ (80005b4 <MX_DMA_Init+0x38>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	2201      	movs	r2, #1
 8000594:	4013      	ands	r3, r2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	2009      	movs	r0, #9
 80005a0:	f000 fb92 	bl	8000cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005a4:	2009      	movs	r0, #9
 80005a6:	f000 fba4 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

}
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b002      	add	sp, #8
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	40021000 	.word	0x40021000

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005be:	4b17      	ldr	r3, [pc, #92]	@ (800061c <MX_GPIO_Init+0x64>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b16      	ldr	r3, [pc, #88]	@ (800061c <MX_GPIO_Init+0x64>)
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	03c9      	lsls	r1, r1, #15
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	4b13      	ldr	r3, [pc, #76]	@ (800061c <MX_GPIO_Init+0x64>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	2380      	movs	r3, #128	@ 0x80
 80005d2:	03db      	lsls	r3, r3, #15
 80005d4:	4013      	ands	r3, r2
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b10      	ldr	r3, [pc, #64]	@ (800061c <MX_GPIO_Init+0x64>)
 80005dc:	695a      	ldr	r2, [r3, #20]
 80005de:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <MX_GPIO_Init+0x64>)
 80005e0:	2180      	movs	r1, #128	@ 0x80
 80005e2:	0289      	lsls	r1, r1, #10
 80005e4:	430a      	orrs	r2, r1
 80005e6:	615a      	str	r2, [r3, #20]
 80005e8:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <MX_GPIO_Init+0x64>)
 80005ea:	695a      	ldr	r2, [r3, #20]
 80005ec:	2380      	movs	r3, #128	@ 0x80
 80005ee:	029b      	lsls	r3, r3, #10
 80005f0:	4013      	ands	r3, r2
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_GPIO_Init+0x64>)
 80005f8:	695a      	ldr	r2, [r3, #20]
 80005fa:	4b08      	ldr	r3, [pc, #32]	@ (800061c <MX_GPIO_Init+0x64>)
 80005fc:	2180      	movs	r1, #128	@ 0x80
 80005fe:	02c9      	lsls	r1, r1, #11
 8000600:	430a      	orrs	r2, r1
 8000602:	615a      	str	r2, [r3, #20]
 8000604:	4b05      	ldr	r3, [pc, #20]	@ (800061c <MX_GPIO_Init+0x64>)
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	2380      	movs	r3, #128	@ 0x80
 800060a:	02db      	lsls	r3, r3, #11
 800060c:	4013      	ands	r3, r2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b004      	add	sp, #16
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	40021000 	.word	0x40021000

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	46c0      	nop			@ (mov r8, r8)
 800062a:	e7fd      	b.n	8000628 <Error_Handler+0x8>

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <HAL_MspInit+0x44>)
 8000634:	699a      	ldr	r2, [r3, #24]
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <HAL_MspInit+0x44>)
 8000638:	2101      	movs	r1, #1
 800063a:	430a      	orrs	r2, r1
 800063c:	619a      	str	r2, [r3, #24]
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <HAL_MspInit+0x44>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	2201      	movs	r2, #1
 8000644:	4013      	ands	r3, r2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <HAL_MspInit+0x44>)
 800064c:	69da      	ldr	r2, [r3, #28]
 800064e:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <HAL_MspInit+0x44>)
 8000650:	2180      	movs	r1, #128	@ 0x80
 8000652:	0549      	lsls	r1, r1, #21
 8000654:	430a      	orrs	r2, r1
 8000656:	61da      	str	r2, [r3, #28]
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <HAL_MspInit+0x44>)
 800065a:	69da      	ldr	r2, [r3, #28]
 800065c:	2380      	movs	r3, #128	@ 0x80
 800065e:	055b      	lsls	r3, r3, #21
 8000660:	4013      	ands	r3, r2
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	b002      	add	sp, #8
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	40021000 	.word	0x40021000

08000674 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b095      	sub	sp, #84	@ 0x54
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	243c      	movs	r4, #60	@ 0x3c
 800067e:	193b      	adds	r3, r7, r4
 8000680:	0018      	movs	r0, r3
 8000682:	2314      	movs	r3, #20
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f002 fe3f 	bl	800330a <memset>
  if(huart->Instance==USART1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4ac9      	ldr	r2, [pc, #804]	@ (80009b8 <HAL_UART_MspInit+0x344>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d172      	bne.n	800077c <HAL_UART_MspInit+0x108>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000696:	4bc9      	ldr	r3, [pc, #804]	@ (80009bc <HAL_UART_MspInit+0x348>)
 8000698:	699a      	ldr	r2, [r3, #24]
 800069a:	4bc8      	ldr	r3, [pc, #800]	@ (80009bc <HAL_UART_MspInit+0x348>)
 800069c:	2180      	movs	r1, #128	@ 0x80
 800069e:	01c9      	lsls	r1, r1, #7
 80006a0:	430a      	orrs	r2, r1
 80006a2:	619a      	str	r2, [r3, #24]
 80006a4:	4bc5      	ldr	r3, [pc, #788]	@ (80009bc <HAL_UART_MspInit+0x348>)
 80006a6:	699a      	ldr	r2, [r3, #24]
 80006a8:	2380      	movs	r3, #128	@ 0x80
 80006aa:	01db      	lsls	r3, r3, #7
 80006ac:	4013      	ands	r3, r2
 80006ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80006b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4bc2      	ldr	r3, [pc, #776]	@ (80009bc <HAL_UART_MspInit+0x348>)
 80006b4:	695a      	ldr	r2, [r3, #20]
 80006b6:	4bc1      	ldr	r3, [pc, #772]	@ (80009bc <HAL_UART_MspInit+0x348>)
 80006b8:	2180      	movs	r1, #128	@ 0x80
 80006ba:	0289      	lsls	r1, r1, #10
 80006bc:	430a      	orrs	r2, r1
 80006be:	615a      	str	r2, [r3, #20]
 80006c0:	4bbe      	ldr	r3, [pc, #760]	@ (80009bc <HAL_UART_MspInit+0x348>)
 80006c2:	695a      	ldr	r2, [r3, #20]
 80006c4:	2380      	movs	r3, #128	@ 0x80
 80006c6:	029b      	lsls	r3, r3, #10
 80006c8:	4013      	ands	r3, r2
 80006ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80006cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	22c0      	movs	r2, #192	@ 0xc0
 80006d2:	00d2      	lsls	r2, r2, #3
 80006d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	0021      	movs	r1, r4
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2202      	movs	r2, #2
 80006dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2203      	movs	r2, #3
 80006e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2201      	movs	r2, #1
 80006ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	187a      	adds	r2, r7, r1
 80006f2:	2390      	movs	r3, #144	@ 0x90
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 fd2d 	bl	8001158 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80006fe:	4bb0      	ldr	r3, [pc, #704]	@ (80009c0 <HAL_UART_MspInit+0x34c>)
 8000700:	4ab0      	ldr	r2, [pc, #704]	@ (80009c4 <HAL_UART_MspInit+0x350>)
 8000702:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000704:	4bae      	ldr	r3, [pc, #696]	@ (80009c0 <HAL_UART_MspInit+0x34c>)
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800070a:	4bad      	ldr	r3, [pc, #692]	@ (80009c0 <HAL_UART_MspInit+0x34c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000710:	4bab      	ldr	r3, [pc, #684]	@ (80009c0 <HAL_UART_MspInit+0x34c>)
 8000712:	2280      	movs	r2, #128	@ 0x80
 8000714:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000716:	4baa      	ldr	r3, [pc, #680]	@ (80009c0 <HAL_UART_MspInit+0x34c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800071c:	4ba8      	ldr	r3, [pc, #672]	@ (80009c0 <HAL_UART_MspInit+0x34c>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000722:	4ba7      	ldr	r3, [pc, #668]	@ (80009c0 <HAL_UART_MspInit+0x34c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000728:	4ba5      	ldr	r3, [pc, #660]	@ (80009c0 <HAL_UART_MspInit+0x34c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800072e:	4ba4      	ldr	r3, [pc, #656]	@ (80009c0 <HAL_UART_MspInit+0x34c>)
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fafb 	bl	8000d2c <HAL_DMA_Init>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800073a:	f7ff ff71 	bl	8000620 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800073e:	4aa2      	ldr	r2, [pc, #648]	@ (80009c8 <HAL_UART_MspInit+0x354>)
 8000740:	23a8      	movs	r3, #168	@ 0xa8
 8000742:	58d3      	ldr	r3, [r2, r3]
 8000744:	49a0      	ldr	r1, [pc, #640]	@ (80009c8 <HAL_UART_MspInit+0x354>)
 8000746:	220f      	movs	r2, #15
 8000748:	4393      	bics	r3, r2
 800074a:	22a8      	movs	r2, #168	@ 0xa8
 800074c:	508b      	str	r3, [r1, r2]
 800074e:	4a9e      	ldr	r2, [pc, #632]	@ (80009c8 <HAL_UART_MspInit+0x354>)
 8000750:	23a8      	movs	r3, #168	@ 0xa8
 8000752:	58d3      	ldr	r3, [r2, r3]
 8000754:	499c      	ldr	r1, [pc, #624]	@ (80009c8 <HAL_UART_MspInit+0x354>)
 8000756:	2208      	movs	r2, #8
 8000758:	4313      	orrs	r3, r2
 800075a:	22a8      	movs	r2, #168	@ 0xa8
 800075c:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a97      	ldr	r2, [pc, #604]	@ (80009c0 <HAL_UART_MspInit+0x34c>)
 8000762:	675a      	str	r2, [r3, #116]	@ 0x74
 8000764:	4b96      	ldr	r3, [pc, #600]	@ (80009c0 <HAL_UART_MspInit+0x34c>)
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	201b      	movs	r0, #27
 8000770:	f000 faaa 	bl	8000cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000774:	201b      	movs	r0, #27
 8000776:	f000 fabc 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800077a:	e118      	b.n	80009ae <HAL_UART_MspInit+0x33a>
  else if(huart->Instance==USART2)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a92      	ldr	r2, [pc, #584]	@ (80009cc <HAL_UART_MspInit+0x358>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d133      	bne.n	80007ee <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000786:	4b8d      	ldr	r3, [pc, #564]	@ (80009bc <HAL_UART_MspInit+0x348>)
 8000788:	69da      	ldr	r2, [r3, #28]
 800078a:	4b8c      	ldr	r3, [pc, #560]	@ (80009bc <HAL_UART_MspInit+0x348>)
 800078c:	2180      	movs	r1, #128	@ 0x80
 800078e:	0289      	lsls	r1, r1, #10
 8000790:	430a      	orrs	r2, r1
 8000792:	61da      	str	r2, [r3, #28]
 8000794:	4b89      	ldr	r3, [pc, #548]	@ (80009bc <HAL_UART_MspInit+0x348>)
 8000796:	69da      	ldr	r2, [r3, #28]
 8000798:	2380      	movs	r3, #128	@ 0x80
 800079a:	029b      	lsls	r3, r3, #10
 800079c:	4013      	ands	r3, r2
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
 80007a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b86      	ldr	r3, [pc, #536]	@ (80009bc <HAL_UART_MspInit+0x348>)
 80007a4:	695a      	ldr	r2, [r3, #20]
 80007a6:	4b85      	ldr	r3, [pc, #532]	@ (80009bc <HAL_UART_MspInit+0x348>)
 80007a8:	2180      	movs	r1, #128	@ 0x80
 80007aa:	0289      	lsls	r1, r1, #10
 80007ac:	430a      	orrs	r2, r1
 80007ae:	615a      	str	r2, [r3, #20]
 80007b0:	4b82      	ldr	r3, [pc, #520]	@ (80009bc <HAL_UART_MspInit+0x348>)
 80007b2:	695a      	ldr	r2, [r3, #20]
 80007b4:	2380      	movs	r3, #128	@ 0x80
 80007b6:	029b      	lsls	r3, r3, #10
 80007b8:	4013      	ands	r3, r2
 80007ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007be:	213c      	movs	r1, #60	@ 0x3c
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	220c      	movs	r2, #12
 80007c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2202      	movs	r2, #2
 80007ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2203      	movs	r2, #3
 80007d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2201      	movs	r2, #1
 80007dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	187a      	adds	r2, r7, r1
 80007e0:	2390      	movs	r3, #144	@ 0x90
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fcb6 	bl	8001158 <HAL_GPIO_Init>
}
 80007ec:	e0df      	b.n	80009ae <HAL_UART_MspInit+0x33a>
  else if(huart->Instance==USART3)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a77      	ldr	r2, [pc, #476]	@ (80009d0 <HAL_UART_MspInit+0x35c>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d133      	bne.n	8000860 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART3_CLK_ENABLE();
 80007f8:	4b70      	ldr	r3, [pc, #448]	@ (80009bc <HAL_UART_MspInit+0x348>)
 80007fa:	69da      	ldr	r2, [r3, #28]
 80007fc:	4b6f      	ldr	r3, [pc, #444]	@ (80009bc <HAL_UART_MspInit+0x348>)
 80007fe:	2180      	movs	r1, #128	@ 0x80
 8000800:	02c9      	lsls	r1, r1, #11
 8000802:	430a      	orrs	r2, r1
 8000804:	61da      	str	r2, [r3, #28]
 8000806:	4b6d      	ldr	r3, [pc, #436]	@ (80009bc <HAL_UART_MspInit+0x348>)
 8000808:	69da      	ldr	r2, [r3, #28]
 800080a:	2380      	movs	r3, #128	@ 0x80
 800080c:	02db      	lsls	r3, r3, #11
 800080e:	4013      	ands	r3, r2
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000814:	4b69      	ldr	r3, [pc, #420]	@ (80009bc <HAL_UART_MspInit+0x348>)
 8000816:	695a      	ldr	r2, [r3, #20]
 8000818:	4b68      	ldr	r3, [pc, #416]	@ (80009bc <HAL_UART_MspInit+0x348>)
 800081a:	2180      	movs	r1, #128	@ 0x80
 800081c:	02c9      	lsls	r1, r1, #11
 800081e:	430a      	orrs	r2, r1
 8000820:	615a      	str	r2, [r3, #20]
 8000822:	4b66      	ldr	r3, [pc, #408]	@ (80009bc <HAL_UART_MspInit+0x348>)
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	2380      	movs	r3, #128	@ 0x80
 8000828:	02db      	lsls	r3, r3, #11
 800082a:	4013      	ands	r3, r2
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
 800082e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000830:	213c      	movs	r1, #60	@ 0x3c
 8000832:	187b      	adds	r3, r7, r1
 8000834:	22c0      	movs	r2, #192	@ 0xc0
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2202      	movs	r2, #2
 800083e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2203      	movs	r2, #3
 800084a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2204      	movs	r2, #4
 8000850:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	187b      	adds	r3, r7, r1
 8000854:	4a5f      	ldr	r2, [pc, #380]	@ (80009d4 <HAL_UART_MspInit+0x360>)
 8000856:	0019      	movs	r1, r3
 8000858:	0010      	movs	r0, r2
 800085a:	f000 fc7d 	bl	8001158 <HAL_GPIO_Init>
}
 800085e:	e0a6      	b.n	80009ae <HAL_UART_MspInit+0x33a>
  else if(huart->Instance==USART4)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a5c      	ldr	r2, [pc, #368]	@ (80009d8 <HAL_UART_MspInit+0x364>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d133      	bne.n	80008d2 <HAL_UART_MspInit+0x25e>
    __HAL_RCC_USART4_CLK_ENABLE();
 800086a:	4b54      	ldr	r3, [pc, #336]	@ (80009bc <HAL_UART_MspInit+0x348>)
 800086c:	69da      	ldr	r2, [r3, #28]
 800086e:	4b53      	ldr	r3, [pc, #332]	@ (80009bc <HAL_UART_MspInit+0x348>)
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	0309      	lsls	r1, r1, #12
 8000874:	430a      	orrs	r2, r1
 8000876:	61da      	str	r2, [r3, #28]
 8000878:	4b50      	ldr	r3, [pc, #320]	@ (80009bc <HAL_UART_MspInit+0x348>)
 800087a:	69da      	ldr	r2, [r3, #28]
 800087c:	2380      	movs	r3, #128	@ 0x80
 800087e:	031b      	lsls	r3, r3, #12
 8000880:	4013      	ands	r3, r2
 8000882:	623b      	str	r3, [r7, #32]
 8000884:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b4d      	ldr	r3, [pc, #308]	@ (80009bc <HAL_UART_MspInit+0x348>)
 8000888:	695a      	ldr	r2, [r3, #20]
 800088a:	4b4c      	ldr	r3, [pc, #304]	@ (80009bc <HAL_UART_MspInit+0x348>)
 800088c:	2180      	movs	r1, #128	@ 0x80
 800088e:	0289      	lsls	r1, r1, #10
 8000890:	430a      	orrs	r2, r1
 8000892:	615a      	str	r2, [r3, #20]
 8000894:	4b49      	ldr	r3, [pc, #292]	@ (80009bc <HAL_UART_MspInit+0x348>)
 8000896:	695a      	ldr	r2, [r3, #20]
 8000898:	2380      	movs	r3, #128	@ 0x80
 800089a:	029b      	lsls	r3, r3, #10
 800089c:	4013      	ands	r3, r2
 800089e:	61fb      	str	r3, [r7, #28]
 80008a0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008a2:	213c      	movs	r1, #60	@ 0x3c
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2203      	movs	r2, #3
 80008a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2202      	movs	r2, #2
 80008ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2203      	movs	r2, #3
 80008ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2204      	movs	r2, #4
 80008c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	187a      	adds	r2, r7, r1
 80008c4:	2390      	movs	r3, #144	@ 0x90
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	0011      	movs	r1, r2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fc44 	bl	8001158 <HAL_GPIO_Init>
}
 80008d0:	e06d      	b.n	80009ae <HAL_UART_MspInit+0x33a>
  else if(huart->Instance==USART5)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a41      	ldr	r2, [pc, #260]	@ (80009dc <HAL_UART_MspInit+0x368>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d132      	bne.n	8000942 <HAL_UART_MspInit+0x2ce>
    __HAL_RCC_USART5_CLK_ENABLE();
 80008dc:	4b37      	ldr	r3, [pc, #220]	@ (80009bc <HAL_UART_MspInit+0x348>)
 80008de:	69da      	ldr	r2, [r3, #28]
 80008e0:	4b36      	ldr	r3, [pc, #216]	@ (80009bc <HAL_UART_MspInit+0x348>)
 80008e2:	2180      	movs	r1, #128	@ 0x80
 80008e4:	0349      	lsls	r1, r1, #13
 80008e6:	430a      	orrs	r2, r1
 80008e8:	61da      	str	r2, [r3, #28]
 80008ea:	4b34      	ldr	r3, [pc, #208]	@ (80009bc <HAL_UART_MspInit+0x348>)
 80008ec:	69da      	ldr	r2, [r3, #28]
 80008ee:	2380      	movs	r3, #128	@ 0x80
 80008f0:	035b      	lsls	r3, r3, #13
 80008f2:	4013      	ands	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
 80008f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b30      	ldr	r3, [pc, #192]	@ (80009bc <HAL_UART_MspInit+0x348>)
 80008fa:	695a      	ldr	r2, [r3, #20]
 80008fc:	4b2f      	ldr	r3, [pc, #188]	@ (80009bc <HAL_UART_MspInit+0x348>)
 80008fe:	2180      	movs	r1, #128	@ 0x80
 8000900:	02c9      	lsls	r1, r1, #11
 8000902:	430a      	orrs	r2, r1
 8000904:	615a      	str	r2, [r3, #20]
 8000906:	4b2d      	ldr	r3, [pc, #180]	@ (80009bc <HAL_UART_MspInit+0x348>)
 8000908:	695a      	ldr	r2, [r3, #20]
 800090a:	2380      	movs	r3, #128	@ 0x80
 800090c:	02db      	lsls	r3, r3, #11
 800090e:	4013      	ands	r3, r2
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000914:	213c      	movs	r1, #60	@ 0x3c
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2218      	movs	r2, #24
 800091a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2202      	movs	r2, #2
 8000920:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2203      	movs	r2, #3
 800092c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART5;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2204      	movs	r2, #4
 8000932:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	187b      	adds	r3, r7, r1
 8000936:	4a27      	ldr	r2, [pc, #156]	@ (80009d4 <HAL_UART_MspInit+0x360>)
 8000938:	0019      	movs	r1, r3
 800093a:	0010      	movs	r0, r2
 800093c:	f000 fc0c 	bl	8001158 <HAL_GPIO_Init>
}
 8000940:	e035      	b.n	80009ae <HAL_UART_MspInit+0x33a>
  else if(huart->Instance==USART6)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a26      	ldr	r2, [pc, #152]	@ (80009e0 <HAL_UART_MspInit+0x36c>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d130      	bne.n	80009ae <HAL_UART_MspInit+0x33a>
    __HAL_RCC_USART6_CLK_ENABLE();
 800094c:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <HAL_UART_MspInit+0x348>)
 800094e:	699a      	ldr	r2, [r3, #24]
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <HAL_UART_MspInit+0x348>)
 8000952:	2120      	movs	r1, #32
 8000954:	430a      	orrs	r2, r1
 8000956:	619a      	str	r2, [r3, #24]
 8000958:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <HAL_UART_MspInit+0x348>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	2220      	movs	r2, #32
 800095e:	4013      	ands	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <HAL_UART_MspInit+0x348>)
 8000966:	695a      	ldr	r2, [r3, #20]
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <HAL_UART_MspInit+0x348>)
 800096a:	2180      	movs	r1, #128	@ 0x80
 800096c:	0289      	lsls	r1, r1, #10
 800096e:	430a      	orrs	r2, r1
 8000970:	615a      	str	r2, [r3, #20]
 8000972:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <HAL_UART_MspInit+0x348>)
 8000974:	695a      	ldr	r2, [r3, #20]
 8000976:	2380      	movs	r3, #128	@ 0x80
 8000978:	029b      	lsls	r3, r3, #10
 800097a:	4013      	ands	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000980:	213c      	movs	r1, #60	@ 0x3c
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2230      	movs	r2, #48	@ 0x30
 8000986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2202      	movs	r2, #2
 800098c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2203      	movs	r2, #3
 8000998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_USART6;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2205      	movs	r2, #5
 800099e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	187a      	adds	r2, r7, r1
 80009a2:	2390      	movs	r3, #144	@ 0x90
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fbd5 	bl	8001158 <HAL_GPIO_Init>
}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b015      	add	sp, #84	@ 0x54
 80009b4:	bd90      	pop	{r4, r7, pc}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	40013800 	.word	0x40013800
 80009bc:	40021000 	.word	0x40021000
 80009c0:	20000398 	.word	0x20000398
 80009c4:	40020008 	.word	0x40020008
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40004400 	.word	0x40004400
 80009d0:	40004800 	.word	0x40004800
 80009d4:	48000400 	.word	0x48000400
 80009d8:	40004c00 	.word	0x40004c00
 80009dc:	40005000 	.word	0x40005000
 80009e0:	40011400 	.word	0x40011400

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	e7fd      	b.n	80009e8 <NMI_Handler+0x4>

080009ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	e7fd      	b.n	80009f0 <HardFault_Handler+0x4>

080009f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0c:	f000 f894 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a1c:	4b03      	ldr	r3, [pc, #12]	@ (8000a2c <DMA1_Channel1_IRQHandler+0x14>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 faaf 	bl	8000f82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	20000398 	.word	0x20000398

08000a30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a34:	4b03      	ldr	r3, [pc, #12]	@ (8000a44 <USART1_IRQHandler+0x14>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 fb6c 	bl	8002114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	20000068 	.word	0x20000068

08000a48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a54:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a56:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a58:	f7ff fff6 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5e:	490d      	ldr	r1, [pc, #52]	@ (8000a94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a60:	4a0d      	ldr	r2, [pc, #52]	@ (8000a98 <LoopForever+0xe>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a74:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa0 <LoopForever+0x16>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a82:	f002 fc4b 	bl	800331c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a86:	f7ff fbc9 	bl	800021c <main>

08000a8a <LoopForever>:

LoopForever:
    b LoopForever
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
  ldr   r0, =_estack
 8000a8c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a98:	080033bc 	.word	0x080033bc
  ldr r2, =_sbss
 8000a9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa0:	200003e0 	.word	0x200003e0

08000aa4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <HAL_Init+0x24>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_Init+0x24>)
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f809 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abe:	f7ff fdb5 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	40022000 	.word	0x40022000

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <HAL_InitTick+0x5c>)
 8000ada:	681c      	ldr	r4, [r3, #0]
 8000adc:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <HAL_InitTick+0x60>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	23fa      	movs	r3, #250	@ 0xfa
 8000ae4:	0098      	lsls	r0, r3, #2
 8000ae6:	f7ff fb0d 	bl	8000104 <__udivsi3>
 8000aea:	0003      	movs	r3, r0
 8000aec:	0019      	movs	r1, r3
 8000aee:	0020      	movs	r0, r4
 8000af0:	f7ff fb08 	bl	8000104 <__udivsi3>
 8000af4:	0003      	movs	r3, r0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 f90b 	bl	8000d12 <HAL_SYSTICK_Config>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	e00f      	b.n	8000b24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d80b      	bhi.n	8000b22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	425b      	negs	r3, r3
 8000b10:	2200      	movs	r2, #0
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 f8d8 	bl	8000cc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_InitTick+0x64>)
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	0018      	movs	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b003      	add	sp, #12
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	001a      	movs	r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	18d2      	adds	r2, r2, r3
 8000b48:	4b03      	ldr	r3, [pc, #12]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	20000008 	.word	0x20000008
 8000b58:	200003dc 	.word	0x200003dc

08000b5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b02      	ldr	r3, [pc, #8]	@ (8000b6c <HAL_GetTick+0x10>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	200003dc 	.word	0x200003dc

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	0002      	movs	r2, r0
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b82:	d809      	bhi.n	8000b98 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	001a      	movs	r2, r3
 8000b8a:	231f      	movs	r3, #31
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <__NVIC_EnableIRQ+0x30>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	4091      	lsls	r1, r2
 8000b94:	000a      	movs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
  }
}
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	0002      	movs	r2, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bb8:	d828      	bhi.n	8000c0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bba:	4a2f      	ldr	r2, [pc, #188]	@ (8000c78 <__NVIC_SetPriority+0xd4>)
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	33c0      	adds	r3, #192	@ 0xc0
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	589b      	ldr	r3, [r3, r2]
 8000bca:	1dfa      	adds	r2, r7, #7
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	0011      	movs	r1, r2
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	400a      	ands	r2, r1
 8000bd4:	00d2      	lsls	r2, r2, #3
 8000bd6:	21ff      	movs	r1, #255	@ 0xff
 8000bd8:	4091      	lsls	r1, r2
 8000bda:	000a      	movs	r2, r1
 8000bdc:	43d2      	mvns	r2, r2
 8000bde:	401a      	ands	r2, r3
 8000be0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	019b      	lsls	r3, r3, #6
 8000be6:	22ff      	movs	r2, #255	@ 0xff
 8000be8:	401a      	ands	r2, r3
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	4003      	ands	r3, r0
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf8:	481f      	ldr	r0, [pc, #124]	@ (8000c78 <__NVIC_SetPriority+0xd4>)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	430a      	orrs	r2, r1
 8000c04:	33c0      	adds	r3, #192	@ 0xc0
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c0a:	e031      	b.n	8000c70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c7c <__NVIC_SetPriority+0xd8>)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	0019      	movs	r1, r3
 8000c14:	230f      	movs	r3, #15
 8000c16:	400b      	ands	r3, r1
 8000c18:	3b08      	subs	r3, #8
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3306      	adds	r3, #6
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	18d3      	adds	r3, r2, r3
 8000c22:	3304      	adds	r3, #4
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	1dfa      	adds	r2, r7, #7
 8000c28:	7812      	ldrb	r2, [r2, #0]
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	400a      	ands	r2, r1
 8000c30:	00d2      	lsls	r2, r2, #3
 8000c32:	21ff      	movs	r1, #255	@ 0xff
 8000c34:	4091      	lsls	r1, r2
 8000c36:	000a      	movs	r2, r1
 8000c38:	43d2      	mvns	r2, r2
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	019b      	lsls	r3, r3, #6
 8000c42:	22ff      	movs	r2, #255	@ 0xff
 8000c44:	401a      	ands	r2, r3
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	4003      	ands	r3, r0
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c54:	4809      	ldr	r0, [pc, #36]	@ (8000c7c <__NVIC_SetPriority+0xd8>)
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	001c      	movs	r4, r3
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	4023      	ands	r3, r4
 8000c60:	3b08      	subs	r3, #8
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	430a      	orrs	r2, r1
 8000c66:	3306      	adds	r3, #6
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	18c3      	adds	r3, r0, r3
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	601a      	str	r2, [r3, #0]
}
 8000c70:	46c0      	nop			@ (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b003      	add	sp, #12
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	1e5a      	subs	r2, r3, #1
 8000c8c:	2380      	movs	r3, #128	@ 0x80
 8000c8e:	045b      	lsls	r3, r3, #17
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d301      	bcc.n	8000c98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c94:	2301      	movs	r3, #1
 8000c96:	e010      	b.n	8000cba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c98:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <SysTick_Config+0x44>)
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	3a01      	subs	r2, #1
 8000c9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	2103      	movs	r1, #3
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff ff7c 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cac:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <SysTick_Config+0x44>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb2:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <SysTick_Config+0x44>)
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	1c02      	adds	r2, r0, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b004      	add	sp, #16
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	0002      	movs	r2, r0
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff ff33 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ffaf 	bl	8000c80 <SysTick_Config>
 8000d22:	0003      	movs	r3, r0
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e036      	b.n	8000db0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2221      	movs	r2, #33	@ 0x21
 8000d46:	2102      	movs	r1, #2
 8000d48:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4a18      	ldr	r2, [pc, #96]	@ (8000db8 <HAL_DMA_Init+0x8c>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 f9c4 	bl	8001120 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2221      	movs	r2, #33	@ 0x21
 8000da2:	2101      	movs	r1, #1
 8000da4:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2220      	movs	r2, #32
 8000daa:	2100      	movs	r1, #0
 8000dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b004      	add	sp, #16
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	ffffc00f 	.word	0xffffc00f

08000dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dca:	2317      	movs	r3, #23
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	5c9b      	ldrb	r3, [r3, r2]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d101      	bne.n	8000de0 <HAL_DMA_Start_IT+0x24>
 8000ddc:	2302      	movs	r3, #2
 8000dde:	e04f      	b.n	8000e80 <HAL_DMA_Start_IT+0xc4>
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2220      	movs	r2, #32
 8000de4:	2101      	movs	r1, #1
 8000de6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2221      	movs	r2, #33	@ 0x21
 8000dec:	5c9b      	ldrb	r3, [r3, r2]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d13a      	bne.n	8000e6a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2221      	movs	r2, #33	@ 0x21
 8000df8:	2102      	movs	r1, #2
 8000dfa:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	438a      	bics	r2, r1
 8000e10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f000 f954 	bl	80010c6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d008      	beq.n	8000e38 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	210e      	movs	r1, #14
 8000e32:	430a      	orrs	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e00f      	b.n	8000e58 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	210a      	movs	r1, #10
 8000e44:	430a      	orrs	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2104      	movs	r1, #4
 8000e54:	438a      	bics	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2101      	movs	r1, #1
 8000e64:	430a      	orrs	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e007      	b.n	8000e7a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2220      	movs	r2, #32
 8000e6e:	2100      	movs	r1, #0
 8000e70:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e72:	2317      	movs	r3, #23
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	2202      	movs	r2, #2
 8000e78:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000e7a:	2317      	movs	r3, #23
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	781b      	ldrb	r3, [r3, #0]
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b006      	add	sp, #24
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2221      	movs	r2, #33	@ 0x21
 8000e94:	5c9b      	ldrb	r3, [r3, r2]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d008      	beq.n	8000eae <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2220      	movs	r2, #32
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e020      	b.n	8000ef0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	210e      	movs	r1, #14
 8000eba:	438a      	bics	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2101      	movs	r1, #1
 8000eca:	438a      	bics	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4091      	lsls	r1, r2
 8000eda:	000a      	movs	r2, r1
 8000edc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2221      	movs	r2, #33	@ 0x21
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2220      	movs	r2, #32
 8000eea:	2100      	movs	r1, #0
 8000eec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f00:	210f      	movs	r1, #15
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2221      	movs	r2, #33	@ 0x21
 8000f0c:	5c9b      	ldrb	r3, [r3, r2]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d006      	beq.n	8000f22 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2204      	movs	r2, #4
 8000f18:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e028      	b.n	8000f74 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	210e      	movs	r1, #14
 8000f2e:	438a      	bics	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	438a      	bics	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2221      	movs	r2, #33	@ 0x21
 8000f56:	2101      	movs	r1, #1
 8000f58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	2100      	movs	r1, #0
 8000f60:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d004      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	0010      	movs	r0, r2
 8000f72:	4798      	blx	r3
    }
  }
  return status;
 8000f74:	230f      	movs	r3, #15
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	781b      	ldrb	r3, [r3, #0]
}
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b004      	add	sp, #16
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b084      	sub	sp, #16
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d024      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0x72>
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	2204      	movs	r2, #4
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d020      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2220      	movs	r2, #32
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d107      	bne.n	8000fce <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2104      	movs	r1, #4
 8000fca:	438a      	bics	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	4091      	lsls	r1, r2
 8000fda:	000a      	movs	r2, r1
 8000fdc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <HAL_DMA_IRQHandler+0x66>
 8000fe6:	e06a      	b.n	80010be <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	0010      	movs	r0, r2
 8000ff0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000ff2:	e064      	b.n	80010be <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	4013      	ands	r3, r2
 8001002:	d02b      	beq.n	800105c <HAL_DMA_IRQHandler+0xda>
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	2202      	movs	r2, #2
 8001008:	4013      	ands	r3, r2
 800100a:	d027      	beq.n	800105c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2220      	movs	r2, #32
 8001014:	4013      	ands	r3, r2
 8001016:	d10b      	bne.n	8001030 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	210a      	movs	r1, #10
 8001024:	438a      	bics	r2, r1
 8001026:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2221      	movs	r2, #33	@ 0x21
 800102c:	2101      	movs	r1, #1
 800102e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001038:	2102      	movs	r1, #2
 800103a:	4091      	lsls	r1, r2
 800103c:	000a      	movs	r2, r1
 800103e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2220      	movs	r2, #32
 8001044:	2100      	movs	r1, #0
 8001046:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800104c:	2b00      	cmp	r3, #0
 800104e:	d036      	beq.n	80010be <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	0010      	movs	r0, r2
 8001058:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800105a:	e030      	b.n	80010be <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	2208      	movs	r2, #8
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	4013      	ands	r3, r2
 800106a:	d028      	beq.n	80010be <HAL_DMA_IRQHandler+0x13c>
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2208      	movs	r2, #8
 8001070:	4013      	ands	r3, r2
 8001072:	d024      	beq.n	80010be <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	210e      	movs	r1, #14
 8001080:	438a      	bics	r2, r1
 8001082:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800108c:	2101      	movs	r1, #1
 800108e:	4091      	lsls	r1, r2
 8001090:	000a      	movs	r2, r1
 8001092:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2221      	movs	r2, #33	@ 0x21
 800109e:	2101      	movs	r1, #1
 80010a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2220      	movs	r2, #32
 80010a6:	2100      	movs	r1, #0
 80010a8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d005      	beq.n	80010be <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	0010      	movs	r0, r2
 80010ba:	4798      	blx	r3
    }
  }
}
 80010bc:	e7ff      	b.n	80010be <HAL_DMA_IRQHandler+0x13c>
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b004      	add	sp, #16
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010dc:	2101      	movs	r1, #1
 80010de:	4091      	lsls	r1, r2
 80010e0:	000a      	movs	r2, r1
 80010e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b10      	cmp	r3, #16
 80010f2:	d108      	bne.n	8001106 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001104:	e007      	b.n	8001116 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	60da      	str	r2, [r3, #12]
}
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b004      	add	sp, #16
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a08      	ldr	r2, [pc, #32]	@ (8001150 <DMA_CalcBaseAndBitshift+0x30>)
 800112e:	4694      	mov	ip, r2
 8001130:	4463      	add	r3, ip
 8001132:	2114      	movs	r1, #20
 8001134:	0018      	movs	r0, r3
 8001136:	f7fe ffe5 	bl	8000104 <__udivsi3>
 800113a:	0003      	movs	r3, r0
 800113c:	009a      	lsls	r2, r3, #2
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a03      	ldr	r2, [pc, #12]	@ (8001154 <DMA_CalcBaseAndBitshift+0x34>)
 8001146:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001148:	46c0      	nop			@ (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b002      	add	sp, #8
 800114e:	bd80      	pop	{r7, pc}
 8001150:	bffdfff8 	.word	0xbffdfff8
 8001154:	40020000 	.word	0x40020000

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001166:	e14f      	b.n	8001408 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4091      	lsls	r1, r2
 8001172:	000a      	movs	r2, r1
 8001174:	4013      	ands	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d100      	bne.n	8001180 <HAL_GPIO_Init+0x28>
 800117e:	e140      	b.n	8001402 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2203      	movs	r2, #3
 8001186:	4013      	ands	r3, r2
 8001188:	2b01      	cmp	r3, #1
 800118a:	d005      	beq.n	8001198 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2203      	movs	r2, #3
 8001192:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001194:	2b02      	cmp	r3, #2
 8001196:	d130      	bne.n	80011fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	409a      	lsls	r2, r3
 80011a6:	0013      	movs	r3, r2
 80011a8:	43da      	mvns	r2, r3
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	409a      	lsls	r2, r3
 80011ba:	0013      	movs	r3, r2
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ce:	2201      	movs	r2, #1
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	2201      	movs	r2, #1
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2203      	movs	r2, #3
 8001200:	4013      	ands	r3, r2
 8001202:	2b03      	cmp	r3, #3
 8001204:	d017      	beq.n	8001236 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	43da      	mvns	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2203      	movs	r2, #3
 800123c:	4013      	ands	r3, r2
 800123e:	2b02      	cmp	r3, #2
 8001240:	d123      	bne.n	800128a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	0092      	lsls	r2, r2, #2
 800124c:	58d3      	ldr	r3, [r2, r3]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2207      	movs	r2, #7
 8001254:	4013      	ands	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	409a      	lsls	r2, r3
 800125c:	0013      	movs	r3, r2
 800125e:	43da      	mvns	r2, r3
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	691a      	ldr	r2, [r3, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2107      	movs	r1, #7
 800126e:	400b      	ands	r3, r1
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	0092      	lsls	r2, r2, #2
 8001286:	6939      	ldr	r1, [r7, #16]
 8001288:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2203      	movs	r2, #3
 80012a8:	401a      	ands	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	409a      	lsls	r2, r3
 80012b0:	0013      	movs	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	23c0      	movs	r3, #192	@ 0xc0
 80012c4:	029b      	lsls	r3, r3, #10
 80012c6:	4013      	ands	r3, r2
 80012c8:	d100      	bne.n	80012cc <HAL_GPIO_Init+0x174>
 80012ca:	e09a      	b.n	8001402 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012cc:	4b54      	ldr	r3, [pc, #336]	@ (8001420 <HAL_GPIO_Init+0x2c8>)
 80012ce:	699a      	ldr	r2, [r3, #24]
 80012d0:	4b53      	ldr	r3, [pc, #332]	@ (8001420 <HAL_GPIO_Init+0x2c8>)
 80012d2:	2101      	movs	r1, #1
 80012d4:	430a      	orrs	r2, r1
 80012d6:	619a      	str	r2, [r3, #24]
 80012d8:	4b51      	ldr	r3, [pc, #324]	@ (8001420 <HAL_GPIO_Init+0x2c8>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2201      	movs	r2, #1
 80012de:	4013      	ands	r3, r2
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001424 <HAL_GPIO_Init+0x2cc>)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	589b      	ldr	r3, [r3, r2]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2203      	movs	r2, #3
 80012f6:	4013      	ands	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	409a      	lsls	r2, r3
 80012fe:	0013      	movs	r3, r2
 8001300:	43da      	mvns	r2, r3
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	2390      	movs	r3, #144	@ 0x90
 800130c:	05db      	lsls	r3, r3, #23
 800130e:	429a      	cmp	r2, r3
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x1e2>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a44      	ldr	r2, [pc, #272]	@ (8001428 <HAL_GPIO_Init+0x2d0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x1de>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a43      	ldr	r2, [pc, #268]	@ (800142c <HAL_GPIO_Init+0x2d4>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x1da>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a42      	ldr	r2, [pc, #264]	@ (8001430 <HAL_GPIO_Init+0x2d8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x1d6>
 800132a:	2303      	movs	r3, #3
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x1e4>
 800132e:	2305      	movs	r3, #5
 8001330:	e004      	b.n	800133c <HAL_GPIO_Init+0x1e4>
 8001332:	2302      	movs	r3, #2
 8001334:	e002      	b.n	800133c <HAL_GPIO_Init+0x1e4>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_GPIO_Init+0x1e4>
 800133a:	2300      	movs	r3, #0
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	2103      	movs	r1, #3
 8001340:	400a      	ands	r2, r1
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	4093      	lsls	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800134c:	4935      	ldr	r1, [pc, #212]	@ (8001424 <HAL_GPIO_Init+0x2cc>)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135a:	4b36      	ldr	r3, [pc, #216]	@ (8001434 <HAL_GPIO_Init+0x2dc>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43da      	mvns	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	2380      	movs	r3, #128	@ 0x80
 8001370:	035b      	lsls	r3, r3, #13
 8001372:	4013      	ands	r3, r2
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800137e:	4b2d      	ldr	r3, [pc, #180]	@ (8001434 <HAL_GPIO_Init+0x2dc>)
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001384:	4b2b      	ldr	r3, [pc, #172]	@ (8001434 <HAL_GPIO_Init+0x2dc>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43da      	mvns	r2, r3
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	039b      	lsls	r3, r3, #14
 800139c:	4013      	ands	r3, r2
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013a8:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <HAL_GPIO_Init+0x2dc>)
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80013ae:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <HAL_GPIO_Init+0x2dc>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43da      	mvns	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	2380      	movs	r3, #128	@ 0x80
 80013c4:	029b      	lsls	r3, r3, #10
 80013c6:	4013      	ands	r3, r2
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013d2:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <HAL_GPIO_Init+0x2dc>)
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80013d8:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <HAL_GPIO_Init+0x2dc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43da      	mvns	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	2380      	movs	r3, #128	@ 0x80
 80013ee:	025b      	lsls	r3, r3, #9
 80013f0:	4013      	ands	r3, r2
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <HAL_GPIO_Init+0x2dc>)
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	40da      	lsrs	r2, r3
 8001410:	1e13      	subs	r3, r2, #0
 8001412:	d000      	beq.n	8001416 <HAL_GPIO_Init+0x2be>
 8001414:	e6a8      	b.n	8001168 <HAL_GPIO_Init+0x10>
  } 
}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	46c0      	nop			@ (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b006      	add	sp, #24
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000
 8001424:	40010000 	.word	0x40010000
 8001428:	48000400 	.word	0x48000400
 800142c:	48000800 	.word	0x48000800
 8001430:	48000c00 	.word	0x48000c00
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e305      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2201      	movs	r2, #1
 8001450:	4013      	ands	r3, r2
 8001452:	d100      	bne.n	8001456 <HAL_RCC_OscConfig+0x1e>
 8001454:	e08d      	b.n	8001572 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001456:	4bc5      	ldr	r3, [pc, #788]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	220c      	movs	r2, #12
 800145c:	4013      	ands	r3, r2
 800145e:	2b04      	cmp	r3, #4
 8001460:	d00e      	beq.n	8001480 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001462:	4bc2      	ldr	r3, [pc, #776]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	220c      	movs	r2, #12
 8001468:	4013      	ands	r3, r2
 800146a:	2b08      	cmp	r3, #8
 800146c:	d116      	bne.n	800149c <HAL_RCC_OscConfig+0x64>
 800146e:	4bbf      	ldr	r3, [pc, #764]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	23c0      	movs	r3, #192	@ 0xc0
 8001474:	025b      	lsls	r3, r3, #9
 8001476:	401a      	ands	r2, r3
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	025b      	lsls	r3, r3, #9
 800147c:	429a      	cmp	r2, r3
 800147e:	d10d      	bne.n	800149c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	4bba      	ldr	r3, [pc, #744]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	029b      	lsls	r3, r3, #10
 8001488:	4013      	ands	r3, r2
 800148a:	d100      	bne.n	800148e <HAL_RCC_OscConfig+0x56>
 800148c:	e070      	b.n	8001570 <HAL_RCC_OscConfig+0x138>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d000      	beq.n	8001498 <HAL_RCC_OscConfig+0x60>
 8001496:	e06b      	b.n	8001570 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e2dc      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d107      	bne.n	80014b4 <HAL_RCC_OscConfig+0x7c>
 80014a4:	4bb1      	ldr	r3, [pc, #708]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4bb0      	ldr	r3, [pc, #704]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80014aa:	2180      	movs	r1, #128	@ 0x80
 80014ac:	0249      	lsls	r1, r1, #9
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	e02f      	b.n	8001514 <HAL_RCC_OscConfig+0xdc>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10c      	bne.n	80014d6 <HAL_RCC_OscConfig+0x9e>
 80014bc:	4bab      	ldr	r3, [pc, #684]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4baa      	ldr	r3, [pc, #680]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80014c2:	49ab      	ldr	r1, [pc, #684]	@ (8001770 <HAL_RCC_OscConfig+0x338>)
 80014c4:	400a      	ands	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	4ba8      	ldr	r3, [pc, #672]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4ba7      	ldr	r3, [pc, #668]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80014ce:	49a9      	ldr	r1, [pc, #676]	@ (8001774 <HAL_RCC_OscConfig+0x33c>)
 80014d0:	400a      	ands	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e01e      	b.n	8001514 <HAL_RCC_OscConfig+0xdc>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b05      	cmp	r3, #5
 80014dc:	d10e      	bne.n	80014fc <HAL_RCC_OscConfig+0xc4>
 80014de:	4ba3      	ldr	r3, [pc, #652]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4ba2      	ldr	r3, [pc, #648]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80014e4:	2180      	movs	r1, #128	@ 0x80
 80014e6:	02c9      	lsls	r1, r1, #11
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	4b9f      	ldr	r3, [pc, #636]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b9e      	ldr	r3, [pc, #632]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80014f2:	2180      	movs	r1, #128	@ 0x80
 80014f4:	0249      	lsls	r1, r1, #9
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0xdc>
 80014fc:	4b9b      	ldr	r3, [pc, #620]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b9a      	ldr	r3, [pc, #616]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001502:	499b      	ldr	r1, [pc, #620]	@ (8001770 <HAL_RCC_OscConfig+0x338>)
 8001504:	400a      	ands	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	4b98      	ldr	r3, [pc, #608]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b97      	ldr	r3, [pc, #604]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 800150e:	4999      	ldr	r1, [pc, #612]	@ (8001774 <HAL_RCC_OscConfig+0x33c>)
 8001510:	400a      	ands	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d014      	beq.n	8001546 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fb1e 	bl	8000b5c <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001526:	f7ff fb19 	bl	8000b5c <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b64      	cmp	r3, #100	@ 0x64
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e28e      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001538:	4b8c      	ldr	r3, [pc, #560]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	2380      	movs	r3, #128	@ 0x80
 800153e:	029b      	lsls	r3, r3, #10
 8001540:	4013      	ands	r3, r2
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0xee>
 8001544:	e015      	b.n	8001572 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff fb09 	bl	8000b5c <HAL_GetTick>
 800154a:	0003      	movs	r3, r0
 800154c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fb04 	bl	8000b5c <HAL_GetTick>
 8001554:	0002      	movs	r2, r0
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	@ 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e279      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001562:	4b82      	ldr	r3, [pc, #520]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	2380      	movs	r3, #128	@ 0x80
 8001568:	029b      	lsls	r3, r3, #10
 800156a:	4013      	ands	r3, r2
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x118>
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2202      	movs	r2, #2
 8001578:	4013      	ands	r3, r2
 800157a:	d100      	bne.n	800157e <HAL_RCC_OscConfig+0x146>
 800157c:	e06c      	b.n	8001658 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800157e:	4b7b      	ldr	r3, [pc, #492]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	220c      	movs	r2, #12
 8001584:	4013      	ands	r3, r2
 8001586:	d00e      	beq.n	80015a6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001588:	4b78      	ldr	r3, [pc, #480]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	220c      	movs	r2, #12
 800158e:	4013      	ands	r3, r2
 8001590:	2b08      	cmp	r3, #8
 8001592:	d11f      	bne.n	80015d4 <HAL_RCC_OscConfig+0x19c>
 8001594:	4b75      	ldr	r3, [pc, #468]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	23c0      	movs	r3, #192	@ 0xc0
 800159a:	025b      	lsls	r3, r3, #9
 800159c:	401a      	ands	r2, r3
 800159e:	2380      	movs	r3, #128	@ 0x80
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d116      	bne.n	80015d4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	4b71      	ldr	r3, [pc, #452]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2202      	movs	r2, #2
 80015ac:	4013      	ands	r3, r2
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_OscConfig+0x184>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e24c      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b6b      	ldr	r3, [pc, #428]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	22f8      	movs	r2, #248	@ 0xf8
 80015c2:	4393      	bics	r3, r2
 80015c4:	0019      	movs	r1, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	00da      	lsls	r2, r3, #3
 80015cc:	4b67      	ldr	r3, [pc, #412]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d2:	e041      	b.n	8001658 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d024      	beq.n	8001626 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015dc:	4b63      	ldr	r3, [pc, #396]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b62      	ldr	r3, [pc, #392]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80015e2:	2101      	movs	r1, #1
 80015e4:	430a      	orrs	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fab8 	bl	8000b5c <HAL_GetTick>
 80015ec:	0003      	movs	r3, r0
 80015ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fab3 	bl	8000b5c <HAL_GetTick>
 80015f6:	0002      	movs	r2, r0
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e228      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	4b59      	ldr	r3, [pc, #356]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2202      	movs	r2, #2
 800160a:	4013      	ands	r3, r2
 800160c:	d0f1      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160e:	4b57      	ldr	r3, [pc, #348]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	22f8      	movs	r2, #248	@ 0xf8
 8001614:	4393      	bics	r3, r2
 8001616:	0019      	movs	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	00da      	lsls	r2, r3, #3
 800161e:	4b53      	ldr	r3, [pc, #332]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e018      	b.n	8001658 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001626:	4b51      	ldr	r3, [pc, #324]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b50      	ldr	r3, [pc, #320]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 800162c:	2101      	movs	r1, #1
 800162e:	438a      	bics	r2, r1
 8001630:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001632:	f7ff fa93 	bl	8000b5c <HAL_GetTick>
 8001636:	0003      	movs	r3, r0
 8001638:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163c:	f7ff fa8e 	bl	8000b5c <HAL_GetTick>
 8001640:	0002      	movs	r2, r0
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e203      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164e:	4b47      	ldr	r3, [pc, #284]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2202      	movs	r2, #2
 8001654:	4013      	ands	r3, r2
 8001656:	d1f1      	bne.n	800163c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2208      	movs	r2, #8
 800165e:	4013      	ands	r3, r2
 8001660:	d036      	beq.n	80016d0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d019      	beq.n	800169e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166a:	4b40      	ldr	r3, [pc, #256]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 800166c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800166e:	4b3f      	ldr	r3, [pc, #252]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001670:	2101      	movs	r1, #1
 8001672:	430a      	orrs	r2, r1
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001676:	f7ff fa71 	bl	8000b5c <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff fa6c 	bl	8000b5c <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e1e1      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	4b36      	ldr	r3, [pc, #216]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001696:	2202      	movs	r2, #2
 8001698:	4013      	ands	r3, r2
 800169a:	d0f1      	beq.n	8001680 <HAL_RCC_OscConfig+0x248>
 800169c:	e018      	b.n	80016d0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169e:	4b33      	ldr	r3, [pc, #204]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80016a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016a2:	4b32      	ldr	r3, [pc, #200]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	438a      	bics	r2, r1
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fa57 	bl	8000b5c <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fa52 	bl	8000b5c <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1c7      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c6:	4b29      	ldr	r3, [pc, #164]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80016c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ca:	2202      	movs	r2, #2
 80016cc:	4013      	ands	r3, r2
 80016ce:	d1f1      	bne.n	80016b4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2204      	movs	r2, #4
 80016d6:	4013      	ands	r3, r2
 80016d8:	d100      	bne.n	80016dc <HAL_RCC_OscConfig+0x2a4>
 80016da:	e0b5      	b.n	8001848 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016dc:	201f      	movs	r0, #31
 80016de:	183b      	adds	r3, r7, r0
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e4:	4b21      	ldr	r3, [pc, #132]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80016e6:	69da      	ldr	r2, [r3, #28]
 80016e8:	2380      	movs	r3, #128	@ 0x80
 80016ea:	055b      	lsls	r3, r3, #21
 80016ec:	4013      	ands	r3, r2
 80016ee:	d110      	bne.n	8001712 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80016f2:	69da      	ldr	r2, [r3, #28]
 80016f4:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80016f6:	2180      	movs	r1, #128	@ 0x80
 80016f8:	0549      	lsls	r1, r1, #21
 80016fa:	430a      	orrs	r2, r1
 80016fc:	61da      	str	r2, [r3, #28]
 80016fe:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001700:	69da      	ldr	r2, [r3, #28]
 8001702:	2380      	movs	r3, #128	@ 0x80
 8001704:	055b      	lsls	r3, r3, #21
 8001706:	4013      	ands	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800170c:	183b      	adds	r3, r7, r0
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001712:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <HAL_RCC_OscConfig+0x340>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	2380      	movs	r3, #128	@ 0x80
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4013      	ands	r3, r2
 800171c:	d11a      	bne.n	8001754 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171e:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <HAL_RCC_OscConfig+0x340>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <HAL_RCC_OscConfig+0x340>)
 8001724:	2180      	movs	r1, #128	@ 0x80
 8001726:	0049      	lsls	r1, r1, #1
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172c:	f7ff fa16 	bl	8000b5c <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001736:	f7ff fa11 	bl	8000b5c <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b64      	cmp	r3, #100	@ 0x64
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e186      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <HAL_RCC_OscConfig+0x340>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2380      	movs	r3, #128	@ 0x80
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4013      	ands	r3, r2
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d10f      	bne.n	800177c <HAL_RCC_OscConfig+0x344>
 800175c:	4b03      	ldr	r3, [pc, #12]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 800175e:	6a1a      	ldr	r2, [r3, #32]
 8001760:	4b02      	ldr	r3, [pc, #8]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 8001762:	2101      	movs	r1, #1
 8001764:	430a      	orrs	r2, r1
 8001766:	621a      	str	r2, [r3, #32]
 8001768:	e036      	b.n	80017d8 <HAL_RCC_OscConfig+0x3a0>
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	40021000 	.word	0x40021000
 8001770:	fffeffff 	.word	0xfffeffff
 8001774:	fffbffff 	.word	0xfffbffff
 8001778:	40007000 	.word	0x40007000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10c      	bne.n	800179e <HAL_RCC_OscConfig+0x366>
 8001784:	4bb6      	ldr	r3, [pc, #728]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001786:	6a1a      	ldr	r2, [r3, #32]
 8001788:	4bb5      	ldr	r3, [pc, #724]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 800178a:	2101      	movs	r1, #1
 800178c:	438a      	bics	r2, r1
 800178e:	621a      	str	r2, [r3, #32]
 8001790:	4bb3      	ldr	r3, [pc, #716]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001792:	6a1a      	ldr	r2, [r3, #32]
 8001794:	4bb2      	ldr	r3, [pc, #712]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001796:	2104      	movs	r1, #4
 8001798:	438a      	bics	r2, r1
 800179a:	621a      	str	r2, [r3, #32]
 800179c:	e01c      	b.n	80017d8 <HAL_RCC_OscConfig+0x3a0>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x388>
 80017a6:	4bae      	ldr	r3, [pc, #696]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	4bad      	ldr	r3, [pc, #692]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80017ac:	2104      	movs	r1, #4
 80017ae:	430a      	orrs	r2, r1
 80017b0:	621a      	str	r2, [r3, #32]
 80017b2:	4bab      	ldr	r3, [pc, #684]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80017b4:	6a1a      	ldr	r2, [r3, #32]
 80017b6:	4baa      	ldr	r3, [pc, #680]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	621a      	str	r2, [r3, #32]
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0x3a0>
 80017c0:	4ba7      	ldr	r3, [pc, #668]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80017c2:	6a1a      	ldr	r2, [r3, #32]
 80017c4:	4ba6      	ldr	r3, [pc, #664]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	438a      	bics	r2, r1
 80017ca:	621a      	str	r2, [r3, #32]
 80017cc:	4ba4      	ldr	r3, [pc, #656]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80017ce:	6a1a      	ldr	r2, [r3, #32]
 80017d0:	4ba3      	ldr	r3, [pc, #652]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80017d2:	2104      	movs	r1, #4
 80017d4:	438a      	bics	r2, r1
 80017d6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d014      	beq.n	800180a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7ff f9bc 	bl	8000b5c <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e8:	e009      	b.n	80017fe <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7ff f9b7 	bl	8000b5c <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	4a9b      	ldr	r2, [pc, #620]	@ (8001a64 <HAL_RCC_OscConfig+0x62c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e12b      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	4b98      	ldr	r3, [pc, #608]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	2202      	movs	r2, #2
 8001804:	4013      	ands	r3, r2
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x3b2>
 8001808:	e013      	b.n	8001832 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7ff f9a7 	bl	8000b5c <HAL_GetTick>
 800180e:	0003      	movs	r3, r0
 8001810:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001812:	e009      	b.n	8001828 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff f9a2 	bl	8000b5c <HAL_GetTick>
 8001818:	0002      	movs	r2, r0
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	4a91      	ldr	r2, [pc, #580]	@ (8001a64 <HAL_RCC_OscConfig+0x62c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e116      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	4b8d      	ldr	r3, [pc, #564]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	2202      	movs	r2, #2
 800182e:	4013      	ands	r3, r2
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001832:	231f      	movs	r3, #31
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183c:	4b88      	ldr	r3, [pc, #544]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 800183e:	69da      	ldr	r2, [r3, #28]
 8001840:	4b87      	ldr	r3, [pc, #540]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001842:	4989      	ldr	r1, [pc, #548]	@ (8001a68 <HAL_RCC_OscConfig+0x630>)
 8001844:	400a      	ands	r2, r1
 8001846:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2210      	movs	r2, #16
 800184e:	4013      	ands	r3, r2
 8001850:	d063      	beq.n	800191a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d12a      	bne.n	80018b0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800185a:	4b81      	ldr	r3, [pc, #516]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 800185c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800185e:	4b80      	ldr	r3, [pc, #512]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001860:	2104      	movs	r1, #4
 8001862:	430a      	orrs	r2, r1
 8001864:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001866:	4b7e      	ldr	r3, [pc, #504]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800186a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 800186c:	2101      	movs	r1, #1
 800186e:	430a      	orrs	r2, r1
 8001870:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff f973 	bl	8000b5c <HAL_GetTick>
 8001876:	0003      	movs	r3, r0
 8001878:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800187c:	f7ff f96e 	bl	8000b5c <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e0e3      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800188e:	4b74      	ldr	r3, [pc, #464]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001892:	2202      	movs	r2, #2
 8001894:	4013      	ands	r3, r2
 8001896:	d0f1      	beq.n	800187c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001898:	4b71      	ldr	r3, [pc, #452]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 800189a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189c:	22f8      	movs	r2, #248	@ 0xf8
 800189e:	4393      	bics	r3, r2
 80018a0:	0019      	movs	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	00da      	lsls	r2, r3, #3
 80018a8:	4b6d      	ldr	r3, [pc, #436]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80018aa:	430a      	orrs	r2, r1
 80018ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ae:	e034      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	3305      	adds	r3, #5
 80018b6:	d111      	bne.n	80018dc <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018b8:	4b69      	ldr	r3, [pc, #420]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80018ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018bc:	4b68      	ldr	r3, [pc, #416]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80018be:	2104      	movs	r1, #4
 80018c0:	438a      	bics	r2, r1
 80018c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018c4:	4b66      	ldr	r3, [pc, #408]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80018c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c8:	22f8      	movs	r2, #248	@ 0xf8
 80018ca:	4393      	bics	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	00da      	lsls	r2, r3, #3
 80018d4:	4b62      	ldr	r3, [pc, #392]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80018d6:	430a      	orrs	r2, r1
 80018d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80018da:	e01e      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018dc:	4b60      	ldr	r3, [pc, #384]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80018de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80018e2:	2104      	movs	r1, #4
 80018e4:	430a      	orrs	r2, r1
 80018e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018e8:	4b5d      	ldr	r3, [pc, #372]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80018ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80018ee:	2101      	movs	r1, #1
 80018f0:	438a      	bics	r2, r1
 80018f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7ff f932 	bl	8000b5c <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018fe:	f7ff f92d 	bl	8000b5c <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0a2      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001910:	4b53      	ldr	r3, [pc, #332]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001914:	2202      	movs	r2, #2
 8001916:	4013      	ands	r3, r2
 8001918:	d1f1      	bne.n	80018fe <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d100      	bne.n	8001924 <HAL_RCC_OscConfig+0x4ec>
 8001922:	e097      	b.n	8001a54 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001924:	4b4e      	ldr	r3, [pc, #312]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	220c      	movs	r2, #12
 800192a:	4013      	ands	r3, r2
 800192c:	2b08      	cmp	r3, #8
 800192e:	d100      	bne.n	8001932 <HAL_RCC_OscConfig+0x4fa>
 8001930:	e06b      	b.n	8001a0a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d14c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	4b49      	ldr	r3, [pc, #292]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b48      	ldr	r3, [pc, #288]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001940:	494a      	ldr	r1, [pc, #296]	@ (8001a6c <HAL_RCC_OscConfig+0x634>)
 8001942:	400a      	ands	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff f909 	bl	8000b5c <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff f904 	bl	8000b5c <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e079      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001962:	4b3f      	ldr	r3, [pc, #252]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2380      	movs	r3, #128	@ 0x80
 8001968:	049b      	lsls	r3, r3, #18
 800196a:	4013      	ands	r3, r2
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001972:	220f      	movs	r2, #15
 8001974:	4393      	bics	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800197c:	4b38      	ldr	r3, [pc, #224]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 800197e:	430a      	orrs	r2, r1
 8001980:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001982:	4b37      	ldr	r3, [pc, #220]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4a3a      	ldr	r2, [pc, #232]	@ (8001a70 <HAL_RCC_OscConfig+0x638>)
 8001988:	4013      	ands	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001994:	431a      	orrs	r2, r3
 8001996:	4b32      	ldr	r3, [pc, #200]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001998:	430a      	orrs	r2, r1
 800199a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199c:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	0449      	lsls	r1, r1, #17
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff f8d7 	bl	8000b5c <HAL_GetTick>
 80019ae:	0003      	movs	r3, r0
 80019b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff f8d2 	bl	8000b5c <HAL_GetTick>
 80019b8:	0002      	movs	r2, r0
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e047      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c6:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	@ 0x80
 80019cc:	049b      	lsls	r3, r3, #18
 80019ce:	4013      	ands	r3, r2
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x57c>
 80019d2:	e03f      	b.n	8001a54 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d4:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80019da:	4924      	ldr	r1, [pc, #144]	@ (8001a6c <HAL_RCC_OscConfig+0x634>)
 80019dc:	400a      	ands	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff f8bc 	bl	8000b5c <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff f8b7 	bl	8000b5c <HAL_GetTick>
 80019ee:	0002      	movs	r2, r0
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e02c      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fc:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	049b      	lsls	r3, r3, #18
 8001a04:	4013      	ands	r3, r2
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x5b2>
 8001a08:	e024      	b.n	8001a54 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e01f      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a1c:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 8001a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a20:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	23c0      	movs	r3, #192	@ 0xc0
 8001a26:	025b      	lsls	r3, r3, #9
 8001a28:	401a      	ands	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d10e      	bne.n	8001a50 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	220f      	movs	r2, #15
 8001a36:	401a      	ands	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	23f0      	movs	r3, #240	@ 0xf0
 8001a44:	039b      	lsls	r3, r3, #14
 8001a46:	401a      	ands	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	0018      	movs	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b008      	add	sp, #32
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	40021000 	.word	0x40021000
 8001a64:	00001388 	.word	0x00001388
 8001a68:	efffffff 	.word	0xefffffff
 8001a6c:	feffffff 	.word	0xfeffffff
 8001a70:	ffc27fff 	.word	0xffc27fff

08001a74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0b3      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b5b      	ldr	r3, [pc, #364]	@ (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4013      	ands	r3, r2
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d911      	bls.n	8001aba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b58      	ldr	r3, [pc, #352]	@ (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4393      	bics	r3, r2
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	4b55      	ldr	r3, [pc, #340]	@ (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa8:	4b53      	ldr	r3, [pc, #332]	@ (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2201      	movs	r2, #1
 8001aae:	4013      	ands	r3, r2
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e09a      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d015      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2204      	movs	r2, #4
 8001aca:	4013      	ands	r3, r2
 8001acc:	d006      	beq.n	8001adc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ace:	4b4b      	ldr	r3, [pc, #300]	@ (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001ad4:	21e0      	movs	r1, #224	@ 0xe0
 8001ad6:	00c9      	lsls	r1, r1, #3
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001adc:	4b47      	ldr	r3, [pc, #284]	@ (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	22f0      	movs	r2, #240	@ 0xf0
 8001ae2:	4393      	bics	r3, r2
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	4b44      	ldr	r3, [pc, #272]	@ (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001aec:	430a      	orrs	r2, r1
 8001aee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2201      	movs	r2, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	d040      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	4b3e      	ldr	r3, [pc, #248]	@ (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	@ 0x80
 8001b08:	029b      	lsls	r3, r3, #10
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d114      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e06e      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1a:	4b38      	ldr	r3, [pc, #224]	@ (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	049b      	lsls	r3, r3, #18
 8001b22:	4013      	ands	r3, r2
 8001b24:	d108      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e062      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2a:	4b34      	ldr	r3, [pc, #208]	@ (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	4013      	ands	r3, r2
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e05b      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b38:	4b30      	ldr	r3, [pc, #192]	@ (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	4393      	bics	r3, r2
 8001b40:	0019      	movs	r1, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4b2d      	ldr	r3, [pc, #180]	@ (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b4c:	f7ff f806 	bl	8000b5c <HAL_GetTick>
 8001b50:	0003      	movs	r3, r0
 8001b52:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b54:	e009      	b.n	8001b6a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b56:	f7ff f801 	bl	8000b5c <HAL_GetTick>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	4a27      	ldr	r2, [pc, #156]	@ (8001c00 <HAL_RCC_ClockConfig+0x18c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e042      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	220c      	movs	r2, #12
 8001b70:	401a      	ands	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1ec      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4013      	ands	r3, r2
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d211      	bcs.n	8001bae <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4393      	bics	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9c:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e020      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d009      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb8:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4a11      	ldr	r2, [pc, #68]	@ (8001c04 <HAL_RCC_ClockConfig+0x190>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	0019      	movs	r1, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bcc:	f000 f820 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001bd0:	0001      	movs	r1, r0
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	220f      	movs	r2, #15
 8001bda:	4013      	ands	r3, r2
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <HAL_RCC_ClockConfig+0x194>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	000a      	movs	r2, r1
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_RCC_ClockConfig+0x198>)
 8001be6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001be8:	2003      	movs	r0, #3
 8001bea:	f7fe ff71 	bl	8000ad0 <HAL_InitTick>
  
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b004      	add	sp, #16
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	00001388 	.word	0x00001388
 8001c04:	fffff8ff 	.word	0xfffff8ff
 8001c08:	0800337c 	.word	0x0800337c
 8001c0c:	20000000 	.word	0x20000000

08001c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001c2a:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	220c      	movs	r2, #12
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d002      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x30>
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d003      	beq.n	8001c46 <HAL_RCC_GetSysClockFreq+0x36>
 8001c3e:	e02e      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c40:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c42:	613b      	str	r3, [r7, #16]
      break;
 8001c44:	e02e      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	0c9b      	lsrs	r3, r3, #18
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001c50:	5cd3      	ldrb	r3, [r2, r3]
 8001c52:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c54:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c58:	220f      	movs	r2, #15
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	4a17      	ldr	r2, [pc, #92]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0xac>)
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
 8001c60:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	23c0      	movs	r3, #192	@ 0xc0
 8001c66:	025b      	lsls	r3, r3, #9
 8001c68:	401a      	ands	r2, r3
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	025b      	lsls	r3, r3, #9
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d109      	bne.n	8001c86 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	480f      	ldr	r0, [pc, #60]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c76:	f7fe fa45 	bl	8000104 <__udivsi3>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4353      	muls	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	480a      	ldr	r0, [pc, #40]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c8a:	f7fe fa3b 	bl	8000104 <__udivsi3>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	001a      	movs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4353      	muls	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
      break;
 8001c9c:	e002      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c9e:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ca0:	613b      	str	r3, [r7, #16]
      break;
 8001ca2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ca4:	693b      	ldr	r3, [r7, #16]
}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b006      	add	sp, #24
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	007a1200 	.word	0x007a1200
 8001cb8:	08003394 	.word	0x08003394
 8001cbc:	080033a4 	.word	0x080033a4

08001cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	@ (8001cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			@ (mov r8, r8)
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001cd8:	f7ff fff2 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001cdc:	0001      	movs	r1, r0
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	000b      	movs	r3, r1
}    
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	46c0      	nop			@ (mov r8, r8)
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	0800338c 	.word	0x0800338c

08001d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	025b      	lsls	r3, r3, #9
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d100      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d1c:	e08e      	b.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d1e:	2017      	movs	r0, #23
 8001d20:	183b      	adds	r3, r7, r0
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4b57      	ldr	r3, [pc, #348]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	2380      	movs	r3, #128	@ 0x80
 8001d2c:	055b      	lsls	r3, r3, #21
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d110      	bne.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	4b54      	ldr	r3, [pc, #336]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d34:	69da      	ldr	r2, [r3, #28]
 8001d36:	4b53      	ldr	r3, [pc, #332]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d38:	2180      	movs	r1, #128	@ 0x80
 8001d3a:	0549      	lsls	r1, r1, #21
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	61da      	str	r2, [r3, #28]
 8001d40:	4b50      	ldr	r3, [pc, #320]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d42:	69da      	ldr	r2, [r3, #28]
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	055b      	lsls	r3, r3, #21
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4e:	183b      	adds	r3, r7, r0
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b4c      	ldr	r3, [pc, #304]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	@ 0x80
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d11a      	bne.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d60:	4b49      	ldr	r3, [pc, #292]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b48      	ldr	r3, [pc, #288]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d66:	2180      	movs	r1, #128	@ 0x80
 8001d68:	0049      	lsls	r1, r1, #1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7fe fef5 	bl	8000b5c <HAL_GetTick>
 8001d72:	0003      	movs	r3, r0
 8001d74:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	e008      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d78:	f7fe fef0 	bl	8000b5c <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	@ 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e077      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	@ 0x80
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d96:	4b3b      	ldr	r3, [pc, #236]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d98:	6a1a      	ldr	r2, [r3, #32]
 8001d9a:	23c0      	movs	r3, #192	@ 0xc0
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d034      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	23c0      	movs	r3, #192	@ 0xc0
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d02c      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001db8:	4b32      	ldr	r3, [pc, #200]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a33      	ldr	r2, [pc, #204]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dc2:	4b30      	ldr	r3, [pc, #192]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dc4:	6a1a      	ldr	r2, [r3, #32]
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dc8:	2180      	movs	r1, #128	@ 0x80
 8001dca:	0249      	lsls	r1, r1, #9
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dd2:	6a1a      	ldr	r2, [r3, #32]
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dd6:	492e      	ldr	r1, [pc, #184]	@ (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ddc:	4b29      	ldr	r3, [pc, #164]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7fe feb7 	bl	8000b5c <HAL_GetTick>
 8001dee:	0003      	movs	r3, r0
 8001df0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	e009      	b.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7fe feb2 	bl	8000b5c <HAL_GetTick>
 8001df8:	0002      	movs	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	4a25      	ldr	r2, [pc, #148]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e038      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e08:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e12:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a1d      	ldr	r2, [pc, #116]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e26:	2317      	movs	r3, #23
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e32:	69da      	ldr	r2, [r3, #28]
 8001e34:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e36:	4918      	ldr	r1, [pc, #96]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	4013      	ands	r3, r2
 8001e44:	d009      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e46:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	4393      	bics	r3, r2
 8001e4e:	0019      	movs	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e56:	430a      	orrs	r2, r1
 8001e58:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	4013      	ands	r3, r2
 8001e62:	d009      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e64:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e68:	2210      	movs	r2, #16
 8001e6a:	4393      	bics	r3, r2
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b006      	add	sp, #24
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	fffffcff 	.word	0xfffffcff
 8001e90:	fffeffff 	.word	0xfffeffff
 8001e94:	00001388 	.word	0x00001388
 8001e98:	efffffff 	.word	0xefffffff

08001e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e044      	b.n	8001f38 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d107      	bne.n	8001ec6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2278      	movs	r2, #120	@ 0x78
 8001eba:	2100      	movs	r1, #0
 8001ebc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7fe fbd7 	bl	8000674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2224      	movs	r2, #36	@ 0x24
 8001eca:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	438a      	bics	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f000 fd78 	bl	80029dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f000 fc04 	bl	80026fc <UART_SetConfig>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e01c      	b.n	8001f38 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	490d      	ldr	r1, [pc, #52]	@ (8001f40 <HAL_UART_Init+0xa4>)
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2108      	movs	r1, #8
 8001f1a:	438a      	bics	r2, r1
 8001f1c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2101      	movs	r1, #1
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 fe07 	bl	8002b44 <UART_CheckIdleState>
 8001f36:	0003      	movs	r3, r0
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b002      	add	sp, #8
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	fffff7ff 	.word	0xfffff7ff

08001f44 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	@ 0x28
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	1dbb      	adds	r3, r7, #6
 8001f52:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2280      	movs	r2, #128	@ 0x80
 8001f58:	589b      	ldr	r3, [r3, r2]
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	d000      	beq.n	8001f60 <HAL_UART_Receive+0x1c>
 8001f5e:	e0d1      	b.n	8002104 <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_UART_Receive+0x2a>
 8001f66:	1dbb      	adds	r3, r7, #6
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0c9      	b.n	8002106 <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	2380      	movs	r3, #128	@ 0x80
 8001f78:	015b      	lsls	r3, r3, #5
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d109      	bne.n	8001f92 <HAL_UART_Receive+0x4e>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d105      	bne.n	8001f92 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d001      	beq.n	8001f92 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0b9      	b.n	8002106 <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2284      	movs	r2, #132	@ 0x84
 8001f96:	2100      	movs	r1, #0
 8001f98:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2280      	movs	r2, #128	@ 0x80
 8001f9e:	2122      	movs	r1, #34	@ 0x22
 8001fa0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fdd8 	bl	8000b5c <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1dba      	adds	r2, r7, #6
 8001fb4:	2158      	movs	r1, #88	@ 0x58
 8001fb6:	8812      	ldrh	r2, [r2, #0]
 8001fb8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1dba      	adds	r2, r7, #6
 8001fbe:	215a      	movs	r1, #90	@ 0x5a
 8001fc0:	8812      	ldrh	r2, [r2, #0]
 8001fc2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	015b      	lsls	r3, r3, #5
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d10d      	bne.n	8001fec <HAL_UART_Receive+0xa8>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d104      	bne.n	8001fe2 <HAL_UART_Receive+0x9e>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	225c      	movs	r2, #92	@ 0x5c
 8001fdc:	494c      	ldr	r1, [pc, #304]	@ (8002110 <HAL_UART_Receive+0x1cc>)
 8001fde:	5299      	strh	r1, [r3, r2]
 8001fe0:	e02e      	b.n	8002040 <HAL_UART_Receive+0xfc>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	225c      	movs	r2, #92	@ 0x5c
 8001fe6:	21ff      	movs	r1, #255	@ 0xff
 8001fe8:	5299      	strh	r1, [r3, r2]
 8001fea:	e029      	b.n	8002040 <HAL_UART_Receive+0xfc>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10d      	bne.n	8002010 <HAL_UART_Receive+0xcc>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d104      	bne.n	8002006 <HAL_UART_Receive+0xc2>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	225c      	movs	r2, #92	@ 0x5c
 8002000:	21ff      	movs	r1, #255	@ 0xff
 8002002:	5299      	strh	r1, [r3, r2]
 8002004:	e01c      	b.n	8002040 <HAL_UART_Receive+0xfc>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	225c      	movs	r2, #92	@ 0x5c
 800200a:	217f      	movs	r1, #127	@ 0x7f
 800200c:	5299      	strh	r1, [r3, r2]
 800200e:	e017      	b.n	8002040 <HAL_UART_Receive+0xfc>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	055b      	lsls	r3, r3, #21
 8002018:	429a      	cmp	r2, r3
 800201a:	d10d      	bne.n	8002038 <HAL_UART_Receive+0xf4>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d104      	bne.n	800202e <HAL_UART_Receive+0xea>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	225c      	movs	r2, #92	@ 0x5c
 8002028:	217f      	movs	r1, #127	@ 0x7f
 800202a:	5299      	strh	r1, [r3, r2]
 800202c:	e008      	b.n	8002040 <HAL_UART_Receive+0xfc>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	225c      	movs	r2, #92	@ 0x5c
 8002032:	213f      	movs	r1, #63	@ 0x3f
 8002034:	5299      	strh	r1, [r3, r2]
 8002036:	e003      	b.n	8002040 <HAL_UART_Receive+0xfc>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	225c      	movs	r2, #92	@ 0x5c
 800203c:	2100      	movs	r1, #0
 800203e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002040:	2312      	movs	r3, #18
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	215c      	movs	r1, #92	@ 0x5c
 8002048:	5a52      	ldrh	r2, [r2, r1]
 800204a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	015b      	lsls	r3, r3, #5
 8002054:	429a      	cmp	r2, r3
 8002056:	d108      	bne.n	800206a <HAL_UART_Receive+0x126>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d104      	bne.n	800206a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	e003      	b.n	8002072 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002072:	e03b      	b.n	80020ec <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	0013      	movs	r3, r2
 800207e:	2200      	movs	r2, #0
 8002080:	2120      	movs	r1, #32
 8002082:	f000 fe07 	bl	8002c94 <UART_WaitOnFlagUntilTimeout>
 8002086:	1e03      	subs	r3, r0, #0
 8002088:	d005      	beq.n	8002096 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2280      	movs	r2, #128	@ 0x80
 800208e:	2120      	movs	r1, #32
 8002090:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e037      	b.n	8002106 <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10e      	bne.n	80020ba <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2212      	movs	r2, #18
 80020a6:	18ba      	adds	r2, r7, r2
 80020a8:	8812      	ldrh	r2, [r2, #0]
 80020aa:	4013      	ands	r3, r2
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	3302      	adds	r3, #2
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	e00f      	b.n	80020da <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2212      	movs	r2, #18
 80020c6:	18ba      	adds	r2, r7, r2
 80020c8:	8812      	ldrh	r2, [r2, #0]
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	4013      	ands	r3, r2
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	3301      	adds	r3, #1
 80020d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	225a      	movs	r2, #90	@ 0x5a
 80020de:	5a9b      	ldrh	r3, [r3, r2]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b299      	uxth	r1, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	225a      	movs	r2, #90	@ 0x5a
 80020ea:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	225a      	movs	r2, #90	@ 0x5a
 80020f0:	5a9b      	ldrh	r3, [r3, r2]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1bd      	bne.n	8002074 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2280      	movs	r2, #128	@ 0x80
 80020fc:	2120      	movs	r1, #32
 80020fe:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 8002104:	2302      	movs	r3, #2
  }
}
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b008      	add	sp, #32
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			@ (mov r8, r8)
 8002110:	000001ff 	.word	0x000001ff

08002114 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b0ab      	sub	sp, #172	@ 0xac
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	22a4      	movs	r2, #164	@ 0xa4
 8002124:	18b9      	adds	r1, r7, r2
 8002126:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	20a0      	movs	r0, #160	@ 0xa0
 8002130:	1839      	adds	r1, r7, r0
 8002132:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	219c      	movs	r1, #156	@ 0x9c
 800213c:	1879      	adds	r1, r7, r1
 800213e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002140:	0011      	movs	r1, r2
 8002142:	18bb      	adds	r3, r7, r2
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a99      	ldr	r2, [pc, #612]	@ (80023ac <HAL_UART_IRQHandler+0x298>)
 8002148:	4013      	ands	r3, r2
 800214a:	2298      	movs	r2, #152	@ 0x98
 800214c:	18bc      	adds	r4, r7, r2
 800214e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002150:	18bb      	adds	r3, r7, r2
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d114      	bne.n	8002182 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002158:	187b      	adds	r3, r7, r1
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2220      	movs	r2, #32
 800215e:	4013      	ands	r3, r2
 8002160:	d00f      	beq.n	8002182 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002162:	183b      	adds	r3, r7, r0
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2220      	movs	r2, #32
 8002168:	4013      	ands	r3, r2
 800216a:	d00a      	beq.n	8002182 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002170:	2b00      	cmp	r3, #0
 8002172:	d100      	bne.n	8002176 <HAL_UART_IRQHandler+0x62>
 8002174:	e286      	b.n	8002684 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	0010      	movs	r0, r2
 800217e:	4798      	blx	r3
      }
      return;
 8002180:	e280      	b.n	8002684 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002182:	2398      	movs	r3, #152	@ 0x98
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d100      	bne.n	800218e <HAL_UART_IRQHandler+0x7a>
 800218c:	e114      	b.n	80023b8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800218e:	239c      	movs	r3, #156	@ 0x9c
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	d106      	bne.n	80021a8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800219a:	23a0      	movs	r3, #160	@ 0xa0
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a83      	ldr	r2, [pc, #524]	@ (80023b0 <HAL_UART_IRQHandler+0x29c>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	d100      	bne.n	80021a8 <HAL_UART_IRQHandler+0x94>
 80021a6:	e107      	b.n	80023b8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80021a8:	23a4      	movs	r3, #164	@ 0xa4
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2201      	movs	r2, #1
 80021b0:	4013      	ands	r3, r2
 80021b2:	d012      	beq.n	80021da <HAL_UART_IRQHandler+0xc6>
 80021b4:	23a0      	movs	r3, #160	@ 0xa0
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4013      	ands	r3, r2
 80021c0:	d00b      	beq.n	80021da <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2201      	movs	r2, #1
 80021c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2284      	movs	r2, #132	@ 0x84
 80021ce:	589b      	ldr	r3, [r3, r2]
 80021d0:	2201      	movs	r2, #1
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2184      	movs	r1, #132	@ 0x84
 80021d8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80021da:	23a4      	movs	r3, #164	@ 0xa4
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2202      	movs	r2, #2
 80021e2:	4013      	ands	r3, r2
 80021e4:	d011      	beq.n	800220a <HAL_UART_IRQHandler+0xf6>
 80021e6:	239c      	movs	r3, #156	@ 0x9c
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	d00b      	beq.n	800220a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2202      	movs	r2, #2
 80021f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2284      	movs	r2, #132	@ 0x84
 80021fe:	589b      	ldr	r3, [r3, r2]
 8002200:	2204      	movs	r2, #4
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2184      	movs	r1, #132	@ 0x84
 8002208:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800220a:	23a4      	movs	r3, #164	@ 0xa4
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2204      	movs	r2, #4
 8002212:	4013      	ands	r3, r2
 8002214:	d011      	beq.n	800223a <HAL_UART_IRQHandler+0x126>
 8002216:	239c      	movs	r3, #156	@ 0x9c
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2201      	movs	r2, #1
 800221e:	4013      	ands	r3, r2
 8002220:	d00b      	beq.n	800223a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2204      	movs	r2, #4
 8002228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2284      	movs	r2, #132	@ 0x84
 800222e:	589b      	ldr	r3, [r3, r2]
 8002230:	2202      	movs	r2, #2
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2184      	movs	r1, #132	@ 0x84
 8002238:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800223a:	23a4      	movs	r3, #164	@ 0xa4
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2208      	movs	r2, #8
 8002242:	4013      	ands	r3, r2
 8002244:	d017      	beq.n	8002276 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002246:	23a0      	movs	r3, #160	@ 0xa0
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2220      	movs	r2, #32
 800224e:	4013      	ands	r3, r2
 8002250:	d105      	bne.n	800225e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002252:	239c      	movs	r3, #156	@ 0x9c
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2201      	movs	r2, #1
 800225a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800225c:	d00b      	beq.n	8002276 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2208      	movs	r2, #8
 8002264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2284      	movs	r2, #132	@ 0x84
 800226a:	589b      	ldr	r3, [r3, r2]
 800226c:	2208      	movs	r2, #8
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2184      	movs	r1, #132	@ 0x84
 8002274:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002276:	23a4      	movs	r3, #164	@ 0xa4
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	@ 0x80
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	4013      	ands	r3, r2
 8002282:	d013      	beq.n	80022ac <HAL_UART_IRQHandler+0x198>
 8002284:	23a0      	movs	r3, #160	@ 0xa0
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	@ 0x80
 800228c:	04db      	lsls	r3, r3, #19
 800228e:	4013      	ands	r3, r2
 8002290:	d00c      	beq.n	80022ac <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2280      	movs	r2, #128	@ 0x80
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2284      	movs	r2, #132	@ 0x84
 80022a0:	589b      	ldr	r3, [r3, r2]
 80022a2:	2220      	movs	r2, #32
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2184      	movs	r1, #132	@ 0x84
 80022aa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2284      	movs	r2, #132	@ 0x84
 80022b0:	589b      	ldr	r3, [r3, r2]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d100      	bne.n	80022b8 <HAL_UART_IRQHandler+0x1a4>
 80022b6:	e1e7      	b.n	8002688 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80022b8:	23a4      	movs	r3, #164	@ 0xa4
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2220      	movs	r2, #32
 80022c0:	4013      	ands	r3, r2
 80022c2:	d00e      	beq.n	80022e2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80022c4:	23a0      	movs	r3, #160	@ 0xa0
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2220      	movs	r2, #32
 80022cc:	4013      	ands	r3, r2
 80022ce:	d008      	beq.n	80022e2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d004      	beq.n	80022e2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	0010      	movs	r0, r2
 80022e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2284      	movs	r2, #132	@ 0x84
 80022e6:	589b      	ldr	r3, [r3, r2]
 80022e8:	2194      	movs	r1, #148	@ 0x94
 80022ea:	187a      	adds	r2, r7, r1
 80022ec:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2240      	movs	r2, #64	@ 0x40
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b40      	cmp	r3, #64	@ 0x40
 80022fa:	d004      	beq.n	8002306 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80022fc:	187b      	adds	r3, r7, r1
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2228      	movs	r2, #40	@ 0x28
 8002302:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002304:	d047      	beq.n	8002396 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0018      	movs	r0, r3
 800230a:	f000 fdf7 	bl	8002efc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2240      	movs	r2, #64	@ 0x40
 8002316:	4013      	ands	r3, r2
 8002318:	2b40      	cmp	r3, #64	@ 0x40
 800231a:	d137      	bne.n	800238c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800231c:	f3ef 8310 	mrs	r3, PRIMASK
 8002320:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002324:	2090      	movs	r0, #144	@ 0x90
 8002326:	183a      	adds	r2, r7, r0
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	2301      	movs	r3, #1
 800232c:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800232e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002330:	f383 8810 	msr	PRIMASK, r3
}
 8002334:	46c0      	nop			@ (mov r8, r8)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2140      	movs	r1, #64	@ 0x40
 8002342:	438a      	bics	r2, r1
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	183b      	adds	r3, r7, r0
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800234c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800234e:	f383 8810 	msr	PRIMASK, r3
}
 8002352:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002358:	2b00      	cmp	r3, #0
 800235a:	d012      	beq.n	8002382 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002360:	4a14      	ldr	r2, [pc, #80]	@ (80023b4 <HAL_UART_IRQHandler+0x2a0>)
 8002362:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002368:	0018      	movs	r0, r3
 800236a:	f7fe fdc5 	bl	8000ef8 <HAL_DMA_Abort_IT>
 800236e:	1e03      	subs	r3, r0, #0
 8002370:	d01a      	beq.n	80023a8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800237c:	0018      	movs	r0, r3
 800237e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002380:	e012      	b.n	80023a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f000 f9a5 	bl	80026d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800238a:	e00d      	b.n	80023a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	0018      	movs	r0, r3
 8002390:	f000 f9a0 	bl	80026d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002394:	e008      	b.n	80023a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f000 f99b 	bl	80026d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2284      	movs	r2, #132	@ 0x84
 80023a2:	2100      	movs	r1, #0
 80023a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80023a6:	e16f      	b.n	8002688 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a8:	46c0      	nop			@ (mov r8, r8)
    return;
 80023aa:	e16d      	b.n	8002688 <HAL_UART_IRQHandler+0x574>
 80023ac:	0000080f 	.word	0x0000080f
 80023b0:	04000120 	.word	0x04000120
 80023b4:	080031b7 	.word	0x080031b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d000      	beq.n	80023c2 <HAL_UART_IRQHandler+0x2ae>
 80023c0:	e139      	b.n	8002636 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80023c2:	23a4      	movs	r3, #164	@ 0xa4
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2210      	movs	r2, #16
 80023ca:	4013      	ands	r3, r2
 80023cc:	d100      	bne.n	80023d0 <HAL_UART_IRQHandler+0x2bc>
 80023ce:	e132      	b.n	8002636 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80023d0:	23a0      	movs	r3, #160	@ 0xa0
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2210      	movs	r2, #16
 80023d8:	4013      	ands	r3, r2
 80023da:	d100      	bne.n	80023de <HAL_UART_IRQHandler+0x2ca>
 80023dc:	e12b      	b.n	8002636 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2210      	movs	r2, #16
 80023e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2240      	movs	r2, #64	@ 0x40
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b40      	cmp	r3, #64	@ 0x40
 80023f2:	d000      	beq.n	80023f6 <HAL_UART_IRQHandler+0x2e2>
 80023f4:	e09f      	b.n	8002536 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	217e      	movs	r1, #126	@ 0x7e
 8002400:	187b      	adds	r3, r7, r1
 8002402:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002404:	187b      	adds	r3, r7, r1
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d100      	bne.n	800240e <HAL_UART_IRQHandler+0x2fa>
 800240c:	e13e      	b.n	800268c <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2258      	movs	r2, #88	@ 0x58
 8002412:	5a9b      	ldrh	r3, [r3, r2]
 8002414:	187a      	adds	r2, r7, r1
 8002416:	8812      	ldrh	r2, [r2, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d300      	bcc.n	800241e <HAL_UART_IRQHandler+0x30a>
 800241c:	e136      	b.n	800268c <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	187a      	adds	r2, r7, r1
 8002422:	215a      	movs	r1, #90	@ 0x5a
 8002424:	8812      	ldrh	r2, [r2, #0]
 8002426:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b20      	cmp	r3, #32
 8002430:	d06f      	beq.n	8002512 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002432:	f3ef 8310 	mrs	r3, PRIMASK
 8002436:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800243a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800243c:	2301      	movs	r3, #1
 800243e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002442:	f383 8810 	msr	PRIMASK, r3
}
 8002446:	46c0      	nop			@ (mov r8, r8)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4992      	ldr	r1, [pc, #584]	@ (800269c <HAL_UART_IRQHandler+0x588>)
 8002454:	400a      	ands	r2, r1
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800245a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800245c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800245e:	f383 8810 	msr	PRIMASK, r3
}
 8002462:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002464:	f3ef 8310 	mrs	r3, PRIMASK
 8002468:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800246a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246c:	677b      	str	r3, [r7, #116]	@ 0x74
 800246e:	2301      	movs	r3, #1
 8002470:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002474:	f383 8810 	msr	PRIMASK, r3
}
 8002478:	46c0      	nop			@ (mov r8, r8)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	438a      	bics	r2, r1
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800248c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002490:	f383 8810 	msr	PRIMASK, r3
}
 8002494:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002496:	f3ef 8310 	mrs	r3, PRIMASK
 800249a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800249c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800249e:	673b      	str	r3, [r7, #112]	@ 0x70
 80024a0:	2301      	movs	r3, #1
 80024a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024a6:	f383 8810 	msr	PRIMASK, r3
}
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2140      	movs	r1, #64	@ 0x40
 80024b8:	438a      	bics	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024be:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024c2:	f383 8810 	msr	PRIMASK, r3
}
 80024c6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2280      	movs	r2, #128	@ 0x80
 80024cc:	2120      	movs	r1, #32
 80024ce:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024d6:	f3ef 8310 	mrs	r3, PRIMASK
 80024da:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80024dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024e0:	2301      	movs	r3, #1
 80024e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024e6:	f383 8810 	msr	PRIMASK, r3
}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2110      	movs	r1, #16
 80024f8:	438a      	bics	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002502:	f383 8810 	msr	PRIMASK, r3
}
 8002506:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800250c:	0018      	movs	r0, r3
 800250e:	f7fe fcbb 	bl	8000e88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2202      	movs	r2, #2
 8002516:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2258      	movs	r2, #88	@ 0x58
 800251c:	5a9a      	ldrh	r2, [r3, r2]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	215a      	movs	r1, #90	@ 0x5a
 8002522:	5a5b      	ldrh	r3, [r3, r1]
 8002524:	b29b      	uxth	r3, r3
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	b29a      	uxth	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	0011      	movs	r1, r2
 800252e:	0018      	movs	r0, r3
 8002530:	f000 f8d8 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002534:	e0aa      	b.n	800268c <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2258      	movs	r2, #88	@ 0x58
 800253a:	5a99      	ldrh	r1, [r3, r2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	225a      	movs	r2, #90	@ 0x5a
 8002540:	5a9b      	ldrh	r3, [r3, r2]
 8002542:	b29a      	uxth	r2, r3
 8002544:	208e      	movs	r0, #142	@ 0x8e
 8002546:	183b      	adds	r3, r7, r0
 8002548:	1a8a      	subs	r2, r1, r2
 800254a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	225a      	movs	r2, #90	@ 0x5a
 8002550:	5a9b      	ldrh	r3, [r3, r2]
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d100      	bne.n	800255a <HAL_UART_IRQHandler+0x446>
 8002558:	e09a      	b.n	8002690 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800255a:	183b      	adds	r3, r7, r0
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d100      	bne.n	8002564 <HAL_UART_IRQHandler+0x450>
 8002562:	e095      	b.n	8002690 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002564:	f3ef 8310 	mrs	r3, PRIMASK
 8002568:	60fb      	str	r3, [r7, #12]
  return(result);
 800256a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800256c:	2488      	movs	r4, #136	@ 0x88
 800256e:	193a      	adds	r2, r7, r4
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	2301      	movs	r3, #1
 8002574:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f383 8810 	msr	PRIMASK, r3
}
 800257c:	46c0      	nop			@ (mov r8, r8)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4945      	ldr	r1, [pc, #276]	@ (80026a0 <HAL_UART_IRQHandler+0x58c>)
 800258a:	400a      	ands	r2, r1
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	193b      	adds	r3, r7, r4
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f383 8810 	msr	PRIMASK, r3
}
 800259a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800259c:	f3ef 8310 	mrs	r3, PRIMASK
 80025a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80025a2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a4:	2484      	movs	r4, #132	@ 0x84
 80025a6:	193a      	adds	r2, r7, r4
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	2301      	movs	r3, #1
 80025ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f383 8810 	msr	PRIMASK, r3
}
 80025b4:	46c0      	nop			@ (mov r8, r8)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2101      	movs	r1, #1
 80025c2:	438a      	bics	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	f383 8810 	msr	PRIMASK, r3
}
 80025d2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2280      	movs	r2, #128	@ 0x80
 80025d8:	2120      	movs	r1, #32
 80025da:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e8:	f3ef 8310 	mrs	r3, PRIMASK
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025f0:	2480      	movs	r4, #128	@ 0x80
 80025f2:	193a      	adds	r2, r7, r4
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	2301      	movs	r3, #1
 80025f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fc:	f383 8810 	msr	PRIMASK, r3
}
 8002600:	46c0      	nop			@ (mov r8, r8)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2110      	movs	r1, #16
 800260e:	438a      	bics	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	193b      	adds	r3, r7, r4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800261a:	f383 8810 	msr	PRIMASK, r3
}
 800261e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002626:	183b      	adds	r3, r7, r0
 8002628:	881a      	ldrh	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	0011      	movs	r1, r2
 800262e:	0018      	movs	r0, r3
 8002630:	f000 f858 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002634:	e02c      	b.n	8002690 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002636:	23a4      	movs	r3, #164	@ 0xa4
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2280      	movs	r2, #128	@ 0x80
 800263e:	4013      	ands	r3, r2
 8002640:	d00f      	beq.n	8002662 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002642:	23a0      	movs	r3, #160	@ 0xa0
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2280      	movs	r2, #128	@ 0x80
 800264a:	4013      	ands	r3, r2
 800264c:	d009      	beq.n	8002662 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d01e      	beq.n	8002694 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	0010      	movs	r0, r2
 800265e:	4798      	blx	r3
    }
    return;
 8002660:	e018      	b.n	8002694 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002662:	23a4      	movs	r3, #164	@ 0xa4
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2240      	movs	r2, #64	@ 0x40
 800266a:	4013      	ands	r3, r2
 800266c:	d013      	beq.n	8002696 <HAL_UART_IRQHandler+0x582>
 800266e:	23a0      	movs	r3, #160	@ 0xa0
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2240      	movs	r2, #64	@ 0x40
 8002676:	4013      	ands	r3, r2
 8002678:	d00d      	beq.n	8002696 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	0018      	movs	r0, r3
 800267e:	f000 fdb1 	bl	80031e4 <UART_EndTransmit_IT>
    return;
 8002682:	e008      	b.n	8002696 <HAL_UART_IRQHandler+0x582>
      return;
 8002684:	46c0      	nop			@ (mov r8, r8)
 8002686:	e006      	b.n	8002696 <HAL_UART_IRQHandler+0x582>
    return;
 8002688:	46c0      	nop			@ (mov r8, r8)
 800268a:	e004      	b.n	8002696 <HAL_UART_IRQHandler+0x582>
      return;
 800268c:	46c0      	nop			@ (mov r8, r8)
 800268e:	e002      	b.n	8002696 <HAL_UART_IRQHandler+0x582>
      return;
 8002690:	46c0      	nop			@ (mov r8, r8)
 8002692:	e000      	b.n	8002696 <HAL_UART_IRQHandler+0x582>
    return;
 8002694:	46c0      	nop			@ (mov r8, r8)
  }

}
 8002696:	46bd      	mov	sp, r7
 8002698:	b02b      	add	sp, #172	@ 0xac
 800269a:	bd90      	pop	{r4, r7, pc}
 800269c:	fffffeff 	.word	0xfffffeff
 80026a0:	fffffedf 	.word	0xfffffedf

080026a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80026ac:	46c0      	nop			@ (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80026bc:	46c0      	nop			@ (mov r8, r8)
 80026be:	46bd      	mov	sp, r7
 80026c0:	b002      	add	sp, #8
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80026cc:	46c0      	nop			@ (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b002      	add	sp, #8
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80026dc:	46c0      	nop			@ (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	000a      	movs	r2, r1
 80026ee:	1cbb      	adds	r3, r7, #2
 80026f0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b002      	add	sp, #8
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002704:	231e      	movs	r3, #30
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4aa1      	ldr	r2, [pc, #644]	@ (80029b0 <UART_SetConfig+0x2b4>)
 800272c:	4013      	ands	r3, r2
 800272e:	0019      	movs	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4a9c      	ldr	r2, [pc, #624]	@ (80029b4 <UART_SetConfig+0x2b8>)
 8002742:	4013      	ands	r3, r2
 8002744:	0019      	movs	r1, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a93      	ldr	r2, [pc, #588]	@ (80029b8 <UART_SetConfig+0x2bc>)
 800276a:	4013      	ands	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	430a      	orrs	r2, r1
 8002776:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a8f      	ldr	r2, [pc, #572]	@ (80029bc <UART_SetConfig+0x2c0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d127      	bne.n	80027d2 <UART_SetConfig+0xd6>
 8002782:	4b8f      	ldr	r3, [pc, #572]	@ (80029c0 <UART_SetConfig+0x2c4>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	2203      	movs	r2, #3
 8002788:	4013      	ands	r3, r2
 800278a:	2b03      	cmp	r3, #3
 800278c:	d00d      	beq.n	80027aa <UART_SetConfig+0xae>
 800278e:	d81b      	bhi.n	80027c8 <UART_SetConfig+0xcc>
 8002790:	2b02      	cmp	r3, #2
 8002792:	d014      	beq.n	80027be <UART_SetConfig+0xc2>
 8002794:	d818      	bhi.n	80027c8 <UART_SetConfig+0xcc>
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <UART_SetConfig+0xa4>
 800279a:	2b01      	cmp	r3, #1
 800279c:	d00a      	beq.n	80027b4 <UART_SetConfig+0xb8>
 800279e:	e013      	b.n	80027c8 <UART_SetConfig+0xcc>
 80027a0:	231f      	movs	r3, #31
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e049      	b.n	800283e <UART_SetConfig+0x142>
 80027aa:	231f      	movs	r3, #31
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	e044      	b.n	800283e <UART_SetConfig+0x142>
 80027b4:	231f      	movs	r3, #31
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	2204      	movs	r2, #4
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	e03f      	b.n	800283e <UART_SetConfig+0x142>
 80027be:	231f      	movs	r3, #31
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	2208      	movs	r2, #8
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	e03a      	b.n	800283e <UART_SetConfig+0x142>
 80027c8:	231f      	movs	r3, #31
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	2210      	movs	r2, #16
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e035      	b.n	800283e <UART_SetConfig+0x142>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a7b      	ldr	r2, [pc, #492]	@ (80029c4 <UART_SetConfig+0x2c8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d104      	bne.n	80027e6 <UART_SetConfig+0xea>
 80027dc:	231f      	movs	r3, #31
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
 80027e4:	e02b      	b.n	800283e <UART_SetConfig+0x142>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a77      	ldr	r2, [pc, #476]	@ (80029c8 <UART_SetConfig+0x2cc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d104      	bne.n	80027fa <UART_SetConfig+0xfe>
 80027f0:	231f      	movs	r3, #31
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	e021      	b.n	800283e <UART_SetConfig+0x142>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a73      	ldr	r2, [pc, #460]	@ (80029cc <UART_SetConfig+0x2d0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d104      	bne.n	800280e <UART_SetConfig+0x112>
 8002804:	231f      	movs	r3, #31
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	e017      	b.n	800283e <UART_SetConfig+0x142>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6f      	ldr	r2, [pc, #444]	@ (80029d0 <UART_SetConfig+0x2d4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d104      	bne.n	8002822 <UART_SetConfig+0x126>
 8002818:	231f      	movs	r3, #31
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e00d      	b.n	800283e <UART_SetConfig+0x142>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6b      	ldr	r2, [pc, #428]	@ (80029d4 <UART_SetConfig+0x2d8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d104      	bne.n	8002836 <UART_SetConfig+0x13a>
 800282c:	231f      	movs	r3, #31
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e003      	b.n	800283e <UART_SetConfig+0x142>
 8002836:	231f      	movs	r3, #31
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2210      	movs	r2, #16
 800283c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	2380      	movs	r3, #128	@ 0x80
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	429a      	cmp	r2, r3
 8002848:	d15c      	bne.n	8002904 <UART_SetConfig+0x208>
  {
    switch (clocksource)
 800284a:	231f      	movs	r3, #31
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d015      	beq.n	8002880 <UART_SetConfig+0x184>
 8002854:	dc18      	bgt.n	8002888 <UART_SetConfig+0x18c>
 8002856:	2b04      	cmp	r3, #4
 8002858:	d00d      	beq.n	8002876 <UART_SetConfig+0x17a>
 800285a:	dc15      	bgt.n	8002888 <UART_SetConfig+0x18c>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <UART_SetConfig+0x16a>
 8002860:	2b02      	cmp	r3, #2
 8002862:	d005      	beq.n	8002870 <UART_SetConfig+0x174>
 8002864:	e010      	b.n	8002888 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002866:	f7ff fa35 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 800286a:	0003      	movs	r3, r0
 800286c:	61bb      	str	r3, [r7, #24]
        break;
 800286e:	e012      	b.n	8002896 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002870:	4b59      	ldr	r3, [pc, #356]	@ (80029d8 <UART_SetConfig+0x2dc>)
 8002872:	61bb      	str	r3, [r7, #24]
        break;
 8002874:	e00f      	b.n	8002896 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002876:	f7ff f9cb 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 800287a:	0003      	movs	r3, r0
 800287c:	61bb      	str	r3, [r7, #24]
        break;
 800287e:	e00a      	b.n	8002896 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002880:	2380      	movs	r3, #128	@ 0x80
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	61bb      	str	r3, [r7, #24]
        break;
 8002886:	e006      	b.n	8002896 <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800288c:	231e      	movs	r3, #30
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
        break;
 8002894:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d100      	bne.n	800289e <UART_SetConfig+0x1a2>
 800289c:	e07a      	b.n	8002994 <UART_SetConfig+0x298>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	005a      	lsls	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	18d2      	adds	r2, r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	0019      	movs	r1, r3
 80028b0:	0010      	movs	r0, r2
 80028b2:	f7fd fc27 	bl	8000104 <__udivsi3>
 80028b6:	0003      	movs	r3, r0
 80028b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b0f      	cmp	r3, #15
 80028be:	d91c      	bls.n	80028fa <UART_SetConfig+0x1fe>
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	2380      	movs	r3, #128	@ 0x80
 80028c4:	025b      	lsls	r3, r3, #9
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d217      	bcs.n	80028fa <UART_SetConfig+0x1fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	200e      	movs	r0, #14
 80028d0:	183b      	adds	r3, r7, r0
 80028d2:	210f      	movs	r1, #15
 80028d4:	438a      	bics	r2, r1
 80028d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2207      	movs	r2, #7
 80028e0:	4013      	ands	r3, r2
 80028e2:	b299      	uxth	r1, r3
 80028e4:	183b      	adds	r3, r7, r0
 80028e6:	183a      	adds	r2, r7, r0
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	183a      	adds	r2, r7, r0
 80028f4:	8812      	ldrh	r2, [r2, #0]
 80028f6:	60da      	str	r2, [r3, #12]
 80028f8:	e04c      	b.n	8002994 <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 80028fa:	231e      	movs	r3, #30
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	e047      	b.n	8002994 <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002904:	231f      	movs	r3, #31
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b08      	cmp	r3, #8
 800290c:	d015      	beq.n	800293a <UART_SetConfig+0x23e>
 800290e:	dc18      	bgt.n	8002942 <UART_SetConfig+0x246>
 8002910:	2b04      	cmp	r3, #4
 8002912:	d00d      	beq.n	8002930 <UART_SetConfig+0x234>
 8002914:	dc15      	bgt.n	8002942 <UART_SetConfig+0x246>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <UART_SetConfig+0x224>
 800291a:	2b02      	cmp	r3, #2
 800291c:	d005      	beq.n	800292a <UART_SetConfig+0x22e>
 800291e:	e010      	b.n	8002942 <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002920:	f7ff f9d8 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8002924:	0003      	movs	r3, r0
 8002926:	61bb      	str	r3, [r7, #24]
        break;
 8002928:	e012      	b.n	8002950 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800292a:	4b2b      	ldr	r3, [pc, #172]	@ (80029d8 <UART_SetConfig+0x2dc>)
 800292c:	61bb      	str	r3, [r7, #24]
        break;
 800292e:	e00f      	b.n	8002950 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002930:	f7ff f96e 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002934:	0003      	movs	r3, r0
 8002936:	61bb      	str	r3, [r7, #24]
        break;
 8002938:	e00a      	b.n	8002950 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800293a:	2380      	movs	r3, #128	@ 0x80
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	61bb      	str	r3, [r7, #24]
        break;
 8002940:	e006      	b.n	8002950 <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002946:	231e      	movs	r3, #30
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
        break;
 800294e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d01e      	beq.n	8002994 <UART_SetConfig+0x298>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	085a      	lsrs	r2, r3, #1
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	18d2      	adds	r2, r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	0019      	movs	r1, r3
 8002966:	0010      	movs	r0, r2
 8002968:	f7fd fbcc 	bl	8000104 <__udivsi3>
 800296c:	0003      	movs	r3, r0
 800296e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b0f      	cmp	r3, #15
 8002974:	d90a      	bls.n	800298c <UART_SetConfig+0x290>
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	025b      	lsls	r3, r3, #9
 800297c:	429a      	cmp	r2, r3
 800297e:	d205      	bcs.n	800298c <UART_SetConfig+0x290>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	b29a      	uxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	e003      	b.n	8002994 <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 800298c:	231e      	movs	r3, #30
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80029a0:	231e      	movs	r3, #30
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	781b      	ldrb	r3, [r3, #0]
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b008      	add	sp, #32
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	efff69f3 	.word	0xefff69f3
 80029b4:	ffffcfff 	.word	0xffffcfff
 80029b8:	fffff4ff 	.word	0xfffff4ff
 80029bc:	40013800 	.word	0x40013800
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40004400 	.word	0x40004400
 80029c8:	40004800 	.word	0x40004800
 80029cc:	40004c00 	.word	0x40004c00
 80029d0:	40005000 	.word	0x40005000
 80029d4:	40011400 	.word	0x40011400
 80029d8:	007a1200 	.word	0x007a1200

080029dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	2208      	movs	r2, #8
 80029ea:	4013      	ands	r3, r2
 80029ec:	d00b      	beq.n	8002a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002b20 <UART_AdvFeatureConfig+0x144>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d00b      	beq.n	8002a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4a43      	ldr	r2, [pc, #268]	@ (8002b24 <UART_AdvFeatureConfig+0x148>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d00b      	beq.n	8002a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a3b      	ldr	r2, [pc, #236]	@ (8002b28 <UART_AdvFeatureConfig+0x14c>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4e:	2204      	movs	r2, #4
 8002a50:	4013      	ands	r3, r2
 8002a52:	d00b      	beq.n	8002a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4a34      	ldr	r2, [pc, #208]	@ (8002b2c <UART_AdvFeatureConfig+0x150>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	0019      	movs	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	2210      	movs	r2, #16
 8002a72:	4013      	ands	r3, r2
 8002a74:	d00b      	beq.n	8002a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8002b30 <UART_AdvFeatureConfig+0x154>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	2220      	movs	r2, #32
 8002a94:	4013      	ands	r3, r2
 8002a96:	d00b      	beq.n	8002ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	4a25      	ldr	r2, [pc, #148]	@ (8002b34 <UART_AdvFeatureConfig+0x158>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	2240      	movs	r2, #64	@ 0x40
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d01d      	beq.n	8002af6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b38 <UART_AdvFeatureConfig+0x15c>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ad6:	2380      	movs	r3, #128	@ 0x80
 8002ad8:	035b      	lsls	r3, r3, #13
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d10b      	bne.n	8002af6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4a15      	ldr	r2, [pc, #84]	@ (8002b3c <UART_AdvFeatureConfig+0x160>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	0019      	movs	r1, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	2280      	movs	r2, #128	@ 0x80
 8002afc:	4013      	ands	r3, r2
 8002afe:	d00b      	beq.n	8002b18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4a0e      	ldr	r2, [pc, #56]	@ (8002b40 <UART_AdvFeatureConfig+0x164>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	605a      	str	r2, [r3, #4]
  }
}
 8002b18:	46c0      	nop			@ (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	ffff7fff 	.word	0xffff7fff
 8002b24:	fffdffff 	.word	0xfffdffff
 8002b28:	fffeffff 	.word	0xfffeffff
 8002b2c:	fffbffff 	.word	0xfffbffff
 8002b30:	ffffefff 	.word	0xffffefff
 8002b34:	ffffdfff 	.word	0xffffdfff
 8002b38:	ffefffff 	.word	0xffefffff
 8002b3c:	ff9fffff 	.word	0xff9fffff
 8002b40:	fff7ffff 	.word	0xfff7ffff

08002b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b092      	sub	sp, #72	@ 0x48
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2284      	movs	r2, #132	@ 0x84
 8002b50:	2100      	movs	r1, #0
 8002b52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b54:	f7fe f802 	bl	8000b5c <HAL_GetTick>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2208      	movs	r2, #8
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d12c      	bne.n	8002bc4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b6c:	2280      	movs	r2, #128	@ 0x80
 8002b6e:	0391      	lsls	r1, r2, #14
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4a46      	ldr	r2, [pc, #280]	@ (8002c8c <UART_CheckIdleState+0x148>)
 8002b74:	9200      	str	r2, [sp, #0]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f000 f88c 	bl	8002c94 <UART_WaitOnFlagUntilTimeout>
 8002b7c:	1e03      	subs	r3, r0, #0
 8002b7e:	d021      	beq.n	8002bc4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b80:	f3ef 8310 	mrs	r3, PRIMASK
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b90:	f383 8810 	msr	PRIMASK, r3
}
 8002b94:	46c0      	nop			@ (mov r8, r8)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2180      	movs	r1, #128	@ 0x80
 8002ba2:	438a      	bics	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bac:	f383 8810 	msr	PRIMASK, r3
}
 8002bb0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2278      	movs	r2, #120	@ 0x78
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e05f      	b.n	8002c84 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2204      	movs	r2, #4
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d146      	bne.n	8002c60 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bd4:	2280      	movs	r2, #128	@ 0x80
 8002bd6:	03d1      	lsls	r1, r2, #15
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4a2c      	ldr	r2, [pc, #176]	@ (8002c8c <UART_CheckIdleState+0x148>)
 8002bdc:	9200      	str	r2, [sp, #0]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f000 f858 	bl	8002c94 <UART_WaitOnFlagUntilTimeout>
 8002be4:	1e03      	subs	r3, r0, #0
 8002be6:	d03b      	beq.n	8002c60 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bec:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f383 8810 	msr	PRIMASK, r3
}
 8002bfc:	46c0      	nop			@ (mov r8, r8)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4921      	ldr	r1, [pc, #132]	@ (8002c90 <UART_CheckIdleState+0x14c>)
 8002c0a:	400a      	ands	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f383 8810 	msr	PRIMASK, r3
}
 8002c18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c20:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c22:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c24:	2301      	movs	r3, #1
 8002c26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f383 8810 	msr	PRIMASK, r3
}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	438a      	bics	r2, r1
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	f383 8810 	msr	PRIMASK, r3
}
 8002c4a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2280      	movs	r2, #128	@ 0x80
 8002c50:	2120      	movs	r1, #32
 8002c52:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2278      	movs	r2, #120	@ 0x78
 8002c58:	2100      	movs	r1, #0
 8002c5a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e011      	b.n	8002c84 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2280      	movs	r2, #128	@ 0x80
 8002c6a:	2120      	movs	r1, #32
 8002c6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2278      	movs	r2, #120	@ 0x78
 8002c7e:	2100      	movs	r1, #0
 8002c80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	0018      	movs	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b010      	add	sp, #64	@ 0x40
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	01ffffff 	.word	0x01ffffff
 8002c90:	fffffedf 	.word	0xfffffedf

08002c94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	1dfb      	adds	r3, r7, #7
 8002ca2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ca4:	e051      	b.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	d04e      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cac:	f7fd ff56 	bl	8000b5c <HAL_GetTick>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d302      	bcc.n	8002cc2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e051      	b.n	8002d6a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2204      	movs	r2, #4
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d03b      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b80      	cmp	r3, #128	@ 0x80
 8002cd6:	d038      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b40      	cmp	r3, #64	@ 0x40
 8002cdc:	d035      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d111      	bne.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 f900 	bl	8002efc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2284      	movs	r2, #132	@ 0x84
 8002d00:	2108      	movs	r1, #8
 8002d02:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2278      	movs	r2, #120	@ 0x78
 8002d08:	2100      	movs	r1, #0
 8002d0a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e02c      	b.n	8002d6a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	2380      	movs	r3, #128	@ 0x80
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d112      	bne.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2280      	movs	r2, #128	@ 0x80
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f000 f8e3 	bl	8002efc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2284      	movs	r2, #132	@ 0x84
 8002d3a:	2120      	movs	r1, #32
 8002d3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2278      	movs	r2, #120	@ 0x78
 8002d42:	2100      	movs	r1, #0
 8002d44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e00f      	b.n	8002d6a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	4013      	ands	r3, r2
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	425a      	negs	r2, r3
 8002d5a:	4153      	adcs	r3, r2
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	001a      	movs	r2, r3
 8002d60:	1dfb      	adds	r3, r7, #7
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d09e      	beq.n	8002ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b004      	add	sp, #16
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b090      	sub	sp, #64	@ 0x40
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	1dbb      	adds	r3, r7, #6
 8002d80:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1dba      	adds	r2, r7, #6
 8002d8c:	2158      	movs	r1, #88	@ 0x58
 8002d8e:	8812      	ldrh	r2, [r2, #0]
 8002d90:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2284      	movs	r2, #132	@ 0x84
 8002d96:	2100      	movs	r1, #0
 8002d98:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2280      	movs	r2, #128	@ 0x80
 8002d9e:	2122      	movs	r1, #34	@ 0x22
 8002da0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d028      	beq.n	8002dfc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dae:	4a3e      	ldr	r2, [pc, #248]	@ (8002ea8 <UART_Start_Receive_DMA+0x134>)
 8002db0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db6:	4a3d      	ldr	r2, [pc, #244]	@ (8002eac <UART_Start_Receive_DMA+0x138>)
 8002db8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dbe:	4a3c      	ldr	r2, [pc, #240]	@ (8002eb0 <UART_Start_Receive_DMA+0x13c>)
 8002dc0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3324      	adds	r3, #36	@ 0x24
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dda:	001a      	movs	r2, r3
 8002ddc:	1dbb      	adds	r3, r7, #6
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	f7fd ffec 	bl	8000dbc <HAL_DMA_Start_IT>
 8002de4:	1e03      	subs	r3, r0, #0
 8002de6:	d009      	beq.n	8002dfc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2284      	movs	r2, #132	@ 0x84
 8002dec:	2110      	movs	r1, #16
 8002dee:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2280      	movs	r2, #128	@ 0x80
 8002df4:	2120      	movs	r1, #32
 8002df6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e050      	b.n	8002e9e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d019      	beq.n	8002e38 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e04:	f3ef 8310 	mrs	r3, PRIMASK
 8002e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e0e:	2301      	movs	r3, #1
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e14:	f383 8810 	msr	PRIMASK, r3
}
 8002e18:	46c0      	nop			@ (mov r8, r8)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2180      	movs	r1, #128	@ 0x80
 8002e26:	0049      	lsls	r1, r1, #1
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e2e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e32:	f383 8810 	msr	PRIMASK, r3
}
 8002e36:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e38:	f3ef 8310 	mrs	r3, PRIMASK
 8002e3c:	613b      	str	r3, [r7, #16]
  return(result);
 8002e3e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e42:	2301      	movs	r3, #1
 8002e44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f383 8810 	msr	PRIMASK, r3
}
 8002e4c:	46c0      	nop			@ (mov r8, r8)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2101      	movs	r1, #1
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f383 8810 	msr	PRIMASK, r3
}
 8002e68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e6e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e70:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e74:	2301      	movs	r3, #1
 8002e76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	f383 8810 	msr	PRIMASK, r3
}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2140      	movs	r1, #64	@ 0x40
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	f383 8810 	msr	PRIMASK, r3
}
 8002e9a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b010      	add	sp, #64	@ 0x40
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	08002fc5 	.word	0x08002fc5
 8002eac:	080030f1 	.word	0x080030f1
 8002eb0:	08003133 	.word	0x08003133

08002eb4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ec2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f383 8810 	msr	PRIMASK, r3
}
 8002ed0:	46c0      	nop			@ (mov r8, r8)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	21c0      	movs	r1, #192	@ 0xc0
 8002ede:	438a      	bics	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f383 8810 	msr	PRIMASK, r3
}
 8002eec:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b006      	add	sp, #24
 8002efa:	bd80      	pop	{r7, pc}

08002efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08e      	sub	sp, #56	@ 0x38
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f04:	f3ef 8310 	mrs	r3, PRIMASK
 8002f08:	617b      	str	r3, [r7, #20]
  return(result);
 8002f0a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f0e:	2301      	movs	r3, #1
 8002f10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	f383 8810 	msr	PRIMASK, r3
}
 8002f18:	46c0      	nop			@ (mov r8, r8)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4926      	ldr	r1, [pc, #152]	@ (8002fc0 <UART_EndRxTransfer+0xc4>)
 8002f26:	400a      	ands	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f383 8810 	msr	PRIMASK, r3
}
 8002f34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f36:	f3ef 8310 	mrs	r3, PRIMASK
 8002f3a:	623b      	str	r3, [r7, #32]
  return(result);
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f40:	2301      	movs	r3, #1
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	f383 8810 	msr	PRIMASK, r3
}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2101      	movs	r1, #1
 8002f58:	438a      	bics	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f62:	f383 8810 	msr	PRIMASK, r3
}
 8002f66:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d118      	bne.n	8002fa2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f70:	f3ef 8310 	mrs	r3, PRIMASK
 8002f74:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f76:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f383 8810 	msr	PRIMASK, r3
}
 8002f84:	46c0      	nop			@ (mov r8, r8)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2110      	movs	r1, #16
 8002f92:	438a      	bics	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f383 8810 	msr	PRIMASK, r3
}
 8002fa0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2280      	movs	r2, #128	@ 0x80
 8002fa6:	2120      	movs	r1, #32
 8002fa8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002fb6:	46c0      	nop			@ (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b00e      	add	sp, #56	@ 0x38
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	fffffedf 	.word	0xfffffedf

08002fc4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b094      	sub	sp, #80	@ 0x50
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d06f      	beq.n	80030ba <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8002fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fdc:	225a      	movs	r2, #90	@ 0x5a
 8002fde:	2100      	movs	r1, #0
 8002fe0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fe8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fec:	2301      	movs	r3, #1
 8002fee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f383 8810 	msr	PRIMASK, r3
}
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	493a      	ldr	r1, [pc, #232]	@ (80030ec <UART_DMAReceiveCplt+0x128>)
 8003004:	400a      	ands	r2, r1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800300a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	f383 8810 	msr	PRIMASK, r3
}
 8003012:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003014:	f3ef 8310 	mrs	r3, PRIMASK
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301c:	647b      	str	r3, [r7, #68]	@ 0x44
 800301e:	2301      	movs	r3, #1
 8003020:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003024:	f383 8810 	msr	PRIMASK, r3
}
 8003028:	46c0      	nop			@ (mov r8, r8)
 800302a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	438a      	bics	r2, r1
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800303c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003040:	f383 8810 	msr	PRIMASK, r3
}
 8003044:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003046:	f3ef 8310 	mrs	r3, PRIMASK
 800304a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800304c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800304e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003050:	2301      	movs	r3, #1
 8003052:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003056:	f383 8810 	msr	PRIMASK, r3
}
 800305a:	46c0      	nop			@ (mov r8, r8)
 800305c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2140      	movs	r1, #64	@ 0x40
 8003068:	438a      	bics	r2, r1
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800306e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003072:	f383 8810 	msr	PRIMASK, r3
}
 8003076:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800307a:	2280      	movs	r2, #128	@ 0x80
 800307c:	2120      	movs	r1, #32
 800307e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003084:	2b01      	cmp	r3, #1
 8003086:	d118      	bne.n	80030ba <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003088:	f3ef 8310 	mrs	r3, PRIMASK
 800308c:	60fb      	str	r3, [r7, #12]
  return(result);
 800308e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003092:	2301      	movs	r3, #1
 8003094:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f383 8810 	msr	PRIMASK, r3
}
 800309c:	46c0      	nop			@ (mov r8, r8)
 800309e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2110      	movs	r1, #16
 80030aa:	438a      	bics	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f383 8810 	msr	PRIMASK, r3
}
 80030b8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030bc:	2200      	movs	r2, #0
 80030be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d108      	bne.n	80030da <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030ca:	2258      	movs	r2, #88	@ 0x58
 80030cc:	5a9a      	ldrh	r2, [r3, r2]
 80030ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030d0:	0011      	movs	r1, r2
 80030d2:	0018      	movs	r0, r3
 80030d4:	f7ff fb06 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030d8:	e003      	b.n	80030e2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80030da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030dc:	0018      	movs	r0, r3
 80030de:	f7ff fae9 	bl	80026b4 <HAL_UART_RxCpltCallback>
}
 80030e2:	46c0      	nop			@ (mov r8, r8)
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b014      	add	sp, #80	@ 0x50
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	fffffeff 	.word	0xfffffeff

080030f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003108:	2b01      	cmp	r3, #1
 800310a:	d10a      	bne.n	8003122 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2258      	movs	r2, #88	@ 0x58
 8003110:	5a9b      	ldrh	r3, [r3, r2]
 8003112:	085b      	lsrs	r3, r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	0011      	movs	r1, r2
 800311a:	0018      	movs	r0, r3
 800311c:	f7ff fae2 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003120:	e003      	b.n	800312a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	0018      	movs	r0, r3
 8003126:	f7ff facd 	bl	80026c4 <HAL_UART_RxHalfCpltCallback>
}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b004      	add	sp, #16
 8003130:	bd80      	pop	{r7, pc}

08003132 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003144:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2280      	movs	r2, #128	@ 0x80
 800314a:	589b      	ldr	r3, [r3, r2]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2280      	movs	r2, #128	@ 0x80
 8003156:	4013      	ands	r3, r2
 8003158:	2b80      	cmp	r3, #128	@ 0x80
 800315a:	d10a      	bne.n	8003172 <UART_DMAError+0x40>
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b21      	cmp	r3, #33	@ 0x21
 8003160:	d107      	bne.n	8003172 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2252      	movs	r2, #82	@ 0x52
 8003166:	2100      	movs	r1, #0
 8003168:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	0018      	movs	r0, r3
 800316e:	f7ff fea1 	bl	8002eb4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2240      	movs	r2, #64	@ 0x40
 800317a:	4013      	ands	r3, r2
 800317c:	2b40      	cmp	r3, #64	@ 0x40
 800317e:	d10a      	bne.n	8003196 <UART_DMAError+0x64>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b22      	cmp	r3, #34	@ 0x22
 8003184:	d107      	bne.n	8003196 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	225a      	movs	r2, #90	@ 0x5a
 800318a:	2100      	movs	r1, #0
 800318c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	0018      	movs	r0, r3
 8003192:	f7ff feb3 	bl	8002efc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2284      	movs	r2, #132	@ 0x84
 800319a:	589b      	ldr	r3, [r3, r2]
 800319c:	2210      	movs	r2, #16
 800319e:	431a      	orrs	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2184      	movs	r1, #132	@ 0x84
 80031a4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7ff fa93 	bl	80026d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031ae:	46c0      	nop			@ (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b006      	add	sp, #24
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	225a      	movs	r2, #90	@ 0x5a
 80031c8:	2100      	movs	r1, #0
 80031ca:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2252      	movs	r2, #82	@ 0x52
 80031d0:	2100      	movs	r1, #0
 80031d2:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	0018      	movs	r0, r3
 80031d8:	f7ff fa7c 	bl	80026d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031dc:	46c0      	nop			@ (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	b004      	add	sp, #16
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ec:	f3ef 8310 	mrs	r3, PRIMASK
 80031f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80031f2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	2301      	movs	r3, #1
 80031f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f383 8810 	msr	PRIMASK, r3
}
 8003200:	46c0      	nop			@ (mov r8, r8)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2140      	movs	r1, #64	@ 0x40
 800320e:	438a      	bics	r2, r1
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f383 8810 	msr	PRIMASK, r3
}
 800321c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f7ff fa39 	bl	80026a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	46bd      	mov	sp, r7
 8003236:	b006      	add	sp, #24
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800323a:	b5b0      	push	{r4, r5, r7, lr}
 800323c:	b08a      	sub	sp, #40	@ 0x28
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	1dbb      	adds	r3, r7, #6
 8003246:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2280      	movs	r2, #128	@ 0x80
 800324c:	589b      	ldr	r3, [r3, r2]
 800324e:	2b20      	cmp	r3, #32
 8003250:	d156      	bne.n	8003300 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003258:	1dbb      	adds	r3, r7, #6
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e04e      	b.n	8003302 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	2380      	movs	r3, #128	@ 0x80
 800326a:	015b      	lsls	r3, r3, #5
 800326c:	429a      	cmp	r2, r3
 800326e:	d109      	bne.n	8003284 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2201      	movs	r2, #1
 800327c:	4013      	ands	r3, r2
 800327e:	d001      	beq.n	8003284 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e03e      	b.n	8003302 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003290:	2527      	movs	r5, #39	@ 0x27
 8003292:	197c      	adds	r4, r7, r5
 8003294:	1dbb      	adds	r3, r7, #6
 8003296:	881a      	ldrh	r2, [r3, #0]
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	0018      	movs	r0, r3
 800329e:	f7ff fd69 	bl	8002d74 <UART_Start_Receive_DMA>
 80032a2:	0003      	movs	r3, r0
 80032a4:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80032a6:	197b      	adds	r3, r7, r5
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d124      	bne.n	80032f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d11c      	bne.n	80032f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2210      	movs	r2, #16
 80032bc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032be:	f3ef 8310 	mrs	r3, PRIMASK
 80032c2:	617b      	str	r3, [r7, #20]
  return(result);
 80032c4:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c6:	623b      	str	r3, [r7, #32]
 80032c8:	2301      	movs	r3, #1
 80032ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	f383 8810 	msr	PRIMASK, r3
}
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2110      	movs	r1, #16
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f383 8810 	msr	PRIMASK, r3
}
 80032ee:	e003      	b.n	80032f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80032f0:	2327      	movs	r3, #39	@ 0x27
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80032f8:	2327      	movs	r3, #39	@ 0x27
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	e000      	b.n	8003302 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	0018      	movs	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	b00a      	add	sp, #40	@ 0x28
 8003308:	bdb0      	pop	{r4, r5, r7, pc}

0800330a <memset>:
 800330a:	0003      	movs	r3, r0
 800330c:	1882      	adds	r2, r0, r2
 800330e:	4293      	cmp	r3, r2
 8003310:	d100      	bne.n	8003314 <memset+0xa>
 8003312:	4770      	bx	lr
 8003314:	7019      	strb	r1, [r3, #0]
 8003316:	3301      	adds	r3, #1
 8003318:	e7f9      	b.n	800330e <memset+0x4>
	...

0800331c <__libc_init_array>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	2600      	movs	r6, #0
 8003320:	4c0c      	ldr	r4, [pc, #48]	@ (8003354 <__libc_init_array+0x38>)
 8003322:	4d0d      	ldr	r5, [pc, #52]	@ (8003358 <__libc_init_array+0x3c>)
 8003324:	1b64      	subs	r4, r4, r5
 8003326:	10a4      	asrs	r4, r4, #2
 8003328:	42a6      	cmp	r6, r4
 800332a:	d109      	bne.n	8003340 <__libc_init_array+0x24>
 800332c:	2600      	movs	r6, #0
 800332e:	f000 f819 	bl	8003364 <_init>
 8003332:	4c0a      	ldr	r4, [pc, #40]	@ (800335c <__libc_init_array+0x40>)
 8003334:	4d0a      	ldr	r5, [pc, #40]	@ (8003360 <__libc_init_array+0x44>)
 8003336:	1b64      	subs	r4, r4, r5
 8003338:	10a4      	asrs	r4, r4, #2
 800333a:	42a6      	cmp	r6, r4
 800333c:	d105      	bne.n	800334a <__libc_init_array+0x2e>
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	00b3      	lsls	r3, r6, #2
 8003342:	58eb      	ldr	r3, [r5, r3]
 8003344:	4798      	blx	r3
 8003346:	3601      	adds	r6, #1
 8003348:	e7ee      	b.n	8003328 <__libc_init_array+0xc>
 800334a:	00b3      	lsls	r3, r6, #2
 800334c:	58eb      	ldr	r3, [r5, r3]
 800334e:	4798      	blx	r3
 8003350:	3601      	adds	r6, #1
 8003352:	e7f2      	b.n	800333a <__libc_init_array+0x1e>
 8003354:	080033b4 	.word	0x080033b4
 8003358:	080033b4 	.word	0x080033b4
 800335c:	080033b8 	.word	0x080033b8
 8003360:	080033b4 	.word	0x080033b4

08003364 <_init>:
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336a:	bc08      	pop	{r3}
 800336c:	469e      	mov	lr, r3
 800336e:	4770      	bx	lr

08003370 <_fini>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	46c0      	nop			@ (mov r8, r8)
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr
