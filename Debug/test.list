
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003918  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080039d4  080039d4  000049d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a0c  08003a0c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003a0c  08003a0c  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003a0c  08003a0c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a0c  08003a0c  00004a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a10  08003a10  00004a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a14  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000000c  08003a20  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08003a20  000053cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d03  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d1  00000000  00000000  0000dd37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000f708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000539  00000000  00000000  0000fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fab7  00000000  00000000  00010311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c6d  00000000  00000000  0001fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ff50  00000000  00000000  00029a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00089985  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001698  00000000  00000000  000899c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0008b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080039bc 	.word	0x080039bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080039bc 	.word	0x080039bc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000220:	f000 fcdc 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f884 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 fa22 	bl	8000670 <MX_GPIO_Init>
  MX_DMA_Init();
 800022c:	f000 fa02 	bl	8000634 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000230:	f000 f8e0 	bl	80003f4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000234:	f000 f90e 	bl	8000454 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000238:	f000 f93c 	bl	80004b4 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800023c:	f000 f96a 	bl	8000514 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 8000240:	f000 f998 	bl	8000574 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 8000244:	f000 f9c6 	bl	80005d4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART1_RxBuffer, 19);
 8000248:	490a      	ldr	r1, [pc, #40]	@ (8000274 <main+0x58>)
 800024a:	4b0b      	ldr	r3, [pc, #44]	@ (8000278 <main+0x5c>)
 800024c:	2213      	movs	r2, #19
 800024e:	0018      	movs	r0, r3
 8000250:	f003 fb20 	bl	8003894 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000254:	4b09      	ldr	r3, [pc, #36]	@ (800027c <main+0x60>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <main+0x60>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2104      	movs	r1, #4
 8000260:	438a      	bics	r2, r1
 8000262:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_IT(&huart5, rx5_data, 20);
 8000264:	4906      	ldr	r1, [pc, #24]	@ (8000280 <main+0x64>)
 8000266:	4b07      	ldr	r3, [pc, #28]	@ (8000284 <main+0x68>)
 8000268:	2214      	movs	r2, #20
 800026a:	0018      	movs	r0, r3
 800026c:	f003 faae 	bl	80037cc <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000270:	46c0      	nop			@ (mov r8, r8)
 8000272:	e7fd      	b.n	8000270 <main+0x54>
 8000274:	20000028 	.word	0x20000028
 8000278:	20000054 	.word	0x20000054
 800027c:	20000384 	.word	0x20000384
 8000280:	20000040 	.word	0x20000040
 8000284:	20000274 	.word	0x20000274

08000288 <HAL_UARTEx_RxEventCallback>:

  /* USER CODE END 3 */
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	000a      	movs	r2, r1
 8000292:	1cbb      	adds	r3, r7, #2
 8000294:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART1)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a1c      	ldr	r2, [pc, #112]	@ (800030c <HAL_UARTEx_RxEventCallback+0x84>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d11a      	bne.n	80002d6 <HAL_UARTEx_RxEventCallback+0x4e>
	{
    RxDataLen = Size;
 80002a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000310 <HAL_UARTEx_RxEventCallback+0x88>)
 80002a2:	1cba      	adds	r2, r7, #2
 80002a4:	8812      	ldrh	r2, [r2, #0]
 80002a6:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart4, UART1_RxBuffer, RxDataLen, 500);
 80002a8:	4b19      	ldr	r3, [pc, #100]	@ (8000310 <HAL_UARTEx_RxEventCallback+0x88>)
 80002aa:	881a      	ldrh	r2, [r3, #0]
 80002ac:	23fa      	movs	r3, #250	@ 0xfa
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	4918      	ldr	r1, [pc, #96]	@ (8000314 <HAL_UARTEx_RxEventCallback+0x8c>)
 80002b2:	4819      	ldr	r0, [pc, #100]	@ (8000318 <HAL_UARTEx_RxEventCallback+0x90>)
 80002b4:	f001 fee0 	bl	8002078 <HAL_UART_Transmit>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART1_RxBuffer, 19);
 80002b8:	4916      	ldr	r1, [pc, #88]	@ (8000314 <HAL_UARTEx_RxEventCallback+0x8c>)
 80002ba:	4b18      	ldr	r3, [pc, #96]	@ (800031c <HAL_UARTEx_RxEventCallback+0x94>)
 80002bc:	2213      	movs	r2, #19
 80002be:	0018      	movs	r0, r3
 80002c0:	f003 fae8 	bl	8003894 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80002c4:	4b16      	ldr	r3, [pc, #88]	@ (8000320 <HAL_UARTEx_RxEventCallback+0x98>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <HAL_UARTEx_RxEventCallback+0x98>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2104      	movs	r1, #4
 80002d0:	438a      	bics	r2, r1
 80002d2:	601a      	str	r2, [r3, #0]
	RxDataLen = Size;
	HAL_UART_Transmit(&huart4, rx5_data, RxDataLen, 100);
    HAL_UARTEx_ReceiveToIdle_IT(&huart5, rx5_data, 20);
	};

}
 80002d4:	e015      	b.n	8000302 <HAL_UARTEx_RxEventCallback+0x7a>
	else if (huart->Instance == USART5)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a12      	ldr	r2, [pc, #72]	@ (8000324 <HAL_UARTEx_RxEventCallback+0x9c>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d110      	bne.n	8000302 <HAL_UARTEx_RxEventCallback+0x7a>
	RxDataLen = Size;
 80002e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000310 <HAL_UARTEx_RxEventCallback+0x88>)
 80002e2:	1cba      	adds	r2, r7, #2
 80002e4:	8812      	ldrh	r2, [r2, #0]
 80002e6:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart4, rx5_data, RxDataLen, 100);
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <HAL_UARTEx_RxEventCallback+0x88>)
 80002ea:	881a      	ldrh	r2, [r3, #0]
 80002ec:	490e      	ldr	r1, [pc, #56]	@ (8000328 <HAL_UARTEx_RxEventCallback+0xa0>)
 80002ee:	480a      	ldr	r0, [pc, #40]	@ (8000318 <HAL_UARTEx_RxEventCallback+0x90>)
 80002f0:	2364      	movs	r3, #100	@ 0x64
 80002f2:	f001 fec1 	bl	8002078 <HAL_UART_Transmit>
    HAL_UARTEx_ReceiveToIdle_IT(&huart5, rx5_data, 20);
 80002f6:	490c      	ldr	r1, [pc, #48]	@ (8000328 <HAL_UARTEx_RxEventCallback+0xa0>)
 80002f8:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <HAL_UARTEx_RxEventCallback+0xa4>)
 80002fa:	2214      	movs	r2, #20
 80002fc:	0018      	movs	r0, r3
 80002fe:	f003 fa65 	bl	80037cc <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000302:	46c0      	nop			@ (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	b002      	add	sp, #8
 8000308:	bd80      	pop	{r7, pc}
 800030a:	46c0      	nop			@ (mov r8, r8)
 800030c:	40013800 	.word	0x40013800
 8000310:	2000003c 	.word	0x2000003c
 8000314:	20000028 	.word	0x20000028
 8000318:	200001ec 	.word	0x200001ec
 800031c:	20000054 	.word	0x20000054
 8000320:	20000384 	.word	0x20000384
 8000324:	40005000 	.word	0x40005000
 8000328:	20000040 	.word	0x20000040
 800032c:	20000274 	.word	0x20000274

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b590      	push	{r4, r7, lr}
 8000332:	b095      	sub	sp, #84	@ 0x54
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	2420      	movs	r4, #32
 8000338:	193b      	adds	r3, r7, r4
 800033a:	0018      	movs	r0, r3
 800033c:	2330      	movs	r3, #48	@ 0x30
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f003 fb0f 	bl	8003964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000346:	2310      	movs	r3, #16
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	0018      	movs	r0, r3
 800034c:	2310      	movs	r3, #16
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f003 fb07 	bl	8003964 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000356:	003b      	movs	r3, r7
 8000358:	0018      	movs	r0, r3
 800035a:	2310      	movs	r3, #16
 800035c:	001a      	movs	r2, r3
 800035e:	2100      	movs	r1, #0
 8000360:	f003 fb00 	bl	8003964 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000364:	0021      	movs	r1, r4
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2202      	movs	r2, #2
 800036a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2201      	movs	r2, #1
 8000370:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2210      	movs	r2, #16
 8000376:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2202      	movs	r2, #2
 800037c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2280      	movs	r2, #128	@ 0x80
 8000382:	0212      	lsls	r2, r2, #8
 8000384:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2280      	movs	r2, #128	@ 0x80
 800038a:	0352      	lsls	r2, r2, #13
 800038c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800038e:	187b      	adds	r3, r7, r1
 8000390:	2200      	movs	r2, #0
 8000392:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000394:	187b      	adds	r3, r7, r1
 8000396:	0018      	movs	r0, r3
 8000398:	f001 f8e8 	bl	800156c <HAL_RCC_OscConfig>
 800039c:	1e03      	subs	r3, r0, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80003a0:	f000 f99a 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a4:	2110      	movs	r1, #16
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2207      	movs	r2, #7
 80003aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2202      	movs	r2, #2
 80003b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2101      	movs	r1, #1
 80003c2:	0018      	movs	r0, r3
 80003c4:	f001 fbf0 	bl	8001ba8 <HAL_RCC_ClockConfig>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80003cc:	f000 f984 	bl	80006d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003d0:	003b      	movs	r3, r7
 80003d2:	2201      	movs	r2, #1
 80003d4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003d6:	003b      	movs	r3, r7
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003dc:	003b      	movs	r3, r7
 80003de:	0018      	movs	r0, r3
 80003e0:	f001 fd28 	bl	8001e34 <HAL_RCCEx_PeriphCLKConfig>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80003e8:	f000 f976 	bl	80006d8 <Error_Handler>
  }
}
 80003ec:	46c0      	nop			@ (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b015      	add	sp, #84	@ 0x54
 80003f2:	bd90      	pop	{r4, r7, pc}

080003f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f8:	4b14      	ldr	r3, [pc, #80]	@ (800044c <MX_USART1_UART_Init+0x58>)
 80003fa:	4a15      	ldr	r2, [pc, #84]	@ (8000450 <MX_USART1_UART_Init+0x5c>)
 80003fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003fe:	4b13      	ldr	r3, [pc, #76]	@ (800044c <MX_USART1_UART_Init+0x58>)
 8000400:	2296      	movs	r2, #150	@ 0x96
 8000402:	0192      	lsls	r2, r2, #6
 8000404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000406:	4b11      	ldr	r3, [pc, #68]	@ (800044c <MX_USART1_UART_Init+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800040c:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <MX_USART1_UART_Init+0x58>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000412:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <MX_USART1_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000418:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <MX_USART1_UART_Init+0x58>)
 800041a:	220c      	movs	r2, #12
 800041c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041e:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <MX_USART1_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	4b09      	ldr	r3, [pc, #36]	@ (800044c <MX_USART1_UART_Init+0x58>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800042a:	4b08      	ldr	r3, [pc, #32]	@ (800044c <MX_USART1_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000430:	4b06      	ldr	r3, [pc, #24]	@ (800044c <MX_USART1_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000436:	4b05      	ldr	r3, [pc, #20]	@ (800044c <MX_USART1_UART_Init+0x58>)
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fdc9 	bl	8001fd0 <HAL_UART_Init>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000442:	f000 f949 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000446:	46c0      	nop			@ (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000054 	.word	0x20000054
 8000450:	40013800 	.word	0x40013800

08000454 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000458:	4b14      	ldr	r3, [pc, #80]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 800045a:	4a15      	ldr	r2, [pc, #84]	@ (80004b0 <MX_USART2_UART_Init+0x5c>)
 800045c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800045e:	4b13      	ldr	r3, [pc, #76]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 8000460:	2296      	movs	r2, #150	@ 0x96
 8000462:	0192      	lsls	r2, r2, #6
 8000464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800046c:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000478:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 800047a:	220c      	movs	r2, #12
 800047c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047e:	4b0b      	ldr	r3, [pc, #44]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000484:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800048a:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000490:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000496:	4b05      	ldr	r3, [pc, #20]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fd99 	bl	8001fd0 <HAL_UART_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004a2:	f000 f919 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200000dc 	.word	0x200000dc
 80004b0:	40004400 	.word	0x40004400

080004b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004b8:	4b14      	ldr	r3, [pc, #80]	@ (800050c <MX_USART3_UART_Init+0x58>)
 80004ba:	4a15      	ldr	r2, [pc, #84]	@ (8000510 <MX_USART3_UART_Init+0x5c>)
 80004bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80004be:	4b13      	ldr	r3, [pc, #76]	@ (800050c <MX_USART3_UART_Init+0x58>)
 80004c0:	2296      	movs	r2, #150	@ 0x96
 80004c2:	0192      	lsls	r2, r2, #6
 80004c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004c6:	4b11      	ldr	r3, [pc, #68]	@ (800050c <MX_USART3_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <MX_USART3_UART_Init+0x58>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <MX_USART3_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <MX_USART3_UART_Init+0x58>)
 80004da:	220c      	movs	r2, #12
 80004dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004de:	4b0b      	ldr	r3, [pc, #44]	@ (800050c <MX_USART3_UART_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e4:	4b09      	ldr	r3, [pc, #36]	@ (800050c <MX_USART3_UART_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ea:	4b08      	ldr	r3, [pc, #32]	@ (800050c <MX_USART3_UART_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f0:	4b06      	ldr	r3, [pc, #24]	@ (800050c <MX_USART3_UART_Init+0x58>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004f6:	4b05      	ldr	r3, [pc, #20]	@ (800050c <MX_USART3_UART_Init+0x58>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f001 fd69 	bl	8001fd0 <HAL_UART_Init>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000502:	f000 f8e9 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000164 	.word	0x20000164
 8000510:	40004800 	.word	0x40004800

08000514 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000518:	4b14      	ldr	r3, [pc, #80]	@ (800056c <MX_USART4_UART_Init+0x58>)
 800051a:	4a15      	ldr	r2, [pc, #84]	@ (8000570 <MX_USART4_UART_Init+0x5c>)
 800051c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800051e:	4b13      	ldr	r3, [pc, #76]	@ (800056c <MX_USART4_UART_Init+0x58>)
 8000520:	2296      	movs	r2, #150	@ 0x96
 8000522:	0192      	lsls	r2, r2, #6
 8000524:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000526:	4b11      	ldr	r3, [pc, #68]	@ (800056c <MX_USART4_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800052c:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <MX_USART4_UART_Init+0x58>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <MX_USART4_UART_Init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <MX_USART4_UART_Init+0x58>)
 800053a:	220c      	movs	r2, #12
 800053c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <MX_USART4_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <MX_USART4_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <MX_USART4_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <MX_USART4_UART_Init+0x58>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000556:	4b05      	ldr	r3, [pc, #20]	@ (800056c <MX_USART4_UART_Init+0x58>)
 8000558:	0018      	movs	r0, r3
 800055a:	f001 fd39 	bl	8001fd0 <HAL_UART_Init>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8000562:	f000 f8b9 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	200001ec 	.word	0x200001ec
 8000570:	40004c00 	.word	0x40004c00

08000574 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000578:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <MX_USART5_UART_Init+0x58>)
 800057a:	4a15      	ldr	r2, [pc, #84]	@ (80005d0 <MX_USART5_UART_Init+0x5c>)
 800057c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800057e:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <MX_USART5_UART_Init+0x58>)
 8000580:	2296      	movs	r2, #150	@ 0x96
 8000582:	0192      	lsls	r2, r2, #6
 8000584:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000586:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <MX_USART5_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800058c:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <MX_USART5_UART_Init+0x58>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <MX_USART5_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000598:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <MX_USART5_UART_Init+0x58>)
 800059a:	220c      	movs	r2, #12
 800059c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <MX_USART5_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <MX_USART5_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <MX_USART5_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <MX_USART5_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80005b6:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <MX_USART5_UART_Init+0x58>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fd09 	bl	8001fd0 <HAL_UART_Init>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 80005c2:	f000 f889 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000274 	.word	0x20000274
 80005d0:	40005000 	.word	0x40005000

080005d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80005d8:	4b14      	ldr	r3, [pc, #80]	@ (800062c <MX_USART6_UART_Init+0x58>)
 80005da:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <MX_USART6_UART_Init+0x5c>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80005de:	4b13      	ldr	r3, [pc, #76]	@ (800062c <MX_USART6_UART_Init+0x58>)
 80005e0:	2296      	movs	r2, #150	@ 0x96
 80005e2:	0192      	lsls	r2, r2, #6
 80005e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_USART6_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <MX_USART6_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <MX_USART6_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <MX_USART6_UART_Init+0x58>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <MX_USART6_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b09      	ldr	r3, [pc, #36]	@ (800062c <MX_USART6_UART_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060a:	4b08      	ldr	r3, [pc, #32]	@ (800062c <MX_USART6_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <MX_USART6_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000616:	4b05      	ldr	r3, [pc, #20]	@ (800062c <MX_USART6_UART_Init+0x58>)
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fcd9 	bl	8001fd0 <HAL_UART_Init>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000622:	f000 f859 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200002fc 	.word	0x200002fc
 8000630:	40011400 	.word	0x40011400

08000634 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800063a:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <MX_DMA_Init+0x38>)
 800063c:	695a      	ldr	r2, [r3, #20]
 800063e:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <MX_DMA_Init+0x38>)
 8000640:	2101      	movs	r1, #1
 8000642:	430a      	orrs	r2, r1
 8000644:	615a      	str	r2, [r3, #20]
 8000646:	4b09      	ldr	r3, [pc, #36]	@ (800066c <MX_DMA_Init+0x38>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	2201      	movs	r2, #1
 800064c:	4013      	ands	r3, r2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2009      	movs	r0, #9
 8000658:	f000 fbd0 	bl	8000dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800065c:	2009      	movs	r0, #9
 800065e:	f000 fbe2 	bl	8000e26 <HAL_NVIC_EnableIRQ>

}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	40021000 	.word	0x40021000

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000676:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <MX_GPIO_Init+0x64>)
 8000678:	695a      	ldr	r2, [r3, #20]
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <MX_GPIO_Init+0x64>)
 800067c:	2180      	movs	r1, #128	@ 0x80
 800067e:	03c9      	lsls	r1, r1, #15
 8000680:	430a      	orrs	r2, r1
 8000682:	615a      	str	r2, [r3, #20]
 8000684:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <MX_GPIO_Init+0x64>)
 8000686:	695a      	ldr	r2, [r3, #20]
 8000688:	2380      	movs	r3, #128	@ 0x80
 800068a:	03db      	lsls	r3, r3, #15
 800068c:	4013      	ands	r3, r2
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_GPIO_Init+0x64>)
 8000694:	695a      	ldr	r2, [r3, #20]
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_GPIO_Init+0x64>)
 8000698:	2180      	movs	r1, #128	@ 0x80
 800069a:	0289      	lsls	r1, r1, #10
 800069c:	430a      	orrs	r2, r1
 800069e:	615a      	str	r2, [r3, #20]
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_GPIO_Init+0x64>)
 80006a2:	695a      	ldr	r2, [r3, #20]
 80006a4:	2380      	movs	r3, #128	@ 0x80
 80006a6:	029b      	lsls	r3, r3, #10
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_GPIO_Init+0x64>)
 80006b0:	695a      	ldr	r2, [r3, #20]
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <MX_GPIO_Init+0x64>)
 80006b4:	2180      	movs	r1, #128	@ 0x80
 80006b6:	02c9      	lsls	r1, r1, #11
 80006b8:	430a      	orrs	r2, r1
 80006ba:	615a      	str	r2, [r3, #20]
 80006bc:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <MX_GPIO_Init+0x64>)
 80006be:	695a      	ldr	r2, [r3, #20]
 80006c0:	2380      	movs	r3, #128	@ 0x80
 80006c2:	02db      	lsls	r3, r3, #11
 80006c4:	4013      	ands	r3, r2
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b004      	add	sp, #16
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	40021000 	.word	0x40021000

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	46c0      	nop			@ (mov r8, r8)
 80006e2:	e7fd      	b.n	80006e0 <Error_Handler+0x8>

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <HAL_MspInit+0x44>)
 80006ec:	699a      	ldr	r2, [r3, #24]
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <HAL_MspInit+0x44>)
 80006f0:	2101      	movs	r1, #1
 80006f2:	430a      	orrs	r2, r1
 80006f4:	619a      	str	r2, [r3, #24]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <HAL_MspInit+0x44>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	2201      	movs	r2, #1
 80006fc:	4013      	ands	r3, r2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <HAL_MspInit+0x44>)
 8000704:	69da      	ldr	r2, [r3, #28]
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <HAL_MspInit+0x44>)
 8000708:	2180      	movs	r1, #128	@ 0x80
 800070a:	0549      	lsls	r1, r1, #21
 800070c:	430a      	orrs	r2, r1
 800070e:	61da      	str	r2, [r3, #28]
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <HAL_MspInit+0x44>)
 8000712:	69da      	ldr	r2, [r3, #28]
 8000714:	2380      	movs	r3, #128	@ 0x80
 8000716:	055b      	lsls	r3, r3, #21
 8000718:	4013      	ands	r3, r2
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	40021000 	.word	0x40021000

0800072c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b095      	sub	sp, #84	@ 0x54
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	243c      	movs	r4, #60	@ 0x3c
 8000736:	193b      	adds	r3, r7, r4
 8000738:	0018      	movs	r0, r3
 800073a:	2314      	movs	r3, #20
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f003 f910 	bl	8003964 <memset>
  if(huart->Instance==USART1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4ad9      	ldr	r2, [pc, #868]	@ (8000ab0 <HAL_UART_MspInit+0x384>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d172      	bne.n	8000834 <HAL_UART_MspInit+0x108>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800074e:	4bd9      	ldr	r3, [pc, #868]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	4bd8      	ldr	r3, [pc, #864]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000754:	2180      	movs	r1, #128	@ 0x80
 8000756:	01c9      	lsls	r1, r1, #7
 8000758:	430a      	orrs	r2, r1
 800075a:	619a      	str	r2, [r3, #24]
 800075c:	4bd5      	ldr	r3, [pc, #852]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	2380      	movs	r3, #128	@ 0x80
 8000762:	01db      	lsls	r3, r3, #7
 8000764:	4013      	ands	r3, r2
 8000766:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4bd2      	ldr	r3, [pc, #840]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 800076c:	695a      	ldr	r2, [r3, #20]
 800076e:	4bd1      	ldr	r3, [pc, #836]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000770:	2180      	movs	r1, #128	@ 0x80
 8000772:	0289      	lsls	r1, r1, #10
 8000774:	430a      	orrs	r2, r1
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	4bce      	ldr	r3, [pc, #824]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	2380      	movs	r3, #128	@ 0x80
 800077e:	029b      	lsls	r3, r3, #10
 8000780:	4013      	ands	r3, r2
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
 8000784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	22c0      	movs	r2, #192	@ 0xc0
 800078a:	00d2      	lsls	r2, r2, #3
 800078c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	0021      	movs	r1, r4
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2202      	movs	r2, #2
 8000794:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2203      	movs	r2, #3
 80007a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2201      	movs	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	187a      	adds	r2, r7, r1
 80007aa:	2390      	movs	r3, #144	@ 0x90
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fd6b 	bl	800128c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80007b6:	4bc0      	ldr	r3, [pc, #768]	@ (8000ab8 <HAL_UART_MspInit+0x38c>)
 80007b8:	4ac0      	ldr	r2, [pc, #768]	@ (8000abc <HAL_UART_MspInit+0x390>)
 80007ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007bc:	4bbe      	ldr	r3, [pc, #760]	@ (8000ab8 <HAL_UART_MspInit+0x38c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c2:	4bbd      	ldr	r3, [pc, #756]	@ (8000ab8 <HAL_UART_MspInit+0x38c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007c8:	4bbb      	ldr	r3, [pc, #748]	@ (8000ab8 <HAL_UART_MspInit+0x38c>)
 80007ca:	2280      	movs	r2, #128	@ 0x80
 80007cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007ce:	4bba      	ldr	r3, [pc, #744]	@ (8000ab8 <HAL_UART_MspInit+0x38c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007d4:	4bb8      	ldr	r3, [pc, #736]	@ (8000ab8 <HAL_UART_MspInit+0x38c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80007da:	4bb7      	ldr	r3, [pc, #732]	@ (8000ab8 <HAL_UART_MspInit+0x38c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007e0:	4bb5      	ldr	r3, [pc, #724]	@ (8000ab8 <HAL_UART_MspInit+0x38c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80007e6:	4bb4      	ldr	r3, [pc, #720]	@ (8000ab8 <HAL_UART_MspInit+0x38c>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 fb39 	bl	8000e60 <HAL_DMA_Init>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80007f2:	f7ff ff71 	bl	80006d8 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 80007f6:	4ab2      	ldr	r2, [pc, #712]	@ (8000ac0 <HAL_UART_MspInit+0x394>)
 80007f8:	23a8      	movs	r3, #168	@ 0xa8
 80007fa:	58d3      	ldr	r3, [r2, r3]
 80007fc:	49b0      	ldr	r1, [pc, #704]	@ (8000ac0 <HAL_UART_MspInit+0x394>)
 80007fe:	220f      	movs	r2, #15
 8000800:	4393      	bics	r3, r2
 8000802:	22a8      	movs	r2, #168	@ 0xa8
 8000804:	508b      	str	r3, [r1, r2]
 8000806:	4aae      	ldr	r2, [pc, #696]	@ (8000ac0 <HAL_UART_MspInit+0x394>)
 8000808:	23a8      	movs	r3, #168	@ 0xa8
 800080a:	58d3      	ldr	r3, [r2, r3]
 800080c:	49ac      	ldr	r1, [pc, #688]	@ (8000ac0 <HAL_UART_MspInit+0x394>)
 800080e:	2208      	movs	r2, #8
 8000810:	4313      	orrs	r3, r2
 8000812:	22a8      	movs	r2, #168	@ 0xa8
 8000814:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4aa7      	ldr	r2, [pc, #668]	@ (8000ab8 <HAL_UART_MspInit+0x38c>)
 800081a:	675a      	str	r2, [r3, #116]	@ 0x74
 800081c:	4ba6      	ldr	r3, [pc, #664]	@ (8000ab8 <HAL_UART_MspInit+0x38c>)
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	201b      	movs	r0, #27
 8000828:	f000 fae8 	bl	8000dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800082c:	201b      	movs	r0, #27
 800082e:	f000 fafa 	bl	8000e26 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000832:	e138      	b.n	8000aa6 <HAL_UART_MspInit+0x37a>
  else if(huart->Instance==USART2)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4aa2      	ldr	r2, [pc, #648]	@ (8000ac4 <HAL_UART_MspInit+0x398>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d133      	bne.n	80008a6 <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800083e:	4b9d      	ldr	r3, [pc, #628]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000840:	69da      	ldr	r2, [r3, #28]
 8000842:	4b9c      	ldr	r3, [pc, #624]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000844:	2180      	movs	r1, #128	@ 0x80
 8000846:	0289      	lsls	r1, r1, #10
 8000848:	430a      	orrs	r2, r1
 800084a:	61da      	str	r2, [r3, #28]
 800084c:	4b99      	ldr	r3, [pc, #612]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 800084e:	69da      	ldr	r2, [r3, #28]
 8000850:	2380      	movs	r3, #128	@ 0x80
 8000852:	029b      	lsls	r3, r3, #10
 8000854:	4013      	ands	r3, r2
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
 8000858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b96      	ldr	r3, [pc, #600]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 800085c:	695a      	ldr	r2, [r3, #20]
 800085e:	4b95      	ldr	r3, [pc, #596]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000860:	2180      	movs	r1, #128	@ 0x80
 8000862:	0289      	lsls	r1, r1, #10
 8000864:	430a      	orrs	r2, r1
 8000866:	615a      	str	r2, [r3, #20]
 8000868:	4b92      	ldr	r3, [pc, #584]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 800086a:	695a      	ldr	r2, [r3, #20]
 800086c:	2380      	movs	r3, #128	@ 0x80
 800086e:	029b      	lsls	r3, r3, #10
 8000870:	4013      	ands	r3, r2
 8000872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000876:	213c      	movs	r1, #60	@ 0x3c
 8000878:	187b      	adds	r3, r7, r1
 800087a:	220c      	movs	r2, #12
 800087c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2202      	movs	r2, #2
 8000882:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2203      	movs	r2, #3
 800088e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2201      	movs	r2, #1
 8000894:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	187a      	adds	r2, r7, r1
 8000898:	2390      	movs	r3, #144	@ 0x90
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	0011      	movs	r1, r2
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fcf4 	bl	800128c <HAL_GPIO_Init>
}
 80008a4:	e0ff      	b.n	8000aa6 <HAL_UART_MspInit+0x37a>
  else if(huart->Instance==USART3)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a87      	ldr	r2, [pc, #540]	@ (8000ac8 <HAL_UART_MspInit+0x39c>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d13b      	bne.n	8000928 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008b0:	4b80      	ldr	r3, [pc, #512]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 80008b2:	69da      	ldr	r2, [r3, #28]
 80008b4:	4b7f      	ldr	r3, [pc, #508]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 80008b6:	2180      	movs	r1, #128	@ 0x80
 80008b8:	02c9      	lsls	r1, r1, #11
 80008ba:	430a      	orrs	r2, r1
 80008bc:	61da      	str	r2, [r3, #28]
 80008be:	4b7d      	ldr	r3, [pc, #500]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 80008c0:	69da      	ldr	r2, [r3, #28]
 80008c2:	2380      	movs	r3, #128	@ 0x80
 80008c4:	02db      	lsls	r3, r3, #11
 80008c6:	4013      	ands	r3, r2
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	4b79      	ldr	r3, [pc, #484]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 80008ce:	695a      	ldr	r2, [r3, #20]
 80008d0:	4b78      	ldr	r3, [pc, #480]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 80008d2:	2180      	movs	r1, #128	@ 0x80
 80008d4:	02c9      	lsls	r1, r1, #11
 80008d6:	430a      	orrs	r2, r1
 80008d8:	615a      	str	r2, [r3, #20]
 80008da:	4b76      	ldr	r3, [pc, #472]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 80008dc:	695a      	ldr	r2, [r3, #20]
 80008de:	2380      	movs	r3, #128	@ 0x80
 80008e0:	02db      	lsls	r3, r3, #11
 80008e2:	4013      	ands	r3, r2
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80008e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008e8:	213c      	movs	r1, #60	@ 0x3c
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	22c0      	movs	r2, #192	@ 0xc0
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2202      	movs	r2, #2
 80008f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2203      	movs	r2, #3
 8000902:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2204      	movs	r2, #4
 8000908:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	187b      	adds	r3, r7, r1
 800090c:	4a6f      	ldr	r2, [pc, #444]	@ (8000acc <HAL_UART_MspInit+0x3a0>)
 800090e:	0019      	movs	r1, r3
 8000910:	0010      	movs	r0, r2
 8000912:	f000 fcbb 	bl	800128c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	201d      	movs	r0, #29
 800091c:	f000 fa6e 	bl	8000dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 8000920:	201d      	movs	r0, #29
 8000922:	f000 fa80 	bl	8000e26 <HAL_NVIC_EnableIRQ>
}
 8000926:	e0be      	b.n	8000aa6 <HAL_UART_MspInit+0x37a>
  else if(huart->Instance==USART4)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a68      	ldr	r2, [pc, #416]	@ (8000ad0 <HAL_UART_MspInit+0x3a4>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d13b      	bne.n	80009aa <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000932:	4b60      	ldr	r3, [pc, #384]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000934:	69da      	ldr	r2, [r3, #28]
 8000936:	4b5f      	ldr	r3, [pc, #380]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	0309      	lsls	r1, r1, #12
 800093c:	430a      	orrs	r2, r1
 800093e:	61da      	str	r2, [r3, #28]
 8000940:	4b5c      	ldr	r3, [pc, #368]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000942:	69da      	ldr	r2, [r3, #28]
 8000944:	2380      	movs	r3, #128	@ 0x80
 8000946:	031b      	lsls	r3, r3, #12
 8000948:	4013      	ands	r3, r2
 800094a:	623b      	str	r3, [r7, #32]
 800094c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b59      	ldr	r3, [pc, #356]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000950:	695a      	ldr	r2, [r3, #20]
 8000952:	4b58      	ldr	r3, [pc, #352]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	0289      	lsls	r1, r1, #10
 8000958:	430a      	orrs	r2, r1
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	4b55      	ldr	r3, [pc, #340]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 800095e:	695a      	ldr	r2, [r3, #20]
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	029b      	lsls	r3, r3, #10
 8000964:	4013      	ands	r3, r2
 8000966:	61fb      	str	r3, [r7, #28]
 8000968:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800096a:	213c      	movs	r1, #60	@ 0x3c
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2203      	movs	r2, #3
 8000970:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2202      	movs	r2, #2
 8000976:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2203      	movs	r2, #3
 8000982:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2204      	movs	r2, #4
 8000988:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	187a      	adds	r2, r7, r1
 800098c:	2390      	movs	r3, #144	@ 0x90
 800098e:	05db      	lsls	r3, r3, #23
 8000990:	0011      	movs	r1, r2
 8000992:	0018      	movs	r0, r3
 8000994:	f000 fc7a 	bl	800128c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	201d      	movs	r0, #29
 800099e:	f000 fa2d 	bl	8000dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 80009a2:	201d      	movs	r0, #29
 80009a4:	f000 fa3f 	bl	8000e26 <HAL_NVIC_EnableIRQ>
}
 80009a8:	e07d      	b.n	8000aa6 <HAL_UART_MspInit+0x37a>
  else if(huart->Instance==USART5)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a49      	ldr	r2, [pc, #292]	@ (8000ad4 <HAL_UART_MspInit+0x3a8>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d13a      	bne.n	8000a2a <HAL_UART_MspInit+0x2fe>
    __HAL_RCC_USART5_CLK_ENABLE();
 80009b4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 80009b6:	69da      	ldr	r2, [r3, #28]
 80009b8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 80009ba:	2180      	movs	r1, #128	@ 0x80
 80009bc:	0349      	lsls	r1, r1, #13
 80009be:	430a      	orrs	r2, r1
 80009c0:	61da      	str	r2, [r3, #28]
 80009c2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 80009c4:	69da      	ldr	r2, [r3, #28]
 80009c6:	2380      	movs	r3, #128	@ 0x80
 80009c8:	035b      	lsls	r3, r3, #13
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d0:	4b38      	ldr	r3, [pc, #224]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 80009d2:	695a      	ldr	r2, [r3, #20]
 80009d4:	4b37      	ldr	r3, [pc, #220]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 80009d6:	2180      	movs	r1, #128	@ 0x80
 80009d8:	02c9      	lsls	r1, r1, #11
 80009da:	430a      	orrs	r2, r1
 80009dc:	615a      	str	r2, [r3, #20]
 80009de:	4b35      	ldr	r3, [pc, #212]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 80009e0:	695a      	ldr	r2, [r3, #20]
 80009e2:	2380      	movs	r3, #128	@ 0x80
 80009e4:	02db      	lsls	r3, r3, #11
 80009e6:	4013      	ands	r3, r2
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80009ec:	213c      	movs	r1, #60	@ 0x3c
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2218      	movs	r2, #24
 80009f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2202      	movs	r2, #2
 80009f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2203      	movs	r2, #3
 8000a04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART5;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2204      	movs	r2, #4
 8000a0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	4a2f      	ldr	r2, [pc, #188]	@ (8000acc <HAL_UART_MspInit+0x3a0>)
 8000a10:	0019      	movs	r1, r3
 8000a12:	0010      	movs	r0, r2
 8000a14:	f000 fc3a 	bl	800128c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	201d      	movs	r0, #29
 8000a1e:	f000 f9ed 	bl	8000dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 8000a22:	201d      	movs	r0, #29
 8000a24:	f000 f9ff 	bl	8000e26 <HAL_NVIC_EnableIRQ>
}
 8000a28:	e03d      	b.n	8000aa6 <HAL_UART_MspInit+0x37a>
  else if(huart->Instance==USART6)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ad8 <HAL_UART_MspInit+0x3ac>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d138      	bne.n	8000aa6 <HAL_UART_MspInit+0x37a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000a34:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000a36:	699a      	ldr	r2, [r3, #24]
 8000a38:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	619a      	str	r2, [r3, #24]
 8000a40:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	2220      	movs	r2, #32
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000a4e:	695a      	ldr	r2, [r3, #20]
 8000a50:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000a52:	2180      	movs	r1, #128	@ 0x80
 8000a54:	0289      	lsls	r1, r1, #10
 8000a56:	430a      	orrs	r2, r1
 8000a58:	615a      	str	r2, [r3, #20]
 8000a5a:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <HAL_UART_MspInit+0x388>)
 8000a5c:	695a      	ldr	r2, [r3, #20]
 8000a5e:	2380      	movs	r3, #128	@ 0x80
 8000a60:	029b      	lsls	r3, r3, #10
 8000a62:	4013      	ands	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a68:	213c      	movs	r1, #60	@ 0x3c
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2230      	movs	r2, #48	@ 0x30
 8000a6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2202      	movs	r2, #2
 8000a74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2203      	movs	r2, #3
 8000a80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_USART6;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2205      	movs	r2, #5
 8000a86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	187a      	adds	r2, r7, r1
 8000a8a:	2390      	movs	r3, #144	@ 0x90
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fbfb 	bl	800128c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	201d      	movs	r0, #29
 8000a9c:	f000 f9ae 	bl	8000dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 8000aa0:	201d      	movs	r0, #29
 8000aa2:	f000 f9c0 	bl	8000e26 <HAL_NVIC_EnableIRQ>
}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b015      	add	sp, #84	@ 0x54
 8000aac:	bd90      	pop	{r4, r7, pc}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	40013800 	.word	0x40013800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	20000384 	.word	0x20000384
 8000abc:	40020008 	.word	0x40020008
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40004800 	.word	0x40004800
 8000acc:	48000400 	.word	0x48000400
 8000ad0:	40004c00 	.word	0x40004c00
 8000ad4:	40005000 	.word	0x40005000
 8000ad8:	40011400 	.word	0x40011400

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	e7fd      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	e7fd      	b.n	8000ae8 <HardFault_Handler+0x4>

08000aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f8b2 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <DMA1_Channel1_IRQHandler+0x14>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 facd 	bl	80010b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	20000384 	.word	0x20000384

08000b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b2c:	4b03      	ldr	r3, [pc, #12]	@ (8000b3c <USART1_IRQHandler+0x14>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f001 fb42 	bl	80021b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b34:	46c0      	nop			@ (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	20000054 	.word	0x20000054

08000b40 <USART3_6_IRQHandler>:

/**
  * @brief This function handles USART3 to USART6 global interrupts.
  */
void USART3_6_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_6_IRQn 0 */

  /* USER CODE END USART3_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <USART3_6_IRQHandler+0x2c>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f001 fb36 	bl	80021b8 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8000b4c:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <USART3_6_IRQHandler+0x30>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f001 fb32 	bl	80021b8 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8000b54:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <USART3_6_IRQHandler+0x34>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f001 fb2e 	bl	80021b8 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart6);(&huart6);
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <USART3_6_IRQHandler+0x38>)
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f001 fb2a 	bl	80021b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_6_IRQn 1 */

  /* USER CODE END USART3_6_IRQn 1 */
}
 8000b64:	46c0      	nop			@ (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	20000164 	.word	0x20000164
 8000b70:	200001ec 	.word	0x200001ec
 8000b74:	20000274 	.word	0x20000274
 8000b78:	200002fc 	.word	0x200002fc

08000b7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	@ (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b8c:	f7ff fff6 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	@ (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bb6:	f002 fedd 	bl	8003974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fb2f 	bl	800021c <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bcc:	08003a14 	.word	0x08003a14
  ldr r2, =_sbss
 8000bd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd4:	200003cc 	.word	0x200003cc

08000bd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_IRQHandler>
	...

08000bdc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <HAL_Init+0x24>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_Init+0x24>)
 8000be6:	2110      	movs	r1, #16
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f809 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf2:	f7ff fd77 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <HAL_InitTick+0x5c>)
 8000c0e:	681c      	ldr	r4, [r3, #0]
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <HAL_InitTick+0x60>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	0019      	movs	r1, r3
 8000c16:	23fa      	movs	r3, #250	@ 0xfa
 8000c18:	0098      	lsls	r0, r3, #2
 8000c1a:	f7ff fa73 	bl	8000104 <__udivsi3>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	0019      	movs	r1, r3
 8000c22:	0020      	movs	r0, r4
 8000c24:	f7ff fa6e 	bl	8000104 <__udivsi3>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 f90b 	bl	8000e46 <HAL_SYSTICK_Config>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e00f      	b.n	8000c58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d80b      	bhi.n	8000c56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	2301      	movs	r3, #1
 8000c42:	425b      	negs	r3, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 f8d8 	bl	8000dfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_InitTick+0x64>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b003      	add	sp, #12
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	001a      	movs	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	18d2      	adds	r2, r2, r3
 8000c7c:	4b03      	ldr	r3, [pc, #12]	@ (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	200003c8 	.word	0x200003c8

08000c90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	@ (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	200003c8 	.word	0x200003c8

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	0002      	movs	r2, r0
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cb6:	d809      	bhi.n	8000ccc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	231f      	movs	r3, #31
 8000cc0:	401a      	ands	r2, r3
 8000cc2:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <__NVIC_EnableIRQ+0x30>)
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	000a      	movs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
  }
}
 8000ccc:	46c0      	nop			@ (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	0002      	movs	r2, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cec:	d828      	bhi.n	8000d40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cee:	4a2f      	ldr	r2, [pc, #188]	@ (8000dac <__NVIC_SetPriority+0xd4>)
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	33c0      	adds	r3, #192	@ 0xc0
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	589b      	ldr	r3, [r3, r2]
 8000cfe:	1dfa      	adds	r2, r7, #7
 8000d00:	7812      	ldrb	r2, [r2, #0]
 8000d02:	0011      	movs	r1, r2
 8000d04:	2203      	movs	r2, #3
 8000d06:	400a      	ands	r2, r1
 8000d08:	00d2      	lsls	r2, r2, #3
 8000d0a:	21ff      	movs	r1, #255	@ 0xff
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	000a      	movs	r2, r1
 8000d10:	43d2      	mvns	r2, r2
 8000d12:	401a      	ands	r2, r3
 8000d14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	019b      	lsls	r3, r3, #6
 8000d1a:	22ff      	movs	r2, #255	@ 0xff
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	0018      	movs	r0, r3
 8000d24:	2303      	movs	r3, #3
 8000d26:	4003      	ands	r3, r0
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2c:	481f      	ldr	r0, [pc, #124]	@ (8000dac <__NVIC_SetPriority+0xd4>)
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b25b      	sxtb	r3, r3
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	430a      	orrs	r2, r1
 8000d38:	33c0      	adds	r3, #192	@ 0xc0
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d3e:	e031      	b.n	8000da4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d40:	4a1b      	ldr	r2, [pc, #108]	@ (8000db0 <__NVIC_SetPriority+0xd8>)
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	0019      	movs	r1, r3
 8000d48:	230f      	movs	r3, #15
 8000d4a:	400b      	ands	r3, r1
 8000d4c:	3b08      	subs	r3, #8
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3306      	adds	r3, #6
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	18d3      	adds	r3, r2, r3
 8000d56:	3304      	adds	r3, #4
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	1dfa      	adds	r2, r7, #7
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	0011      	movs	r1, r2
 8000d60:	2203      	movs	r2, #3
 8000d62:	400a      	ands	r2, r1
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	21ff      	movs	r1, #255	@ 0xff
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	22ff      	movs	r2, #255	@ 0xff
 8000d78:	401a      	ands	r2, r3
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	2303      	movs	r3, #3
 8000d82:	4003      	ands	r3, r0
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <__NVIC_SetPriority+0xd8>)
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	001c      	movs	r4, r3
 8000d90:	230f      	movs	r3, #15
 8000d92:	4023      	ands	r3, r4
 8000d94:	3b08      	subs	r3, #8
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	3306      	adds	r3, #6
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	18c3      	adds	r3, r0, r3
 8000da0:	3304      	adds	r3, #4
 8000da2:	601a      	str	r2, [r3, #0]
}
 8000da4:	46c0      	nop			@ (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b003      	add	sp, #12
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	1e5a      	subs	r2, r3, #1
 8000dc0:	2380      	movs	r3, #128	@ 0x80
 8000dc2:	045b      	lsls	r3, r3, #17
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d301      	bcc.n	8000dcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e010      	b.n	8000dee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <SysTick_Config+0x44>)
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	425b      	negs	r3, r3
 8000dd8:	2103      	movs	r1, #3
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f7ff ff7c 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <SysTick_Config+0x44>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <SysTick_Config+0x44>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	0018      	movs	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b002      	add	sp, #8
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	210f      	movs	r1, #15
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	1c02      	adds	r2, r0, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b004      	add	sp, #16
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	0002      	movs	r2, r0
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ff33 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	0018      	movs	r0, r3
 8000e52:	f7ff ffaf 	bl	8000db4 <SysTick_Config>
 8000e56:	0003      	movs	r3, r0
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e036      	b.n	8000ee4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2221      	movs	r2, #33	@ 0x21
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4a18      	ldr	r2, [pc, #96]	@ (8000eec <HAL_DMA_Init+0x8c>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 f9c4 	bl	8001254 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2221      	movs	r2, #33	@ 0x21
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2220      	movs	r2, #32
 8000ede:	2100      	movs	r1, #0
 8000ee0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b004      	add	sp, #16
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	ffffc00f 	.word	0xffffc00f

08000ef0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000efe:	2317      	movs	r3, #23
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2220      	movs	r2, #32
 8000f0a:	5c9b      	ldrb	r3, [r3, r2]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d101      	bne.n	8000f14 <HAL_DMA_Start_IT+0x24>
 8000f10:	2302      	movs	r3, #2
 8000f12:	e04f      	b.n	8000fb4 <HAL_DMA_Start_IT+0xc4>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2220      	movs	r2, #32
 8000f18:	2101      	movs	r1, #1
 8000f1a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2221      	movs	r2, #33	@ 0x21
 8000f20:	5c9b      	ldrb	r3, [r3, r2]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d13a      	bne.n	8000f9e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2221      	movs	r2, #33	@ 0x21
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2200      	movs	r2, #0
 8000f34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	438a      	bics	r2, r1
 8000f44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f000 f954 	bl	80011fa <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d008      	beq.n	8000f6c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	210e      	movs	r1, #14
 8000f66:	430a      	orrs	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	e00f      	b.n	8000f8c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	210a      	movs	r1, #10
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2104      	movs	r1, #4
 8000f88:	438a      	bics	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2101      	movs	r1, #1
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	e007      	b.n	8000fae <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fa6:	2317      	movs	r3, #23
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	2202      	movs	r2, #2
 8000fac:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000fae:	2317      	movs	r3, #23
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	781b      	ldrb	r3, [r3, #0]
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b006      	add	sp, #24
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2221      	movs	r2, #33	@ 0x21
 8000fc8:	5c9b      	ldrb	r3, [r3, r2]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d008      	beq.n	8000fe2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2220      	movs	r2, #32
 8000fda:	2100      	movs	r1, #0
 8000fdc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e020      	b.n	8001024 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	210e      	movs	r1, #14
 8000fee:	438a      	bics	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	438a      	bics	r2, r1
 8001000:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800100a:	2101      	movs	r1, #1
 800100c:	4091      	lsls	r1, r2
 800100e:	000a      	movs	r2, r1
 8001010:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2221      	movs	r2, #33	@ 0x21
 8001016:	2101      	movs	r1, #1
 8001018:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2220      	movs	r2, #32
 800101e:	2100      	movs	r1, #0
 8001020:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	0018      	movs	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001034:	210f      	movs	r1, #15
 8001036:	187b      	adds	r3, r7, r1
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2221      	movs	r2, #33	@ 0x21
 8001040:	5c9b      	ldrb	r3, [r3, r2]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d006      	beq.n	8001056 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2204      	movs	r2, #4
 800104c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e028      	b.n	80010a8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	210e      	movs	r1, #14
 8001062:	438a      	bics	r2, r1
 8001064:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	438a      	bics	r2, r1
 8001074:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800107e:	2101      	movs	r1, #1
 8001080:	4091      	lsls	r1, r2
 8001082:	000a      	movs	r2, r1
 8001084:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2221      	movs	r2, #33	@ 0x21
 800108a:	2101      	movs	r1, #1
 800108c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2220      	movs	r2, #32
 8001092:	2100      	movs	r1, #0
 8001094:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	0010      	movs	r0, r2
 80010a6:	4798      	blx	r3
    }
  }
  return status;
 80010a8:	230f      	movs	r3, #15
 80010aa:	18fb      	adds	r3, r7, r3
 80010ac:	781b      	ldrb	r3, [r3, #0]
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b004      	add	sp, #16
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	2204      	movs	r2, #4
 80010d4:	409a      	lsls	r2, r3
 80010d6:	0013      	movs	r3, r2
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	4013      	ands	r3, r2
 80010dc:	d024      	beq.n	8001128 <HAL_DMA_IRQHandler+0x72>
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	2204      	movs	r2, #4
 80010e2:	4013      	ands	r3, r2
 80010e4:	d020      	beq.n	8001128 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2220      	movs	r2, #32
 80010ee:	4013      	ands	r3, r2
 80010f0:	d107      	bne.n	8001102 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2104      	movs	r1, #4
 80010fe:	438a      	bics	r2, r1
 8001100:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800110a:	2104      	movs	r1, #4
 800110c:	4091      	lsls	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001116:	2b00      	cmp	r3, #0
 8001118:	d100      	bne.n	800111c <HAL_DMA_IRQHandler+0x66>
 800111a:	e06a      	b.n	80011f2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	0010      	movs	r0, r2
 8001124:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001126:	e064      	b.n	80011f2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	2202      	movs	r2, #2
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4013      	ands	r3, r2
 8001136:	d02b      	beq.n	8001190 <HAL_DMA_IRQHandler+0xda>
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2202      	movs	r2, #2
 800113c:	4013      	ands	r3, r2
 800113e:	d027      	beq.n	8001190 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2220      	movs	r2, #32
 8001148:	4013      	ands	r3, r2
 800114a:	d10b      	bne.n	8001164 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	210a      	movs	r1, #10
 8001158:	438a      	bics	r2, r1
 800115a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2221      	movs	r2, #33	@ 0x21
 8001160:	2101      	movs	r1, #1
 8001162:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800116c:	2102      	movs	r1, #2
 800116e:	4091      	lsls	r1, r2
 8001170:	000a      	movs	r2, r1
 8001172:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2220      	movs	r2, #32
 8001178:	2100      	movs	r1, #0
 800117a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001180:	2b00      	cmp	r3, #0
 8001182:	d036      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	0010      	movs	r0, r2
 800118c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800118e:	e030      	b.n	80011f2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	2208      	movs	r2, #8
 8001196:	409a      	lsls	r2, r3
 8001198:	0013      	movs	r3, r2
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4013      	ands	r3, r2
 800119e:	d028      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x13c>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2208      	movs	r2, #8
 80011a4:	4013      	ands	r3, r2
 80011a6:	d024      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	210e      	movs	r1, #14
 80011b4:	438a      	bics	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011c0:	2101      	movs	r1, #1
 80011c2:	4091      	lsls	r1, r2
 80011c4:	000a      	movs	r2, r1
 80011c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2221      	movs	r2, #33	@ 0x21
 80011d2:	2101      	movs	r1, #1
 80011d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2220      	movs	r2, #32
 80011da:	2100      	movs	r1, #0
 80011dc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d005      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	0010      	movs	r0, r2
 80011ee:	4798      	blx	r3
    }
  }
}
 80011f0:	e7ff      	b.n	80011f2 <HAL_DMA_IRQHandler+0x13c>
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b004      	add	sp, #16
 80011f8:	bd80      	pop	{r7, pc}

080011fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001210:	2101      	movs	r1, #1
 8001212:	4091      	lsls	r1, r2
 8001214:	000a      	movs	r2, r1
 8001216:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b10      	cmp	r3, #16
 8001226:	d108      	bne.n	800123a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001238:	e007      	b.n	800124a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	60da      	str	r2, [r3, #12]
}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b004      	add	sp, #16
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <DMA_CalcBaseAndBitshift+0x30>)
 8001262:	4694      	mov	ip, r2
 8001264:	4463      	add	r3, ip
 8001266:	2114      	movs	r1, #20
 8001268:	0018      	movs	r0, r3
 800126a:	f7fe ff4b 	bl	8000104 <__udivsi3>
 800126e:	0003      	movs	r3, r0
 8001270:	009a      	lsls	r2, r3, #2
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a03      	ldr	r2, [pc, #12]	@ (8001288 <DMA_CalcBaseAndBitshift+0x34>)
 800127a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}
 8001284:	bffdfff8 	.word	0xbffdfff8
 8001288:	40020000 	.word	0x40020000

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	e14f      	b.n	800153c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4091      	lsls	r1, r2
 80012a6:	000a      	movs	r2, r1
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <HAL_GPIO_Init+0x28>
 80012b2:	e140      	b.n	8001536 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2203      	movs	r2, #3
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d005      	beq.n	80012cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2203      	movs	r2, #3
 80012c6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	409a      	lsls	r2, r3
 80012da:	0013      	movs	r3, r2
 80012dc:	43da      	mvns	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	409a      	lsls	r2, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	2201      	movs	r2, #1
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	4013      	ands	r3, r2
 8001336:	2b03      	cmp	r3, #3
 8001338:	d017      	beq.n	800136a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	43da      	mvns	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2203      	movs	r2, #3
 8001370:	4013      	ands	r3, r2
 8001372:	2b02      	cmp	r3, #2
 8001374:	d123      	bne.n	80013be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	58d3      	ldr	r3, [r2, r3]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2207      	movs	r2, #7
 8001388:	4013      	ands	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	43da      	mvns	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2107      	movs	r1, #7
 80013a2:	400b      	ands	r3, r1
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	0092      	lsls	r2, r2, #2
 80013ba:	6939      	ldr	r1, [r7, #16]
 80013bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	409a      	lsls	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	43da      	mvns	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2203      	movs	r2, #3
 80013dc:	401a      	ands	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	23c0      	movs	r3, #192	@ 0xc0
 80013f8:	029b      	lsls	r3, r3, #10
 80013fa:	4013      	ands	r3, r2
 80013fc:	d100      	bne.n	8001400 <HAL_GPIO_Init+0x174>
 80013fe:	e09a      	b.n	8001536 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001400:	4b54      	ldr	r3, [pc, #336]	@ (8001554 <HAL_GPIO_Init+0x2c8>)
 8001402:	699a      	ldr	r2, [r3, #24]
 8001404:	4b53      	ldr	r3, [pc, #332]	@ (8001554 <HAL_GPIO_Init+0x2c8>)
 8001406:	2101      	movs	r1, #1
 8001408:	430a      	orrs	r2, r1
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	4b51      	ldr	r3, [pc, #324]	@ (8001554 <HAL_GPIO_Init+0x2c8>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2201      	movs	r2, #1
 8001412:	4013      	ands	r3, r2
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001418:	4a4f      	ldr	r2, [pc, #316]	@ (8001558 <HAL_GPIO_Init+0x2cc>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	589b      	ldr	r3, [r3, r2]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2203      	movs	r2, #3
 800142a:	4013      	ands	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	409a      	lsls	r2, r3
 8001432:	0013      	movs	r3, r2
 8001434:	43da      	mvns	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	2390      	movs	r3, #144	@ 0x90
 8001440:	05db      	lsls	r3, r3, #23
 8001442:	429a      	cmp	r2, r3
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x1e2>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a44      	ldr	r2, [pc, #272]	@ (800155c <HAL_GPIO_Init+0x2d0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x1de>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a43      	ldr	r2, [pc, #268]	@ (8001560 <HAL_GPIO_Init+0x2d4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x1da>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a42      	ldr	r2, [pc, #264]	@ (8001564 <HAL_GPIO_Init+0x2d8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x1d6>
 800145e:	2303      	movs	r3, #3
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x1e4>
 8001462:	2305      	movs	r3, #5
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x1e4>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x1e4>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x1e4>
 800146e:	2300      	movs	r3, #0
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	2103      	movs	r1, #3
 8001474:	400a      	ands	r2, r1
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001480:	4935      	ldr	r1, [pc, #212]	@ (8001558 <HAL_GPIO_Init+0x2cc>)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b36      	ldr	r3, [pc, #216]	@ (8001568 <HAL_GPIO_Init+0x2dc>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43da      	mvns	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	2380      	movs	r3, #128	@ 0x80
 80014a4:	035b      	lsls	r3, r3, #13
 80014a6:	4013      	ands	r3, r2
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001568 <HAL_GPIO_Init+0x2dc>)
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001568 <HAL_GPIO_Init+0x2dc>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43da      	mvns	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	2380      	movs	r3, #128	@ 0x80
 80014ce:	039b      	lsls	r3, r3, #14
 80014d0:	4013      	ands	r3, r2
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014dc:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <HAL_GPIO_Init+0x2dc>)
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <HAL_GPIO_Init+0x2dc>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	2380      	movs	r3, #128	@ 0x80
 80014f8:	029b      	lsls	r3, r3, #10
 80014fa:	4013      	ands	r3, r2
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001506:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <HAL_GPIO_Init+0x2dc>)
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800150c:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <HAL_GPIO_Init+0x2dc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43da      	mvns	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	2380      	movs	r3, #128	@ 0x80
 8001522:	025b      	lsls	r3, r3, #9
 8001524:	4013      	ands	r3, r2
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001530:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <HAL_GPIO_Init+0x2dc>)
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	40da      	lsrs	r2, r3
 8001544:	1e13      	subs	r3, r2, #0
 8001546:	d000      	beq.n	800154a <HAL_GPIO_Init+0x2be>
 8001548:	e6a8      	b.n	800129c <HAL_GPIO_Init+0x10>
  } 
}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	46c0      	nop			@ (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b006      	add	sp, #24
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	40010000 	.word	0x40010000
 800155c:	48000400 	.word	0x48000400
 8001560:	48000800 	.word	0x48000800
 8001564:	48000c00 	.word	0x48000c00
 8001568:	40010400 	.word	0x40010400

0800156c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e305      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2201      	movs	r2, #1
 8001584:	4013      	ands	r3, r2
 8001586:	d100      	bne.n	800158a <HAL_RCC_OscConfig+0x1e>
 8001588:	e08d      	b.n	80016a6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800158a:	4bc5      	ldr	r3, [pc, #788]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	220c      	movs	r2, #12
 8001590:	4013      	ands	r3, r2
 8001592:	2b04      	cmp	r3, #4
 8001594:	d00e      	beq.n	80015b4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001596:	4bc2      	ldr	r3, [pc, #776]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	220c      	movs	r2, #12
 800159c:	4013      	ands	r3, r2
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d116      	bne.n	80015d0 <HAL_RCC_OscConfig+0x64>
 80015a2:	4bbf      	ldr	r3, [pc, #764]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	23c0      	movs	r3, #192	@ 0xc0
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	401a      	ands	r2, r3
 80015ac:	2380      	movs	r3, #128	@ 0x80
 80015ae:	025b      	lsls	r3, r3, #9
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d10d      	bne.n	80015d0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4bba      	ldr	r3, [pc, #744]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	4013      	ands	r3, r2
 80015be:	d100      	bne.n	80015c2 <HAL_RCC_OscConfig+0x56>
 80015c0:	e070      	b.n	80016a4 <HAL_RCC_OscConfig+0x138>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d000      	beq.n	80015cc <HAL_RCC_OscConfig+0x60>
 80015ca:	e06b      	b.n	80016a4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e2dc      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_OscConfig+0x7c>
 80015d8:	4bb1      	ldr	r3, [pc, #708]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4bb0      	ldr	r3, [pc, #704]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80015de:	2180      	movs	r1, #128	@ 0x80
 80015e0:	0249      	lsls	r1, r1, #9
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e02f      	b.n	8001648 <HAL_RCC_OscConfig+0xdc>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10c      	bne.n	800160a <HAL_RCC_OscConfig+0x9e>
 80015f0:	4bab      	ldr	r3, [pc, #684]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4baa      	ldr	r3, [pc, #680]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80015f6:	49ab      	ldr	r1, [pc, #684]	@ (80018a4 <HAL_RCC_OscConfig+0x338>)
 80015f8:	400a      	ands	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	4ba8      	ldr	r3, [pc, #672]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4ba7      	ldr	r3, [pc, #668]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001602:	49a9      	ldr	r1, [pc, #676]	@ (80018a8 <HAL_RCC_OscConfig+0x33c>)
 8001604:	400a      	ands	r2, r1
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e01e      	b.n	8001648 <HAL_RCC_OscConfig+0xdc>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d10e      	bne.n	8001630 <HAL_RCC_OscConfig+0xc4>
 8001612:	4ba3      	ldr	r3, [pc, #652]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4ba2      	ldr	r3, [pc, #648]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001618:	2180      	movs	r1, #128	@ 0x80
 800161a:	02c9      	lsls	r1, r1, #11
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	4b9f      	ldr	r3, [pc, #636]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b9e      	ldr	r3, [pc, #632]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001626:	2180      	movs	r1, #128	@ 0x80
 8001628:	0249      	lsls	r1, r1, #9
 800162a:	430a      	orrs	r2, r1
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e00b      	b.n	8001648 <HAL_RCC_OscConfig+0xdc>
 8001630:	4b9b      	ldr	r3, [pc, #620]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b9a      	ldr	r3, [pc, #616]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001636:	499b      	ldr	r1, [pc, #620]	@ (80018a4 <HAL_RCC_OscConfig+0x338>)
 8001638:	400a      	ands	r2, r1
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	4b98      	ldr	r3, [pc, #608]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b97      	ldr	r3, [pc, #604]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001642:	4999      	ldr	r1, [pc, #612]	@ (80018a8 <HAL_RCC_OscConfig+0x33c>)
 8001644:	400a      	ands	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d014      	beq.n	800167a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fb1e 	bl	8000c90 <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165a:	f7ff fb19 	bl	8000c90 <HAL_GetTick>
 800165e:	0002      	movs	r2, r0
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b64      	cmp	r3, #100	@ 0x64
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e28e      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166c:	4b8c      	ldr	r3, [pc, #560]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	@ 0x80
 8001672:	029b      	lsls	r3, r3, #10
 8001674:	4013      	ands	r3, r2
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0xee>
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff fb09 	bl	8000c90 <HAL_GetTick>
 800167e:	0003      	movs	r3, r0
 8001680:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fb04 	bl	8000c90 <HAL_GetTick>
 8001688:	0002      	movs	r2, r0
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	@ 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e279      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	4b82      	ldr	r3, [pc, #520]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	@ 0x80
 800169c:	029b      	lsls	r3, r3, #10
 800169e:	4013      	ands	r3, r2
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x118>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2202      	movs	r2, #2
 80016ac:	4013      	ands	r3, r2
 80016ae:	d100      	bne.n	80016b2 <HAL_RCC_OscConfig+0x146>
 80016b0:	e06c      	b.n	800178c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016b2:	4b7b      	ldr	r3, [pc, #492]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	220c      	movs	r2, #12
 80016b8:	4013      	ands	r3, r2
 80016ba:	d00e      	beq.n	80016da <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016bc:	4b78      	ldr	r3, [pc, #480]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	220c      	movs	r2, #12
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d11f      	bne.n	8001708 <HAL_RCC_OscConfig+0x19c>
 80016c8:	4b75      	ldr	r3, [pc, #468]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	23c0      	movs	r3, #192	@ 0xc0
 80016ce:	025b      	lsls	r3, r3, #9
 80016d0:	401a      	ands	r2, r3
 80016d2:	2380      	movs	r3, #128	@ 0x80
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d116      	bne.n	8001708 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	4b71      	ldr	r3, [pc, #452]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2202      	movs	r2, #2
 80016e0:	4013      	ands	r3, r2
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_OscConfig+0x184>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e24c      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	4b6b      	ldr	r3, [pc, #428]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	22f8      	movs	r2, #248	@ 0xf8
 80016f6:	4393      	bics	r3, r2
 80016f8:	0019      	movs	r1, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	00da      	lsls	r2, r3, #3
 8001700:	4b67      	ldr	r3, [pc, #412]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001702:	430a      	orrs	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	e041      	b.n	800178c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d024      	beq.n	800175a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001710:	4b63      	ldr	r3, [pc, #396]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b62      	ldr	r3, [pc, #392]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001716:	2101      	movs	r1, #1
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fab8 	bl	8000c90 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fab3 	bl	8000c90 <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e228      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	4b59      	ldr	r3, [pc, #356]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2202      	movs	r2, #2
 800173e:	4013      	ands	r3, r2
 8001740:	d0f1      	beq.n	8001726 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4b57      	ldr	r3, [pc, #348]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	22f8      	movs	r2, #248	@ 0xf8
 8001748:	4393      	bics	r3, r2
 800174a:	0019      	movs	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	00da      	lsls	r2, r3, #3
 8001752:	4b53      	ldr	r3, [pc, #332]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e018      	b.n	800178c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175a:	4b51      	ldr	r3, [pc, #324]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b50      	ldr	r3, [pc, #320]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001760:	2101      	movs	r1, #1
 8001762:	438a      	bics	r2, r1
 8001764:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fa93 	bl	8000c90 <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff fa8e 	bl	8000c90 <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e203      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	4b47      	ldr	r3, [pc, #284]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2202      	movs	r2, #2
 8001788:	4013      	ands	r3, r2
 800178a:	d1f1      	bne.n	8001770 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2208      	movs	r2, #8
 8001792:	4013      	ands	r3, r2
 8001794:	d036      	beq.n	8001804 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d019      	beq.n	80017d2 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179e:	4b40      	ldr	r3, [pc, #256]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80017a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017a2:	4b3f      	ldr	r3, [pc, #252]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80017a4:	2101      	movs	r1, #1
 80017a6:	430a      	orrs	r2, r1
 80017a8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fa71 	bl	8000c90 <HAL_GetTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff fa6c 	bl	8000c90 <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1e1      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c6:	4b36      	ldr	r3, [pc, #216]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80017c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ca:	2202      	movs	r2, #2
 80017cc:	4013      	ands	r3, r2
 80017ce:	d0f1      	beq.n	80017b4 <HAL_RCC_OscConfig+0x248>
 80017d0:	e018      	b.n	8001804 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d2:	4b33      	ldr	r3, [pc, #204]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80017d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017d6:	4b32      	ldr	r3, [pc, #200]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80017d8:	2101      	movs	r1, #1
 80017da:	438a      	bics	r2, r1
 80017dc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff fa57 	bl	8000c90 <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e8:	f7ff fa52 	bl	8000c90 <HAL_GetTick>
 80017ec:	0002      	movs	r2, r0
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1c7      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fa:	4b29      	ldr	r3, [pc, #164]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fe:	2202      	movs	r2, #2
 8001800:	4013      	ands	r3, r2
 8001802:	d1f1      	bne.n	80017e8 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2204      	movs	r2, #4
 800180a:	4013      	ands	r3, r2
 800180c:	d100      	bne.n	8001810 <HAL_RCC_OscConfig+0x2a4>
 800180e:	e0b5      	b.n	800197c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001810:	201f      	movs	r0, #31
 8001812:	183b      	adds	r3, r7, r0
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001818:	4b21      	ldr	r3, [pc, #132]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 800181a:	69da      	ldr	r2, [r3, #28]
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	055b      	lsls	r3, r3, #21
 8001820:	4013      	ands	r3, r2
 8001822:	d110      	bne.n	8001846 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001824:	4b1e      	ldr	r3, [pc, #120]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001826:	69da      	ldr	r2, [r3, #28]
 8001828:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 800182a:	2180      	movs	r1, #128	@ 0x80
 800182c:	0549      	lsls	r1, r1, #21
 800182e:	430a      	orrs	r2, r1
 8001830:	61da      	str	r2, [r3, #28]
 8001832:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001834:	69da      	ldr	r2, [r3, #28]
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	055b      	lsls	r3, r3, #21
 800183a:	4013      	ands	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001840:	183b      	adds	r3, r7, r0
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <HAL_RCC_OscConfig+0x340>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	@ 0x80
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4013      	ands	r3, r2
 8001850:	d11a      	bne.n	8001888 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001852:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <HAL_RCC_OscConfig+0x340>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_RCC_OscConfig+0x340>)
 8001858:	2180      	movs	r1, #128	@ 0x80
 800185a:	0049      	lsls	r1, r1, #1
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001860:	f7ff fa16 	bl	8000c90 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186a:	f7ff fa11 	bl	8000c90 <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b64      	cmp	r3, #100	@ 0x64
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e186      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_RCC_OscConfig+0x340>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4013      	ands	r3, r2
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d10f      	bne.n	80018b0 <HAL_RCC_OscConfig+0x344>
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001892:	6a1a      	ldr	r2, [r3, #32]
 8001894:	4b02      	ldr	r3, [pc, #8]	@ (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001896:	2101      	movs	r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	621a      	str	r2, [r3, #32]
 800189c:	e036      	b.n	800190c <HAL_RCC_OscConfig+0x3a0>
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	40021000 	.word	0x40021000
 80018a4:	fffeffff 	.word	0xfffeffff
 80018a8:	fffbffff 	.word	0xfffbffff
 80018ac:	40007000 	.word	0x40007000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10c      	bne.n	80018d2 <HAL_RCC_OscConfig+0x366>
 80018b8:	4bb6      	ldr	r3, [pc, #728]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80018ba:	6a1a      	ldr	r2, [r3, #32]
 80018bc:	4bb5      	ldr	r3, [pc, #724]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80018be:	2101      	movs	r1, #1
 80018c0:	438a      	bics	r2, r1
 80018c2:	621a      	str	r2, [r3, #32]
 80018c4:	4bb3      	ldr	r3, [pc, #716]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	4bb2      	ldr	r3, [pc, #712]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80018ca:	2104      	movs	r1, #4
 80018cc:	438a      	bics	r2, r1
 80018ce:	621a      	str	r2, [r3, #32]
 80018d0:	e01c      	b.n	800190c <HAL_RCC_OscConfig+0x3a0>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b05      	cmp	r3, #5
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x388>
 80018da:	4bae      	ldr	r3, [pc, #696]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80018dc:	6a1a      	ldr	r2, [r3, #32]
 80018de:	4bad      	ldr	r3, [pc, #692]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80018e0:	2104      	movs	r1, #4
 80018e2:	430a      	orrs	r2, r1
 80018e4:	621a      	str	r2, [r3, #32]
 80018e6:	4bab      	ldr	r3, [pc, #684]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80018e8:	6a1a      	ldr	r2, [r3, #32]
 80018ea:	4baa      	ldr	r3, [pc, #680]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80018ec:	2101      	movs	r1, #1
 80018ee:	430a      	orrs	r2, r1
 80018f0:	621a      	str	r2, [r3, #32]
 80018f2:	e00b      	b.n	800190c <HAL_RCC_OscConfig+0x3a0>
 80018f4:	4ba7      	ldr	r3, [pc, #668]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80018f6:	6a1a      	ldr	r2, [r3, #32]
 80018f8:	4ba6      	ldr	r3, [pc, #664]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	438a      	bics	r2, r1
 80018fe:	621a      	str	r2, [r3, #32]
 8001900:	4ba4      	ldr	r3, [pc, #656]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001902:	6a1a      	ldr	r2, [r3, #32]
 8001904:	4ba3      	ldr	r3, [pc, #652]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001906:	2104      	movs	r1, #4
 8001908:	438a      	bics	r2, r1
 800190a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d014      	beq.n	800193e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001914:	f7ff f9bc 	bl	8000c90 <HAL_GetTick>
 8001918:	0003      	movs	r3, r0
 800191a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191c:	e009      	b.n	8001932 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff f9b7 	bl	8000c90 <HAL_GetTick>
 8001922:	0002      	movs	r2, r0
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	4a9b      	ldr	r2, [pc, #620]	@ (8001b98 <HAL_RCC_OscConfig+0x62c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e12b      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001932:	4b98      	ldr	r3, [pc, #608]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	2202      	movs	r2, #2
 8001938:	4013      	ands	r3, r2
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x3b2>
 800193c:	e013      	b.n	8001966 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7ff f9a7 	bl	8000c90 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001946:	e009      	b.n	800195c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff f9a2 	bl	8000c90 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	4a91      	ldr	r2, [pc, #580]	@ (8001b98 <HAL_RCC_OscConfig+0x62c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e116      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195c:	4b8d      	ldr	r3, [pc, #564]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	2202      	movs	r2, #2
 8001962:	4013      	ands	r3, r2
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001966:	231f      	movs	r3, #31
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001970:	4b88      	ldr	r3, [pc, #544]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001972:	69da      	ldr	r2, [r3, #28]
 8001974:	4b87      	ldr	r3, [pc, #540]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001976:	4989      	ldr	r1, [pc, #548]	@ (8001b9c <HAL_RCC_OscConfig+0x630>)
 8001978:	400a      	ands	r2, r1
 800197a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2210      	movs	r2, #16
 8001982:	4013      	ands	r3, r2
 8001984:	d063      	beq.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d12a      	bne.n	80019e4 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800198e:	4b81      	ldr	r3, [pc, #516]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001992:	4b80      	ldr	r3, [pc, #512]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001994:	2104      	movs	r1, #4
 8001996:	430a      	orrs	r2, r1
 8001998:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800199a:	4b7e      	ldr	r3, [pc, #504]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 800199c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800199e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80019a0:	2101      	movs	r1, #1
 80019a2:	430a      	orrs	r2, r1
 80019a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a6:	f7ff f973 	bl	8000c90 <HAL_GetTick>
 80019aa:	0003      	movs	r3, r0
 80019ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019b0:	f7ff f96e 	bl	8000c90 <HAL_GetTick>
 80019b4:	0002      	movs	r2, r0
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e0e3      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019c2:	4b74      	ldr	r3, [pc, #464]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80019c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019c6:	2202      	movs	r2, #2
 80019c8:	4013      	ands	r3, r2
 80019ca:	d0f1      	beq.n	80019b0 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019cc:	4b71      	ldr	r3, [pc, #452]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80019ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d0:	22f8      	movs	r2, #248	@ 0xf8
 80019d2:	4393      	bics	r3, r2
 80019d4:	0019      	movs	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	00da      	lsls	r2, r3, #3
 80019dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80019de:	430a      	orrs	r2, r1
 80019e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019e2:	e034      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	3305      	adds	r3, #5
 80019ea:	d111      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019ec:	4b69      	ldr	r3, [pc, #420]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80019ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019f0:	4b68      	ldr	r3, [pc, #416]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80019f2:	2104      	movs	r1, #4
 80019f4:	438a      	bics	r2, r1
 80019f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019f8:	4b66      	ldr	r3, [pc, #408]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 80019fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fc:	22f8      	movs	r2, #248	@ 0xf8
 80019fe:	4393      	bics	r3, r2
 8001a00:	0019      	movs	r1, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	00da      	lsls	r2, r3, #3
 8001a08:	4b62      	ldr	r3, [pc, #392]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a0e:	e01e      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a10:	4b60      	ldr	r3, [pc, #384]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001a12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a14:	4b5f      	ldr	r3, [pc, #380]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001a16:	2104      	movs	r1, #4
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a1c:	4b5d      	ldr	r3, [pc, #372]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001a1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a20:	4b5c      	ldr	r3, [pc, #368]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001a22:	2101      	movs	r1, #1
 8001a24:	438a      	bics	r2, r1
 8001a26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a28:	f7ff f932 	bl	8000c90 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a32:	f7ff f92d 	bl	8000c90 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e0a2      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a44:	4b53      	ldr	r3, [pc, #332]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a48:	2202      	movs	r2, #2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d1f1      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d100      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4ec>
 8001a56:	e097      	b.n	8001b88 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a58:	4b4e      	ldr	r3, [pc, #312]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	220c      	movs	r2, #12
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d100      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4fa>
 8001a64:	e06b      	b.n	8001b3e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d14c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b49      	ldr	r3, [pc, #292]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b48      	ldr	r3, [pc, #288]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001a74:	494a      	ldr	r1, [pc, #296]	@ (8001ba0 <HAL_RCC_OscConfig+0x634>)
 8001a76:	400a      	ands	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff f909 	bl	8000c90 <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff f904 	bl	8000c90 <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e079      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a96:	4b3f      	ldr	r3, [pc, #252]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	2380      	movs	r3, #128	@ 0x80
 8001a9c:	049b      	lsls	r3, r3, #18
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ab0:	4b38      	ldr	r3, [pc, #224]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ab6:	4b37      	ldr	r3, [pc, #220]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4a3a      	ldr	r2, [pc, #232]	@ (8001ba4 <HAL_RCC_OscConfig+0x638>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	4b32      	ldr	r3, [pc, #200]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b30      	ldr	r3, [pc, #192]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001ad6:	2180      	movs	r1, #128	@ 0x80
 8001ad8:	0449      	lsls	r1, r1, #17
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff f8d7 	bl	8000c90 <HAL_GetTick>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f8d2 	bl	8000c90 <HAL_GetTick>
 8001aec:	0002      	movs	r2, r0
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e047      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afa:	4b26      	ldr	r3, [pc, #152]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	@ 0x80
 8001b00:	049b      	lsls	r3, r3, #18
 8001b02:	4013      	ands	r3, r2
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x57c>
 8001b06:	e03f      	b.n	8001b88 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b08:	4b22      	ldr	r3, [pc, #136]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b21      	ldr	r3, [pc, #132]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001b0e:	4924      	ldr	r1, [pc, #144]	@ (8001ba0 <HAL_RCC_OscConfig+0x634>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff f8bc 	bl	8000c90 <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff f8b7 	bl	8000c90 <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e02c      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b30:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2380      	movs	r3, #128	@ 0x80
 8001b36:	049b      	lsls	r3, r3, #18
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x5b2>
 8001b3c:	e024      	b.n	8001b88 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e01f      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b4a:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b50:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b54:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	23c0      	movs	r3, #192	@ 0xc0
 8001b5a:	025b      	lsls	r3, r3, #9
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d10e      	bne.n	8001b84 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	220f      	movs	r2, #15
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	23f0      	movs	r3, #240	@ 0xf0
 8001b78:	039b      	lsls	r3, r3, #14
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b008      	add	sp, #32
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	40021000 	.word	0x40021000
 8001b98:	00001388 	.word	0x00001388
 8001b9c:	efffffff 	.word	0xefffffff
 8001ba0:	feffffff 	.word	0xfeffffff
 8001ba4:	ffc27fff 	.word	0xffc27fff

08001ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0b3      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b5b      	ldr	r3, [pc, #364]	@ (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d911      	bls.n	8001bee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b58      	ldr	r3, [pc, #352]	@ (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4393      	bics	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	4b55      	ldr	r3, [pc, #340]	@ (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bdc:	4b53      	ldr	r3, [pc, #332]	@ (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e09a      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d015      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d006      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c02:	4b4b      	ldr	r3, [pc, #300]	@ (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	4b4a      	ldr	r3, [pc, #296]	@ (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c08:	21e0      	movs	r1, #224	@ 0xe0
 8001c0a:	00c9      	lsls	r1, r1, #3
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c10:	4b47      	ldr	r3, [pc, #284]	@ (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	22f0      	movs	r2, #240	@ 0xf0
 8001c16:	4393      	bics	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	4b44      	ldr	r3, [pc, #272]	@ (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d040      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b3e      	ldr	r3, [pc, #248]	@ (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	029b      	lsls	r3, r3, #10
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d114      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e06e      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4e:	4b38      	ldr	r3, [pc, #224]	@ (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	@ 0x80
 8001c54:	049b      	lsls	r3, r3, #18
 8001c56:	4013      	ands	r3, r2
 8001c58:	d108      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e062      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5e:	4b34      	ldr	r3, [pc, #208]	@ (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2202      	movs	r2, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e05b      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6c:	4b30      	ldr	r3, [pc, #192]	@ (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2203      	movs	r2, #3
 8001c72:	4393      	bics	r3, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c80:	f7ff f806 	bl	8000c90 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c88:	e009      	b.n	8001c9e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8a:	f7ff f801 	bl	8000c90 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	4a27      	ldr	r2, [pc, #156]	@ (8001d34 <HAL_RCC_ClockConfig+0x18c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e042      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1ec      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d211      	bcs.n	8001ce2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4393      	bics	r3, r2
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd0:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <HAL_RCC_ClockConfig+0x184>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e020      	b.n	8001d24 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d009      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cec:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a11      	ldr	r2, [pc, #68]	@ (8001d38 <HAL_RCC_ClockConfig+0x190>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d00:	f000 f820 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 8001d04:	0001      	movs	r1, r0
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_RCC_ClockConfig+0x188>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	4013      	ands	r3, r2
 8001d10:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <HAL_RCC_ClockConfig+0x194>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	000a      	movs	r2, r1
 8001d16:	40da      	lsrs	r2, r3
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <HAL_RCC_ClockConfig+0x198>)
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	f7fe ff71 	bl	8000c04 <HAL_InitTick>
  
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b004      	add	sp, #16
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	00001388 	.word	0x00001388
 8001d38:	fffff8ff 	.word	0xfffff8ff
 8001d3c:	080039d4 	.word	0x080039d4
 8001d40:	20000000 	.word	0x20000000

08001d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001d5e:	4b21      	ldr	r3, [pc, #132]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	220c      	movs	r2, #12
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d002      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x30>
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d003      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x36>
 8001d72:	e02e      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d76:	613b      	str	r3, [r7, #16]
      break;
 8001d78:	e02e      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	0c9b      	lsrs	r3, r3, #18
 8001d7e:	220f      	movs	r2, #15
 8001d80:	4013      	ands	r3, r2
 8001d82:	4a1a      	ldr	r2, [pc, #104]	@ (8001dec <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d84:	5cd3      	ldrb	r3, [r2, r3]
 8001d86:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d88:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	4013      	ands	r3, r2
 8001d90:	4a17      	ldr	r2, [pc, #92]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	23c0      	movs	r3, #192	@ 0xc0
 8001d9a:	025b      	lsls	r3, r3, #9
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	2380      	movs	r3, #128	@ 0x80
 8001da0:	025b      	lsls	r3, r3, #9
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d109      	bne.n	8001dba <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001da6:	68b9      	ldr	r1, [r7, #8]
 8001da8:	480f      	ldr	r0, [pc, #60]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001daa:	f7fe f9ab 	bl	8000104 <__udivsi3>
 8001dae:	0003      	movs	r3, r0
 8001db0:	001a      	movs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4353      	muls	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	480a      	ldr	r0, [pc, #40]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dbe:	f7fe f9a1 	bl	8000104 <__udivsi3>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4353      	muls	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	613b      	str	r3, [r7, #16]
      break;
 8001dd0:	e002      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dd2:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dd4:	613b      	str	r3, [r7, #16]
      break;
 8001dd6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dd8:	693b      	ldr	r3, [r7, #16]
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b006      	add	sp, #24
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	40021000 	.word	0x40021000
 8001de8:	007a1200 	.word	0x007a1200
 8001dec:	080039ec 	.word	0x080039ec
 8001df0:	080039fc 	.word	0x080039fc

08001df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df8:	4b02      	ldr	r3, [pc, #8]	@ (8001e04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	20000000 	.word	0x20000000

08001e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e0c:	f7ff fff2 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e10:	0001      	movs	r1, r0
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	2207      	movs	r2, #7
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	4a04      	ldr	r2, [pc, #16]	@ (8001e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e1e:	5cd3      	ldrb	r3, [r2, r3]
 8001e20:	40d9      	lsrs	r1, r3
 8001e22:	000b      	movs	r3, r1
}    
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	080039e4 	.word	0x080039e4

08001e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	2380      	movs	r3, #128	@ 0x80
 8001e4a:	025b      	lsls	r3, r3, #9
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d100      	bne.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e50:	e08e      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e52:	2017      	movs	r0, #23
 8001e54:	183b      	adds	r3, r7, r0
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5a:	4b57      	ldr	r3, [pc, #348]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e5c:	69da      	ldr	r2, [r3, #28]
 8001e5e:	2380      	movs	r3, #128	@ 0x80
 8001e60:	055b      	lsls	r3, r3, #21
 8001e62:	4013      	ands	r3, r2
 8001e64:	d110      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	4b54      	ldr	r3, [pc, #336]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e68:	69da      	ldr	r2, [r3, #28]
 8001e6a:	4b53      	ldr	r3, [pc, #332]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e6c:	2180      	movs	r1, #128	@ 0x80
 8001e6e:	0549      	lsls	r1, r1, #21
 8001e70:	430a      	orrs	r2, r1
 8001e72:	61da      	str	r2, [r3, #28]
 8001e74:	4b50      	ldr	r3, [pc, #320]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e76:	69da      	ldr	r2, [r3, #28]
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	055b      	lsls	r3, r3, #21
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e82:	183b      	adds	r3, r7, r0
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	4b4c      	ldr	r3, [pc, #304]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4013      	ands	r3, r2
 8001e92:	d11a      	bne.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e94:	4b49      	ldr	r3, [pc, #292]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b48      	ldr	r3, [pc, #288]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	0049      	lsls	r1, r1, #1
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7fe fef5 	bl	8000c90 <HAL_GetTick>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eaa:	e008      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eac:	f7fe fef0 	bl	8000c90 <HAL_GetTick>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	@ 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e077      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	2380      	movs	r3, #128	@ 0x80
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eca:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ecc:	6a1a      	ldr	r2, [r3, #32]
 8001ece:	23c0      	movs	r3, #192	@ 0xc0
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d034      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	23c0      	movs	r3, #192	@ 0xc0
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d02c      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eec:	4b32      	ldr	r3, [pc, #200]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a33      	ldr	r2, [pc, #204]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef6:	4b30      	ldr	r3, [pc, #192]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ef8:	6a1a      	ldr	r2, [r3, #32]
 8001efa:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001efc:	2180      	movs	r1, #128	@ 0x80
 8001efe:	0249      	lsls	r1, r1, #9
 8001f00:	430a      	orrs	r2, r1
 8001f02:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f04:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f06:	6a1a      	ldr	r2, [r3, #32]
 8001f08:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f0a:	492e      	ldr	r1, [pc, #184]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f10:	4b29      	ldr	r3, [pc, #164]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7fe feb7 	bl	8000c90 <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f26:	e009      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7fe feb2 	bl	8000c90 <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	4a25      	ldr	r2, [pc, #148]	@ (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e038      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	2202      	movs	r2, #2
 8001f42:	4013      	ands	r3, r2
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f46:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	0019      	movs	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f56:	430a      	orrs	r2, r1
 8001f58:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f5a:	2317      	movs	r3, #23
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f64:	4b14      	ldr	r3, [pc, #80]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f66:	69da      	ldr	r2, [r3, #28]
 8001f68:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f6a:	4918      	ldr	r1, [pc, #96]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2201      	movs	r2, #1
 8001f76:	4013      	ands	r3, r2
 8001f78:	d009      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	2203      	movs	r2, #3
 8001f80:	4393      	bics	r3, r2
 8001f82:	0019      	movs	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2220      	movs	r2, #32
 8001f94:	4013      	ands	r3, r2
 8001f96:	d009      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f98:	4b07      	ldr	r3, [pc, #28]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	4393      	bics	r3, r2
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b006      	add	sp, #24
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			@ (mov r8, r8)
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	fffffcff 	.word	0xfffffcff
 8001fc4:	fffeffff 	.word	0xfffeffff
 8001fc8:	00001388 	.word	0x00001388
 8001fcc:	efffffff 	.word	0xefffffff

08001fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e044      	b.n	800206c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d107      	bne.n	8001ffa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2278      	movs	r2, #120	@ 0x78
 8001fee:	2100      	movs	r1, #0
 8001ff0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7fe fb99 	bl	800072c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2224      	movs	r2, #36	@ 0x24
 8001ffe:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2101      	movs	r1, #1
 800200c:	438a      	bics	r2, r1
 800200e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	0018      	movs	r0, r3
 800201c:	f000 fd24 	bl	8002a68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	0018      	movs	r0, r3
 8002024:	f000 fbb0 	bl	8002788 <UART_SetConfig>
 8002028:	0003      	movs	r3, r0
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e01c      	b.n	800206c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	490d      	ldr	r1, [pc, #52]	@ (8002074 <HAL_UART_Init+0xa4>)
 800203e:	400a      	ands	r2, r1
 8002040:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2108      	movs	r1, #8
 800204e:	438a      	bics	r2, r1
 8002050:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	0018      	movs	r0, r3
 8002066:	f000 fdb3 	bl	8002bd0 <UART_CheckIdleState>
 800206a:	0003      	movs	r3, r0
}
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	b002      	add	sp, #8
 8002072:	bd80      	pop	{r7, pc}
 8002074:	fffff7ff 	.word	0xfffff7ff

08002078 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	@ 0x28
 800207c:	af02      	add	r7, sp, #8
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	1dbb      	adds	r3, r7, #6
 8002086:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800208c:	2b20      	cmp	r3, #32
 800208e:	d000      	beq.n	8002092 <HAL_UART_Transmit+0x1a>
 8002090:	e08c      	b.n	80021ac <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_UART_Transmit+0x28>
 8002098:	1dbb      	adds	r3, r7, #6
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e084      	b.n	80021ae <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	2380      	movs	r3, #128	@ 0x80
 80020aa:	015b      	lsls	r3, r3, #5
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d109      	bne.n	80020c4 <HAL_UART_Transmit+0x4c>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2201      	movs	r2, #1
 80020bc:	4013      	ands	r3, r2
 80020be:	d001      	beq.n	80020c4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e074      	b.n	80021ae <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2284      	movs	r2, #132	@ 0x84
 80020c8:	2100      	movs	r1, #0
 80020ca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2221      	movs	r2, #33	@ 0x21
 80020d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020d2:	f7fe fddd 	bl	8000c90 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1dba      	adds	r2, r7, #6
 80020de:	2150      	movs	r1, #80	@ 0x50
 80020e0:	8812      	ldrh	r2, [r2, #0]
 80020e2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1dba      	adds	r2, r7, #6
 80020e8:	2152      	movs	r1, #82	@ 0x52
 80020ea:	8812      	ldrh	r2, [r2, #0]
 80020ec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	2380      	movs	r3, #128	@ 0x80
 80020f4:	015b      	lsls	r3, r3, #5
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d108      	bne.n	800210c <HAL_UART_Transmit+0x94>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d104      	bne.n	800210c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	e003      	b.n	8002114 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002114:	e02f      	b.n	8002176 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	0013      	movs	r3, r2
 8002120:	2200      	movs	r2, #0
 8002122:	2180      	movs	r1, #128	@ 0x80
 8002124:	f000 fdfc 	bl	8002d20 <UART_WaitOnFlagUntilTimeout>
 8002128:	1e03      	subs	r3, r0, #0
 800212a:	d004      	beq.n	8002136 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e03b      	b.n	80021ae <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10b      	bne.n	8002154 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	881a      	ldrh	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	05d2      	lsls	r2, r2, #23
 8002146:	0dd2      	lsrs	r2, r2, #23
 8002148:	b292      	uxth	r2, r2
 800214a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	3302      	adds	r3, #2
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	e007      	b.n	8002164 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3301      	adds	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2252      	movs	r2, #82	@ 0x52
 8002168:	5a9b      	ldrh	r3, [r3, r2]
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b299      	uxth	r1, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2252      	movs	r2, #82	@ 0x52
 8002174:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2252      	movs	r2, #82	@ 0x52
 800217a:	5a9b      	ldrh	r3, [r3, r2]
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1c9      	bne.n	8002116 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	0013      	movs	r3, r2
 800218c:	2200      	movs	r2, #0
 800218e:	2140      	movs	r1, #64	@ 0x40
 8002190:	f000 fdc6 	bl	8002d20 <UART_WaitOnFlagUntilTimeout>
 8002194:	1e03      	subs	r3, r0, #0
 8002196:	d004      	beq.n	80021a2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e005      	b.n	80021ae <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2220      	movs	r2, #32
 80021a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e000      	b.n	80021ae <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
  }
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b008      	add	sp, #32
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b0ab      	sub	sp, #172	@ 0xac
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	22a4      	movs	r2, #164	@ 0xa4
 80021c8:	18b9      	adds	r1, r7, r2
 80021ca:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	20a0      	movs	r0, #160	@ 0xa0
 80021d4:	1839      	adds	r1, r7, r0
 80021d6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	219c      	movs	r1, #156	@ 0x9c
 80021e0:	1879      	adds	r1, r7, r1
 80021e2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80021e4:	0011      	movs	r1, r2
 80021e6:	18bb      	adds	r3, r7, r2
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a99      	ldr	r2, [pc, #612]	@ (8002450 <HAL_UART_IRQHandler+0x298>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	2298      	movs	r2, #152	@ 0x98
 80021f0:	18bc      	adds	r4, r7, r2
 80021f2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80021f4:	18bb      	adds	r3, r7, r2
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d114      	bne.n	8002226 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80021fc:	187b      	adds	r3, r7, r1
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2220      	movs	r2, #32
 8002202:	4013      	ands	r3, r2
 8002204:	d00f      	beq.n	8002226 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002206:	183b      	adds	r3, r7, r0
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2220      	movs	r2, #32
 800220c:	4013      	ands	r3, r2
 800220e:	d00a      	beq.n	8002226 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002214:	2b00      	cmp	r3, #0
 8002216:	d100      	bne.n	800221a <HAL_UART_IRQHandler+0x62>
 8002218:	e286      	b.n	8002728 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	0010      	movs	r0, r2
 8002222:	4798      	blx	r3
      }
      return;
 8002224:	e280      	b.n	8002728 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002226:	2398      	movs	r3, #152	@ 0x98
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d100      	bne.n	8002232 <HAL_UART_IRQHandler+0x7a>
 8002230:	e114      	b.n	800245c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002232:	239c      	movs	r3, #156	@ 0x9c
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2201      	movs	r2, #1
 800223a:	4013      	ands	r3, r2
 800223c:	d106      	bne.n	800224c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800223e:	23a0      	movs	r3, #160	@ 0xa0
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a83      	ldr	r2, [pc, #524]	@ (8002454 <HAL_UART_IRQHandler+0x29c>)
 8002246:	4013      	ands	r3, r2
 8002248:	d100      	bne.n	800224c <HAL_UART_IRQHandler+0x94>
 800224a:	e107      	b.n	800245c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800224c:	23a4      	movs	r3, #164	@ 0xa4
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2201      	movs	r2, #1
 8002254:	4013      	ands	r3, r2
 8002256:	d012      	beq.n	800227e <HAL_UART_IRQHandler+0xc6>
 8002258:	23a0      	movs	r3, #160	@ 0xa0
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	2380      	movs	r3, #128	@ 0x80
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4013      	ands	r3, r2
 8002264:	d00b      	beq.n	800227e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2201      	movs	r2, #1
 800226c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2284      	movs	r2, #132	@ 0x84
 8002272:	589b      	ldr	r3, [r3, r2]
 8002274:	2201      	movs	r2, #1
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2184      	movs	r1, #132	@ 0x84
 800227c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800227e:	23a4      	movs	r3, #164	@ 0xa4
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2202      	movs	r2, #2
 8002286:	4013      	ands	r3, r2
 8002288:	d011      	beq.n	80022ae <HAL_UART_IRQHandler+0xf6>
 800228a:	239c      	movs	r3, #156	@ 0x9c
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2201      	movs	r2, #1
 8002292:	4013      	ands	r3, r2
 8002294:	d00b      	beq.n	80022ae <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2202      	movs	r2, #2
 800229c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2284      	movs	r2, #132	@ 0x84
 80022a2:	589b      	ldr	r3, [r3, r2]
 80022a4:	2204      	movs	r2, #4
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2184      	movs	r1, #132	@ 0x84
 80022ac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80022ae:	23a4      	movs	r3, #164	@ 0xa4
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2204      	movs	r2, #4
 80022b6:	4013      	ands	r3, r2
 80022b8:	d011      	beq.n	80022de <HAL_UART_IRQHandler+0x126>
 80022ba:	239c      	movs	r3, #156	@ 0x9c
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2201      	movs	r2, #1
 80022c2:	4013      	ands	r3, r2
 80022c4:	d00b      	beq.n	80022de <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2204      	movs	r2, #4
 80022cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2284      	movs	r2, #132	@ 0x84
 80022d2:	589b      	ldr	r3, [r3, r2]
 80022d4:	2202      	movs	r2, #2
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2184      	movs	r1, #132	@ 0x84
 80022dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80022de:	23a4      	movs	r3, #164	@ 0xa4
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2208      	movs	r2, #8
 80022e6:	4013      	ands	r3, r2
 80022e8:	d017      	beq.n	800231a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022ea:	23a0      	movs	r3, #160	@ 0xa0
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2220      	movs	r2, #32
 80022f2:	4013      	ands	r3, r2
 80022f4:	d105      	bne.n	8002302 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80022f6:	239c      	movs	r3, #156	@ 0x9c
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2201      	movs	r2, #1
 80022fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002300:	d00b      	beq.n	800231a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2208      	movs	r2, #8
 8002308:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2284      	movs	r2, #132	@ 0x84
 800230e:	589b      	ldr	r3, [r3, r2]
 8002310:	2208      	movs	r2, #8
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2184      	movs	r1, #132	@ 0x84
 8002318:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800231a:	23a4      	movs	r3, #164	@ 0xa4
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	4013      	ands	r3, r2
 8002326:	d013      	beq.n	8002350 <HAL_UART_IRQHandler+0x198>
 8002328:	23a0      	movs	r3, #160	@ 0xa0
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	@ 0x80
 8002330:	04db      	lsls	r3, r3, #19
 8002332:	4013      	ands	r3, r2
 8002334:	d00c      	beq.n	8002350 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2280      	movs	r2, #128	@ 0x80
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2284      	movs	r2, #132	@ 0x84
 8002344:	589b      	ldr	r3, [r3, r2]
 8002346:	2220      	movs	r2, #32
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2184      	movs	r1, #132	@ 0x84
 800234e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2284      	movs	r2, #132	@ 0x84
 8002354:	589b      	ldr	r3, [r3, r2]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d100      	bne.n	800235c <HAL_UART_IRQHandler+0x1a4>
 800235a:	e1e7      	b.n	800272c <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800235c:	23a4      	movs	r3, #164	@ 0xa4
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2220      	movs	r2, #32
 8002364:	4013      	ands	r3, r2
 8002366:	d00e      	beq.n	8002386 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002368:	23a0      	movs	r3, #160	@ 0xa0
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2220      	movs	r2, #32
 8002370:	4013      	ands	r3, r2
 8002372:	d008      	beq.n	8002386 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002378:	2b00      	cmp	r3, #0
 800237a:	d004      	beq.n	8002386 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	0010      	movs	r0, r2
 8002384:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2284      	movs	r2, #132	@ 0x84
 800238a:	589b      	ldr	r3, [r3, r2]
 800238c:	2194      	movs	r1, #148	@ 0x94
 800238e:	187a      	adds	r2, r7, r1
 8002390:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2240      	movs	r2, #64	@ 0x40
 800239a:	4013      	ands	r3, r2
 800239c:	2b40      	cmp	r3, #64	@ 0x40
 800239e:	d004      	beq.n	80023aa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80023a0:	187b      	adds	r3, r7, r1
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2228      	movs	r2, #40	@ 0x28
 80023a6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80023a8:	d047      	beq.n	800243a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f000 feb5 	bl	800311c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2240      	movs	r2, #64	@ 0x40
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b40      	cmp	r3, #64	@ 0x40
 80023be:	d137      	bne.n	8002430 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c0:	f3ef 8310 	mrs	r3, PRIMASK
 80023c4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80023c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023c8:	2090      	movs	r0, #144	@ 0x90
 80023ca:	183a      	adds	r2, r7, r0
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	2301      	movs	r3, #1
 80023d0:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023d4:	f383 8810 	msr	PRIMASK, r3
}
 80023d8:	46c0      	nop			@ (mov r8, r8)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2140      	movs	r1, #64	@ 0x40
 80023e6:	438a      	bics	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	183b      	adds	r3, r7, r0
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023f2:	f383 8810 	msr	PRIMASK, r3
}
 80023f6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d012      	beq.n	8002426 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002404:	4a14      	ldr	r2, [pc, #80]	@ (8002458 <HAL_UART_IRQHandler+0x2a0>)
 8002406:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800240c:	0018      	movs	r0, r3
 800240e:	f7fe fe0d 	bl	800102c <HAL_DMA_Abort_IT>
 8002412:	1e03      	subs	r3, r0, #0
 8002414:	d01a      	beq.n	800244c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002420:	0018      	movs	r0, r3
 8002422:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002424:	e012      	b.n	800244c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0018      	movs	r0, r3
 800242a:	f000 f9a5 	bl	8002778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800242e:	e00d      	b.n	800244c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	0018      	movs	r0, r3
 8002434:	f000 f9a0 	bl	8002778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002438:	e008      	b.n	800244c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f99b 	bl	8002778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2284      	movs	r2, #132	@ 0x84
 8002446:	2100      	movs	r1, #0
 8002448:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800244a:	e16f      	b.n	800272c <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800244c:	46c0      	nop			@ (mov r8, r8)
    return;
 800244e:	e16d      	b.n	800272c <HAL_UART_IRQHandler+0x574>
 8002450:	0000080f 	.word	0x0000080f
 8002454:	04000120 	.word	0x04000120
 8002458:	080033d7 	.word	0x080033d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002460:	2b01      	cmp	r3, #1
 8002462:	d000      	beq.n	8002466 <HAL_UART_IRQHandler+0x2ae>
 8002464:	e139      	b.n	80026da <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002466:	23a4      	movs	r3, #164	@ 0xa4
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2210      	movs	r2, #16
 800246e:	4013      	ands	r3, r2
 8002470:	d100      	bne.n	8002474 <HAL_UART_IRQHandler+0x2bc>
 8002472:	e132      	b.n	80026da <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002474:	23a0      	movs	r3, #160	@ 0xa0
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2210      	movs	r2, #16
 800247c:	4013      	ands	r3, r2
 800247e:	d100      	bne.n	8002482 <HAL_UART_IRQHandler+0x2ca>
 8002480:	e12b      	b.n	80026da <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2210      	movs	r2, #16
 8002488:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2240      	movs	r2, #64	@ 0x40
 8002492:	4013      	ands	r3, r2
 8002494:	2b40      	cmp	r3, #64	@ 0x40
 8002496:	d000      	beq.n	800249a <HAL_UART_IRQHandler+0x2e2>
 8002498:	e09f      	b.n	80025da <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	217e      	movs	r1, #126	@ 0x7e
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d100      	bne.n	80024b2 <HAL_UART_IRQHandler+0x2fa>
 80024b0:	e13e      	b.n	8002730 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2258      	movs	r2, #88	@ 0x58
 80024b6:	5a9b      	ldrh	r3, [r3, r2]
 80024b8:	187a      	adds	r2, r7, r1
 80024ba:	8812      	ldrh	r2, [r2, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d300      	bcc.n	80024c2 <HAL_UART_IRQHandler+0x30a>
 80024c0:	e136      	b.n	8002730 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	187a      	adds	r2, r7, r1
 80024c6:	215a      	movs	r1, #90	@ 0x5a
 80024c8:	8812      	ldrh	r2, [r2, #0]
 80024ca:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	d06f      	beq.n	80025b6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024d6:	f3ef 8310 	mrs	r3, PRIMASK
 80024da:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80024dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024e0:	2301      	movs	r3, #1
 80024e2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e6:	f383 8810 	msr	PRIMASK, r3
}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4992      	ldr	r1, [pc, #584]	@ (8002740 <HAL_UART_IRQHandler+0x588>)
 80024f8:	400a      	ands	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002502:	f383 8810 	msr	PRIMASK, r3
}
 8002506:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002508:	f3ef 8310 	mrs	r3, PRIMASK
 800250c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800250e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002510:	677b      	str	r3, [r7, #116]	@ 0x74
 8002512:	2301      	movs	r3, #1
 8002514:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002518:	f383 8810 	msr	PRIMASK, r3
}
 800251c:	46c0      	nop			@ (mov r8, r8)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	438a      	bics	r2, r1
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002530:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002534:	f383 8810 	msr	PRIMASK, r3
}
 8002538:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800253a:	f3ef 8310 	mrs	r3, PRIMASK
 800253e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002542:	673b      	str	r3, [r7, #112]	@ 0x70
 8002544:	2301      	movs	r3, #1
 8002546:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800254a:	f383 8810 	msr	PRIMASK, r3
}
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2140      	movs	r1, #64	@ 0x40
 800255c:	438a      	bics	r2, r1
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002562:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002566:	f383 8810 	msr	PRIMASK, r3
}
 800256a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2280      	movs	r2, #128	@ 0x80
 8002570:	2120      	movs	r1, #32
 8002572:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800257a:	f3ef 8310 	mrs	r3, PRIMASK
 800257e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002582:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002584:	2301      	movs	r3, #1
 8002586:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002588:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800258a:	f383 8810 	msr	PRIMASK, r3
}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2110      	movs	r1, #16
 800259c:	438a      	bics	r2, r1
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025a6:	f383 8810 	msr	PRIMASK, r3
}
 80025aa:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7fe fd03 	bl	8000fbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2258      	movs	r2, #88	@ 0x58
 80025c0:	5a9a      	ldrh	r2, [r3, r2]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	215a      	movs	r1, #90	@ 0x5a
 80025c6:	5a5b      	ldrh	r3, [r3, r1]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	0011      	movs	r1, r2
 80025d2:	0018      	movs	r0, r3
 80025d4:	f7fd fe58 	bl	8000288 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80025d8:	e0aa      	b.n	8002730 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2258      	movs	r2, #88	@ 0x58
 80025de:	5a99      	ldrh	r1, [r3, r2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	225a      	movs	r2, #90	@ 0x5a
 80025e4:	5a9b      	ldrh	r3, [r3, r2]
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	208e      	movs	r0, #142	@ 0x8e
 80025ea:	183b      	adds	r3, r7, r0
 80025ec:	1a8a      	subs	r2, r1, r2
 80025ee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	225a      	movs	r2, #90	@ 0x5a
 80025f4:	5a9b      	ldrh	r3, [r3, r2]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d100      	bne.n	80025fe <HAL_UART_IRQHandler+0x446>
 80025fc:	e09a      	b.n	8002734 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80025fe:	183b      	adds	r3, r7, r0
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d100      	bne.n	8002608 <HAL_UART_IRQHandler+0x450>
 8002606:	e095      	b.n	8002734 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002608:	f3ef 8310 	mrs	r3, PRIMASK
 800260c:	60fb      	str	r3, [r7, #12]
  return(result);
 800260e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002610:	2488      	movs	r4, #136	@ 0x88
 8002612:	193a      	adds	r2, r7, r4
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	2301      	movs	r3, #1
 8002618:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f383 8810 	msr	PRIMASK, r3
}
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4945      	ldr	r1, [pc, #276]	@ (8002744 <HAL_UART_IRQHandler+0x58c>)
 800262e:	400a      	ands	r2, r1
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	193b      	adds	r3, r7, r4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f383 8810 	msr	PRIMASK, r3
}
 800263e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002640:	f3ef 8310 	mrs	r3, PRIMASK
 8002644:	61bb      	str	r3, [r7, #24]
  return(result);
 8002646:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002648:	2484      	movs	r4, #132	@ 0x84
 800264a:	193a      	adds	r2, r7, r4
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	2301      	movs	r3, #1
 8002650:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f383 8810 	msr	PRIMASK, r3
}
 8002658:	46c0      	nop			@ (mov r8, r8)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	438a      	bics	r2, r1
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	193b      	adds	r3, r7, r4
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	f383 8810 	msr	PRIMASK, r3
}
 8002676:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2280      	movs	r2, #128	@ 0x80
 800267c:	2120      	movs	r1, #32
 800267e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800268c:	f3ef 8310 	mrs	r3, PRIMASK
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002694:	2480      	movs	r4, #128	@ 0x80
 8002696:	193a      	adds	r2, r7, r4
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	2301      	movs	r3, #1
 800269c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a0:	f383 8810 	msr	PRIMASK, r3
}
 80026a4:	46c0      	nop			@ (mov r8, r8)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2110      	movs	r1, #16
 80026b2:	438a      	bics	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	193b      	adds	r3, r7, r4
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026be:	f383 8810 	msr	PRIMASK, r3
}
 80026c2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026ca:	183b      	adds	r3, r7, r0
 80026cc:	881a      	ldrh	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7fd fdd8 	bl	8000288 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80026d8:	e02c      	b.n	8002734 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80026da:	23a4      	movs	r3, #164	@ 0xa4
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2280      	movs	r2, #128	@ 0x80
 80026e2:	4013      	ands	r3, r2
 80026e4:	d00f      	beq.n	8002706 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80026e6:	23a0      	movs	r3, #160	@ 0xa0
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2280      	movs	r2, #128	@ 0x80
 80026ee:	4013      	ands	r3, r2
 80026f0:	d009      	beq.n	8002706 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01e      	beq.n	8002738 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	0010      	movs	r0, r2
 8002702:	4798      	blx	r3
    }
    return;
 8002704:	e018      	b.n	8002738 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002706:	23a4      	movs	r3, #164	@ 0xa4
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2240      	movs	r2, #64	@ 0x40
 800270e:	4013      	ands	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_UART_IRQHandler+0x582>
 8002712:	23a0      	movs	r3, #160	@ 0xa0
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2240      	movs	r2, #64	@ 0x40
 800271a:	4013      	ands	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	0018      	movs	r0, r3
 8002722:	f000 fe6f 	bl	8003404 <UART_EndTransmit_IT>
    return;
 8002726:	e008      	b.n	800273a <HAL_UART_IRQHandler+0x582>
      return;
 8002728:	46c0      	nop			@ (mov r8, r8)
 800272a:	e006      	b.n	800273a <HAL_UART_IRQHandler+0x582>
    return;
 800272c:	46c0      	nop			@ (mov r8, r8)
 800272e:	e004      	b.n	800273a <HAL_UART_IRQHandler+0x582>
      return;
 8002730:	46c0      	nop			@ (mov r8, r8)
 8002732:	e002      	b.n	800273a <HAL_UART_IRQHandler+0x582>
      return;
 8002734:	46c0      	nop			@ (mov r8, r8)
 8002736:	e000      	b.n	800273a <HAL_UART_IRQHandler+0x582>
    return;
 8002738:	46c0      	nop			@ (mov r8, r8)
  }

}
 800273a:	46bd      	mov	sp, r7
 800273c:	b02b      	add	sp, #172	@ 0xac
 800273e:	bd90      	pop	{r4, r7, pc}
 8002740:	fffffeff 	.word	0xfffffeff
 8002744:	fffffedf 	.word	0xfffffedf

08002748 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002760:	46c0      	nop			@ (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	b002      	add	sp, #8
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002770:	46c0      	nop			@ (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002780:	46c0      	nop			@ (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b002      	add	sp, #8
 8002786:	bd80      	pop	{r7, pc}

08002788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002790:	231e      	movs	r3, #30
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4aa1      	ldr	r2, [pc, #644]	@ (8002a3c <UART_SetConfig+0x2b4>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	0019      	movs	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	4a9c      	ldr	r2, [pc, #624]	@ (8002a40 <UART_SetConfig+0x2b8>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	0019      	movs	r1, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4a93      	ldr	r2, [pc, #588]	@ (8002a44 <UART_SetConfig+0x2bc>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	0019      	movs	r1, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	430a      	orrs	r2, r1
 8002802:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a8f      	ldr	r2, [pc, #572]	@ (8002a48 <UART_SetConfig+0x2c0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d127      	bne.n	800285e <UART_SetConfig+0xd6>
 800280e:	4b8f      	ldr	r3, [pc, #572]	@ (8002a4c <UART_SetConfig+0x2c4>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	2203      	movs	r2, #3
 8002814:	4013      	ands	r3, r2
 8002816:	2b03      	cmp	r3, #3
 8002818:	d00d      	beq.n	8002836 <UART_SetConfig+0xae>
 800281a:	d81b      	bhi.n	8002854 <UART_SetConfig+0xcc>
 800281c:	2b02      	cmp	r3, #2
 800281e:	d014      	beq.n	800284a <UART_SetConfig+0xc2>
 8002820:	d818      	bhi.n	8002854 <UART_SetConfig+0xcc>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <UART_SetConfig+0xa4>
 8002826:	2b01      	cmp	r3, #1
 8002828:	d00a      	beq.n	8002840 <UART_SetConfig+0xb8>
 800282a:	e013      	b.n	8002854 <UART_SetConfig+0xcc>
 800282c:	231f      	movs	r3, #31
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e049      	b.n	80028ca <UART_SetConfig+0x142>
 8002836:	231f      	movs	r3, #31
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2202      	movs	r2, #2
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	e044      	b.n	80028ca <UART_SetConfig+0x142>
 8002840:	231f      	movs	r3, #31
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	2204      	movs	r2, #4
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e03f      	b.n	80028ca <UART_SetConfig+0x142>
 800284a:	231f      	movs	r3, #31
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	2208      	movs	r2, #8
 8002850:	701a      	strb	r2, [r3, #0]
 8002852:	e03a      	b.n	80028ca <UART_SetConfig+0x142>
 8002854:	231f      	movs	r3, #31
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	2210      	movs	r2, #16
 800285a:	701a      	strb	r2, [r3, #0]
 800285c:	e035      	b.n	80028ca <UART_SetConfig+0x142>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7b      	ldr	r2, [pc, #492]	@ (8002a50 <UART_SetConfig+0x2c8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d104      	bne.n	8002872 <UART_SetConfig+0xea>
 8002868:	231f      	movs	r3, #31
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e02b      	b.n	80028ca <UART_SetConfig+0x142>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a77      	ldr	r2, [pc, #476]	@ (8002a54 <UART_SetConfig+0x2cc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d104      	bne.n	8002886 <UART_SetConfig+0xfe>
 800287c:	231f      	movs	r3, #31
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	e021      	b.n	80028ca <UART_SetConfig+0x142>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a73      	ldr	r2, [pc, #460]	@ (8002a58 <UART_SetConfig+0x2d0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d104      	bne.n	800289a <UART_SetConfig+0x112>
 8002890:	231f      	movs	r3, #31
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	e017      	b.n	80028ca <UART_SetConfig+0x142>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a6f      	ldr	r2, [pc, #444]	@ (8002a5c <UART_SetConfig+0x2d4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d104      	bne.n	80028ae <UART_SetConfig+0x126>
 80028a4:	231f      	movs	r3, #31
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	e00d      	b.n	80028ca <UART_SetConfig+0x142>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a6b      	ldr	r2, [pc, #428]	@ (8002a60 <UART_SetConfig+0x2d8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d104      	bne.n	80028c2 <UART_SetConfig+0x13a>
 80028b8:	231f      	movs	r3, #31
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	e003      	b.n	80028ca <UART_SetConfig+0x142>
 80028c2:	231f      	movs	r3, #31
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	2210      	movs	r2, #16
 80028c8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69da      	ldr	r2, [r3, #28]
 80028ce:	2380      	movs	r3, #128	@ 0x80
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d15c      	bne.n	8002990 <UART_SetConfig+0x208>
  {
    switch (clocksource)
 80028d6:	231f      	movs	r3, #31
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d015      	beq.n	800290c <UART_SetConfig+0x184>
 80028e0:	dc18      	bgt.n	8002914 <UART_SetConfig+0x18c>
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d00d      	beq.n	8002902 <UART_SetConfig+0x17a>
 80028e6:	dc15      	bgt.n	8002914 <UART_SetConfig+0x18c>
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <UART_SetConfig+0x16a>
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d005      	beq.n	80028fc <UART_SetConfig+0x174>
 80028f0:	e010      	b.n	8002914 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028f2:	f7ff fa89 	bl	8001e08 <HAL_RCC_GetPCLK1Freq>
 80028f6:	0003      	movs	r3, r0
 80028f8:	61bb      	str	r3, [r7, #24]
        break;
 80028fa:	e012      	b.n	8002922 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028fc:	4b59      	ldr	r3, [pc, #356]	@ (8002a64 <UART_SetConfig+0x2dc>)
 80028fe:	61bb      	str	r3, [r7, #24]
        break;
 8002900:	e00f      	b.n	8002922 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002902:	f7ff fa1f 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 8002906:	0003      	movs	r3, r0
 8002908:	61bb      	str	r3, [r7, #24]
        break;
 800290a:	e00a      	b.n	8002922 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	61bb      	str	r3, [r7, #24]
        break;
 8002912:	e006      	b.n	8002922 <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002918:	231e      	movs	r3, #30
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	2201      	movs	r2, #1
 800291e:	701a      	strb	r2, [r3, #0]
        break;
 8002920:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d100      	bne.n	800292a <UART_SetConfig+0x1a2>
 8002928:	e07a      	b.n	8002a20 <UART_SetConfig+0x298>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	005a      	lsls	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	18d2      	adds	r2, r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	0019      	movs	r1, r3
 800293c:	0010      	movs	r0, r2
 800293e:	f7fd fbe1 	bl	8000104 <__udivsi3>
 8002942:	0003      	movs	r3, r0
 8002944:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b0f      	cmp	r3, #15
 800294a:	d91c      	bls.n	8002986 <UART_SetConfig+0x1fe>
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	2380      	movs	r3, #128	@ 0x80
 8002950:	025b      	lsls	r3, r3, #9
 8002952:	429a      	cmp	r2, r3
 8002954:	d217      	bcs.n	8002986 <UART_SetConfig+0x1fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	b29a      	uxth	r2, r3
 800295a:	200e      	movs	r0, #14
 800295c:	183b      	adds	r3, r7, r0
 800295e:	210f      	movs	r1, #15
 8002960:	438a      	bics	r2, r1
 8002962:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	b29b      	uxth	r3, r3
 800296a:	2207      	movs	r2, #7
 800296c:	4013      	ands	r3, r2
 800296e:	b299      	uxth	r1, r3
 8002970:	183b      	adds	r3, r7, r0
 8002972:	183a      	adds	r2, r7, r0
 8002974:	8812      	ldrh	r2, [r2, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	183a      	adds	r2, r7, r0
 8002980:	8812      	ldrh	r2, [r2, #0]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	e04c      	b.n	8002a20 <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8002986:	231e      	movs	r3, #30
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	2201      	movs	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e047      	b.n	8002a20 <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002990:	231f      	movs	r3, #31
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b08      	cmp	r3, #8
 8002998:	d015      	beq.n	80029c6 <UART_SetConfig+0x23e>
 800299a:	dc18      	bgt.n	80029ce <UART_SetConfig+0x246>
 800299c:	2b04      	cmp	r3, #4
 800299e:	d00d      	beq.n	80029bc <UART_SetConfig+0x234>
 80029a0:	dc15      	bgt.n	80029ce <UART_SetConfig+0x246>
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <UART_SetConfig+0x224>
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d005      	beq.n	80029b6 <UART_SetConfig+0x22e>
 80029aa:	e010      	b.n	80029ce <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029ac:	f7ff fa2c 	bl	8001e08 <HAL_RCC_GetPCLK1Freq>
 80029b0:	0003      	movs	r3, r0
 80029b2:	61bb      	str	r3, [r7, #24]
        break;
 80029b4:	e012      	b.n	80029dc <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a64 <UART_SetConfig+0x2dc>)
 80029b8:	61bb      	str	r3, [r7, #24]
        break;
 80029ba:	e00f      	b.n	80029dc <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029bc:	f7ff f9c2 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 80029c0:	0003      	movs	r3, r0
 80029c2:	61bb      	str	r3, [r7, #24]
        break;
 80029c4:	e00a      	b.n	80029dc <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029c6:	2380      	movs	r3, #128	@ 0x80
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	61bb      	str	r3, [r7, #24]
        break;
 80029cc:	e006      	b.n	80029dc <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029d2:	231e      	movs	r3, #30
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
        break;
 80029da:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d01e      	beq.n	8002a20 <UART_SetConfig+0x298>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	085a      	lsrs	r2, r3, #1
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	18d2      	adds	r2, r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	0019      	movs	r1, r3
 80029f2:	0010      	movs	r0, r2
 80029f4:	f7fd fb86 	bl	8000104 <__udivsi3>
 80029f8:	0003      	movs	r3, r0
 80029fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b0f      	cmp	r3, #15
 8002a00:	d90a      	bls.n	8002a18 <UART_SetConfig+0x290>
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	2380      	movs	r3, #128	@ 0x80
 8002a06:	025b      	lsls	r3, r3, #9
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d205      	bcs.n	8002a18 <UART_SetConfig+0x290>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	e003      	b.n	8002a20 <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8002a18:	231e      	movs	r3, #30
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002a2c:	231e      	movs	r3, #30
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	781b      	ldrb	r3, [r3, #0]
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b008      	add	sp, #32
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	efff69f3 	.word	0xefff69f3
 8002a40:	ffffcfff 	.word	0xffffcfff
 8002a44:	fffff4ff 	.word	0xfffff4ff
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40004400 	.word	0x40004400
 8002a54:	40004800 	.word	0x40004800
 8002a58:	40004c00 	.word	0x40004c00
 8002a5c:	40005000 	.word	0x40005000
 8002a60:	40011400 	.word	0x40011400
 8002a64:	007a1200 	.word	0x007a1200

08002a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	2208      	movs	r2, #8
 8002a76:	4013      	ands	r3, r2
 8002a78:	d00b      	beq.n	8002a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a4a      	ldr	r2, [pc, #296]	@ (8002bac <UART_AdvFeatureConfig+0x144>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	0019      	movs	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a96:	2201      	movs	r2, #1
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d00b      	beq.n	8002ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4a43      	ldr	r2, [pc, #268]	@ (8002bb0 <UART_AdvFeatureConfig+0x148>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	2202      	movs	r2, #2
 8002aba:	4013      	ands	r3, r2
 8002abc:	d00b      	beq.n	8002ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4a3b      	ldr	r2, [pc, #236]	@ (8002bb4 <UART_AdvFeatureConfig+0x14c>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	0019      	movs	r1, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	2204      	movs	r2, #4
 8002adc:	4013      	ands	r3, r2
 8002ade:	d00b      	beq.n	8002af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a34      	ldr	r2, [pc, #208]	@ (8002bb8 <UART_AdvFeatureConfig+0x150>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	2210      	movs	r2, #16
 8002afe:	4013      	ands	r3, r2
 8002b00:	d00b      	beq.n	8002b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4a2c      	ldr	r2, [pc, #176]	@ (8002bbc <UART_AdvFeatureConfig+0x154>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	2220      	movs	r2, #32
 8002b20:	4013      	ands	r3, r2
 8002b22:	d00b      	beq.n	8002b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	4a25      	ldr	r2, [pc, #148]	@ (8002bc0 <UART_AdvFeatureConfig+0x158>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	0019      	movs	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	2240      	movs	r2, #64	@ 0x40
 8002b42:	4013      	ands	r3, r2
 8002b44:	d01d      	beq.n	8002b82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc4 <UART_AdvFeatureConfig+0x15c>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b62:	2380      	movs	r3, #128	@ 0x80
 8002b64:	035b      	lsls	r3, r3, #13
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d10b      	bne.n	8002b82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a15      	ldr	r2, [pc, #84]	@ (8002bc8 <UART_AdvFeatureConfig+0x160>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	2280      	movs	r2, #128	@ 0x80
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d00b      	beq.n	8002ba4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4a0e      	ldr	r2, [pc, #56]	@ (8002bcc <UART_AdvFeatureConfig+0x164>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	0019      	movs	r1, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	605a      	str	r2, [r3, #4]
  }
}
 8002ba4:	46c0      	nop			@ (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	ffff7fff 	.word	0xffff7fff
 8002bb0:	fffdffff 	.word	0xfffdffff
 8002bb4:	fffeffff 	.word	0xfffeffff
 8002bb8:	fffbffff 	.word	0xfffbffff
 8002bbc:	ffffefff 	.word	0xffffefff
 8002bc0:	ffffdfff 	.word	0xffffdfff
 8002bc4:	ffefffff 	.word	0xffefffff
 8002bc8:	ff9fffff 	.word	0xff9fffff
 8002bcc:	fff7ffff 	.word	0xfff7ffff

08002bd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b092      	sub	sp, #72	@ 0x48
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2284      	movs	r2, #132	@ 0x84
 8002bdc:	2100      	movs	r1, #0
 8002bde:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002be0:	f7fe f856 	bl	8000c90 <HAL_GetTick>
 8002be4:	0003      	movs	r3, r0
 8002be6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2208      	movs	r2, #8
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d12c      	bne.n	8002c50 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf8:	2280      	movs	r2, #128	@ 0x80
 8002bfa:	0391      	lsls	r1, r2, #14
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4a46      	ldr	r2, [pc, #280]	@ (8002d18 <UART_CheckIdleState+0x148>)
 8002c00:	9200      	str	r2, [sp, #0]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f000 f88c 	bl	8002d20 <UART_WaitOnFlagUntilTimeout>
 8002c08:	1e03      	subs	r3, r0, #0
 8002c0a:	d021      	beq.n	8002c50 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c16:	2301      	movs	r3, #1
 8002c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1c:	f383 8810 	msr	PRIMASK, r3
}
 8002c20:	46c0      	nop			@ (mov r8, r8)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2180      	movs	r1, #128	@ 0x80
 8002c2e:	438a      	bics	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c38:	f383 8810 	msr	PRIMASK, r3
}
 8002c3c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2278      	movs	r2, #120	@ 0x78
 8002c48:	2100      	movs	r1, #0
 8002c4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e05f      	b.n	8002d10 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2204      	movs	r2, #4
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d146      	bne.n	8002cec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c60:	2280      	movs	r2, #128	@ 0x80
 8002c62:	03d1      	lsls	r1, r2, #15
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4a2c      	ldr	r2, [pc, #176]	@ (8002d18 <UART_CheckIdleState+0x148>)
 8002c68:	9200      	str	r2, [sp, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f000 f858 	bl	8002d20 <UART_WaitOnFlagUntilTimeout>
 8002c70:	1e03      	subs	r3, r0, #0
 8002c72:	d03b      	beq.n	8002cec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c74:	f3ef 8310 	mrs	r3, PRIMASK
 8002c78:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c7e:	2301      	movs	r3, #1
 8002c80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f383 8810 	msr	PRIMASK, r3
}
 8002c88:	46c0      	nop			@ (mov r8, r8)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4921      	ldr	r1, [pc, #132]	@ (8002d1c <UART_CheckIdleState+0x14c>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f383 8810 	msr	PRIMASK, r3
}
 8002ca4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8002caa:	61bb      	str	r3, [r7, #24]
  return(result);
 8002cac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cae:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f383 8810 	msr	PRIMASK, r3
}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	438a      	bics	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f383 8810 	msr	PRIMASK, r3
}
 8002cd6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2280      	movs	r2, #128	@ 0x80
 8002cdc:	2120      	movs	r1, #32
 8002cde:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2278      	movs	r2, #120	@ 0x78
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e011      	b.n	8002d10 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2280      	movs	r2, #128	@ 0x80
 8002cf6:	2120      	movs	r1, #32
 8002cf8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2278      	movs	r2, #120	@ 0x78
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b010      	add	sp, #64	@ 0x40
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	01ffffff 	.word	0x01ffffff
 8002d1c:	fffffedf 	.word	0xfffffedf

08002d20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	1dfb      	adds	r3, r7, #7
 8002d2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d30:	e051      	b.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	3301      	adds	r3, #1
 8002d36:	d04e      	beq.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d38:	f7fd ffaa 	bl	8000c90 <HAL_GetTick>
 8002d3c:	0002      	movs	r2, r0
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d302      	bcc.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e051      	b.n	8002df6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2204      	movs	r2, #4
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d03b      	beq.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b80      	cmp	r3, #128	@ 0x80
 8002d62:	d038      	beq.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b40      	cmp	r3, #64	@ 0x40
 8002d68:	d035      	beq.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	2208      	movs	r2, #8
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d111      	bne.n	8002d9c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f000 f9ca 	bl	800311c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2284      	movs	r2, #132	@ 0x84
 8002d8c:	2108      	movs	r1, #8
 8002d8e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2278      	movs	r2, #120	@ 0x78
 8002d94:	2100      	movs	r1, #0
 8002d96:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e02c      	b.n	8002df6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	2380      	movs	r3, #128	@ 0x80
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	401a      	ands	r2, r3
 8002da8:	2380      	movs	r3, #128	@ 0x80
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d112      	bne.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2280      	movs	r2, #128	@ 0x80
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f000 f9ad 	bl	800311c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2284      	movs	r2, #132	@ 0x84
 8002dc6:	2120      	movs	r1, #32
 8002dc8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2278      	movs	r2, #120	@ 0x78
 8002dce:	2100      	movs	r1, #0
 8002dd0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e00f      	b.n	8002df6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	4013      	ands	r3, r2
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	425a      	negs	r2, r3
 8002de6:	4153      	adcs	r3, r2
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	001a      	movs	r2, r3
 8002dec:	1dfb      	adds	r3, r7, #7
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d09e      	beq.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b004      	add	sp, #16
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b090      	sub	sp, #64	@ 0x40
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	1dbb      	adds	r3, r7, #6
 8002e0c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1dba      	adds	r2, r7, #6
 8002e18:	2158      	movs	r1, #88	@ 0x58
 8002e1a:	8812      	ldrh	r2, [r2, #0]
 8002e1c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1dba      	adds	r2, r7, #6
 8002e22:	215a      	movs	r1, #90	@ 0x5a
 8002e24:	8812      	ldrh	r2, [r2, #0]
 8002e26:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	2380      	movs	r3, #128	@ 0x80
 8002e34:	015b      	lsls	r3, r3, #5
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d10d      	bne.n	8002e56 <UART_Start_Receive_IT+0x56>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d104      	bne.n	8002e4c <UART_Start_Receive_IT+0x4c>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	225c      	movs	r2, #92	@ 0x5c
 8002e46:	4950      	ldr	r1, [pc, #320]	@ (8002f88 <UART_Start_Receive_IT+0x188>)
 8002e48:	5299      	strh	r1, [r3, r2]
 8002e4a:	e02e      	b.n	8002eaa <UART_Start_Receive_IT+0xaa>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	225c      	movs	r2, #92	@ 0x5c
 8002e50:	21ff      	movs	r1, #255	@ 0xff
 8002e52:	5299      	strh	r1, [r3, r2]
 8002e54:	e029      	b.n	8002eaa <UART_Start_Receive_IT+0xaa>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10d      	bne.n	8002e7a <UART_Start_Receive_IT+0x7a>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d104      	bne.n	8002e70 <UART_Start_Receive_IT+0x70>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	225c      	movs	r2, #92	@ 0x5c
 8002e6a:	21ff      	movs	r1, #255	@ 0xff
 8002e6c:	5299      	strh	r1, [r3, r2]
 8002e6e:	e01c      	b.n	8002eaa <UART_Start_Receive_IT+0xaa>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	225c      	movs	r2, #92	@ 0x5c
 8002e74:	217f      	movs	r1, #127	@ 0x7f
 8002e76:	5299      	strh	r1, [r3, r2]
 8002e78:	e017      	b.n	8002eaa <UART_Start_Receive_IT+0xaa>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	2380      	movs	r3, #128	@ 0x80
 8002e80:	055b      	lsls	r3, r3, #21
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d10d      	bne.n	8002ea2 <UART_Start_Receive_IT+0xa2>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d104      	bne.n	8002e98 <UART_Start_Receive_IT+0x98>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	225c      	movs	r2, #92	@ 0x5c
 8002e92:	217f      	movs	r1, #127	@ 0x7f
 8002e94:	5299      	strh	r1, [r3, r2]
 8002e96:	e008      	b.n	8002eaa <UART_Start_Receive_IT+0xaa>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	225c      	movs	r2, #92	@ 0x5c
 8002e9c:	213f      	movs	r1, #63	@ 0x3f
 8002e9e:	5299      	strh	r1, [r3, r2]
 8002ea0:	e003      	b.n	8002eaa <UART_Start_Receive_IT+0xaa>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	225c      	movs	r2, #92	@ 0x5c
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2284      	movs	r2, #132	@ 0x84
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2280      	movs	r2, #128	@ 0x80
 8002eb6:	2122      	movs	r1, #34	@ 0x22
 8002eb8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eba:	f3ef 8310 	mrs	r3, PRIMASK
 8002ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eca:	f383 8810 	msr	PRIMASK, r3
}
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2101      	movs	r1, #1
 8002edc:	430a      	orrs	r2, r1
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee6:	f383 8810 	msr	PRIMASK, r3
}
 8002eea:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	2380      	movs	r3, #128	@ 0x80
 8002ef2:	015b      	lsls	r3, r3, #5
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d107      	bne.n	8002f08 <UART_Start_Receive_IT+0x108>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d103      	bne.n	8002f08 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a22      	ldr	r2, [pc, #136]	@ (8002f8c <UART_Start_Receive_IT+0x18c>)
 8002f04:	669a      	str	r2, [r3, #104]	@ 0x68
 8002f06:	e002      	b.n	8002f0e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a21      	ldr	r2, [pc, #132]	@ (8002f90 <UART_Start_Receive_IT+0x190>)
 8002f0c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d019      	beq.n	8002f4a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f16:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1a:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f1c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f20:	2301      	movs	r3, #1
 8002f22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	f383 8810 	msr	PRIMASK, r3
}
 8002f2a:	46c0      	nop			@ (mov r8, r8)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2190      	movs	r1, #144	@ 0x90
 8002f38:	0049      	lsls	r1, r1, #1
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f40:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	f383 8810 	msr	PRIMASK, r3
}
 8002f48:	e018      	b.n	8002f7c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4e:	613b      	str	r3, [r7, #16]
  return(result);
 8002f50:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002f52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f54:	2301      	movs	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f383 8810 	msr	PRIMASK, r3
}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2120      	movs	r1, #32
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f383 8810 	msr	PRIMASK, r3
}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b010      	add	sp, #64	@ 0x40
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	000001ff 	.word	0x000001ff
 8002f8c:	08003615 	.word	0x08003615
 8002f90:	0800345d 	.word	0x0800345d

08002f94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b090      	sub	sp, #64	@ 0x40
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	1dbb      	adds	r3, r7, #6
 8002fa0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1dba      	adds	r2, r7, #6
 8002fac:	2158      	movs	r1, #88	@ 0x58
 8002fae:	8812      	ldrh	r2, [r2, #0]
 8002fb0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2284      	movs	r2, #132	@ 0x84
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2280      	movs	r2, #128	@ 0x80
 8002fbe:	2122      	movs	r1, #34	@ 0x22
 8002fc0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d028      	beq.n	800301c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fce:	4a3e      	ldr	r2, [pc, #248]	@ (80030c8 <UART_Start_Receive_DMA+0x134>)
 8002fd0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd6:	4a3d      	ldr	r2, [pc, #244]	@ (80030cc <UART_Start_Receive_DMA+0x138>)
 8002fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fde:	4a3c      	ldr	r2, [pc, #240]	@ (80030d0 <UART_Start_Receive_DMA+0x13c>)
 8002fe0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3324      	adds	r3, #36	@ 0x24
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffa:	001a      	movs	r2, r3
 8002ffc:	1dbb      	adds	r3, r7, #6
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	f7fd ff76 	bl	8000ef0 <HAL_DMA_Start_IT>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d009      	beq.n	800301c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2284      	movs	r2, #132	@ 0x84
 800300c:	2110      	movs	r1, #16
 800300e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2280      	movs	r2, #128	@ 0x80
 8003014:	2120      	movs	r1, #32
 8003016:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e050      	b.n	80030be <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d019      	beq.n	8003058 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003024:	f3ef 8310 	mrs	r3, PRIMASK
 8003028:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800302a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800302c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800302e:	2301      	movs	r3, #1
 8003030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003034:	f383 8810 	msr	PRIMASK, r3
}
 8003038:	46c0      	nop			@ (mov r8, r8)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2180      	movs	r1, #128	@ 0x80
 8003046:	0049      	lsls	r1, r1, #1
 8003048:	430a      	orrs	r2, r1
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800304e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003052:	f383 8810 	msr	PRIMASK, r3
}
 8003056:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003058:	f3ef 8310 	mrs	r3, PRIMASK
 800305c:	613b      	str	r3, [r7, #16]
  return(result);
 800305e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003060:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003062:	2301      	movs	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f383 8810 	msr	PRIMASK, r3
}
 800306c:	46c0      	nop			@ (mov r8, r8)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2101      	movs	r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003080:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f383 8810 	msr	PRIMASK, r3
}
 8003088:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308a:	f3ef 8310 	mrs	r3, PRIMASK
 800308e:	61fb      	str	r3, [r7, #28]
  return(result);
 8003090:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003092:	637b      	str	r3, [r7, #52]	@ 0x34
 8003094:	2301      	movs	r3, #1
 8003096:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	f383 8810 	msr	PRIMASK, r3
}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2140      	movs	r1, #64	@ 0x40
 80030ac:	430a      	orrs	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	f383 8810 	msr	PRIMASK, r3
}
 80030ba:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	0018      	movs	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b010      	add	sp, #64	@ 0x40
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	080031e5 	.word	0x080031e5
 80030cc:	08003311 	.word	0x08003311
 80030d0:	08003353 	.word	0x08003353

080030d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030dc:	f3ef 8310 	mrs	r3, PRIMASK
 80030e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80030e2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	2301      	movs	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f383 8810 	msr	PRIMASK, r3
}
 80030f0:	46c0      	nop			@ (mov r8, r8)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	21c0      	movs	r1, #192	@ 0xc0
 80030fe:	438a      	bics	r2, r1
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f383 8810 	msr	PRIMASK, r3
}
 800310c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003114:	46c0      	nop			@ (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	b006      	add	sp, #24
 800311a:	bd80      	pop	{r7, pc}

0800311c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08e      	sub	sp, #56	@ 0x38
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003124:	f3ef 8310 	mrs	r3, PRIMASK
 8003128:	617b      	str	r3, [r7, #20]
  return(result);
 800312a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800312c:	637b      	str	r3, [r7, #52]	@ 0x34
 800312e:	2301      	movs	r3, #1
 8003130:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	f383 8810 	msr	PRIMASK, r3
}
 8003138:	46c0      	nop			@ (mov r8, r8)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4926      	ldr	r1, [pc, #152]	@ (80031e0 <UART_EndRxTransfer+0xc4>)
 8003146:	400a      	ands	r2, r1
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f383 8810 	msr	PRIMASK, r3
}
 8003154:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003156:	f3ef 8310 	mrs	r3, PRIMASK
 800315a:	623b      	str	r3, [r7, #32]
  return(result);
 800315c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003160:	2301      	movs	r3, #1
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	f383 8810 	msr	PRIMASK, r3
}
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2101      	movs	r1, #1
 8003178:	438a      	bics	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003182:	f383 8810 	msr	PRIMASK, r3
}
 8003186:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318c:	2b01      	cmp	r3, #1
 800318e:	d118      	bne.n	80031c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003190:	f3ef 8310 	mrs	r3, PRIMASK
 8003194:	60bb      	str	r3, [r7, #8]
  return(result);
 8003196:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800319a:	2301      	movs	r3, #1
 800319c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f383 8810 	msr	PRIMASK, r3
}
 80031a4:	46c0      	nop			@ (mov r8, r8)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2110      	movs	r1, #16
 80031b2:	438a      	bics	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f383 8810 	msr	PRIMASK, r3
}
 80031c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2280      	movs	r2, #128	@ 0x80
 80031c6:	2120      	movs	r1, #32
 80031c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	b00e      	add	sp, #56	@ 0x38
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	fffffedf 	.word	0xfffffedf

080031e4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b094      	sub	sp, #80	@ 0x50
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	d06f      	beq.n	80032da <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80031fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031fc:	225a      	movs	r2, #90	@ 0x5a
 80031fe:	2100      	movs	r1, #0
 8003200:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003202:	f3ef 8310 	mrs	r3, PRIMASK
 8003206:	61bb      	str	r3, [r7, #24]
  return(result);
 8003208:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800320a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800320c:	2301      	movs	r3, #1
 800320e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f383 8810 	msr	PRIMASK, r3
}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	493a      	ldr	r1, [pc, #232]	@ (800330c <UART_DMAReceiveCplt+0x128>)
 8003224:	400a      	ands	r2, r1
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800322a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	f383 8810 	msr	PRIMASK, r3
}
 8003232:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003234:	f3ef 8310 	mrs	r3, PRIMASK
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323c:	647b      	str	r3, [r7, #68]	@ 0x44
 800323e:	2301      	movs	r3, #1
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003244:	f383 8810 	msr	PRIMASK, r3
}
 8003248:	46c0      	nop			@ (mov r8, r8)
 800324a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	438a      	bics	r2, r1
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800325c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003260:	f383 8810 	msr	PRIMASK, r3
}
 8003264:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003266:	f3ef 8310 	mrs	r3, PRIMASK
 800326a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800326c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800326e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003270:	2301      	movs	r3, #1
 8003272:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003276:	f383 8810 	msr	PRIMASK, r3
}
 800327a:	46c0      	nop			@ (mov r8, r8)
 800327c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2140      	movs	r1, #64	@ 0x40
 8003288:	438a      	bics	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800328e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003292:	f383 8810 	msr	PRIMASK, r3
}
 8003296:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800329a:	2280      	movs	r2, #128	@ 0x80
 800329c:	2120      	movs	r1, #32
 800329e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d118      	bne.n	80032da <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a8:	f3ef 8310 	mrs	r3, PRIMASK
 80032ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80032ae:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032b2:	2301      	movs	r3, #1
 80032b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f383 8810 	msr	PRIMASK, r3
}
 80032bc:	46c0      	nop			@ (mov r8, r8)
 80032be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2110      	movs	r1, #16
 80032ca:	438a      	bics	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f383 8810 	msr	PRIMASK, r3
}
 80032d8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032dc:	2200      	movs	r2, #0
 80032de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d108      	bne.n	80032fa <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032ea:	2258      	movs	r2, #88	@ 0x58
 80032ec:	5a9a      	ldrh	r2, [r3, r2]
 80032ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032f0:	0011      	movs	r1, r2
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7fc ffc8 	bl	8000288 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032f8:	e003      	b.n	8003302 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80032fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7ff fa2b 	bl	8002758 <HAL_UART_RxCpltCallback>
}
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	46bd      	mov	sp, r7
 8003306:	b014      	add	sp, #80	@ 0x50
 8003308:	bd80      	pop	{r7, pc}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	fffffeff 	.word	0xfffffeff

08003310 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003328:	2b01      	cmp	r3, #1
 800332a:	d10a      	bne.n	8003342 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2258      	movs	r2, #88	@ 0x58
 8003330:	5a9b      	ldrh	r3, [r3, r2]
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	0011      	movs	r1, r2
 800333a:	0018      	movs	r0, r3
 800333c:	f7fc ffa4 	bl	8000288 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003340:	e003      	b.n	800334a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	0018      	movs	r0, r3
 8003346:	f7ff fa0f 	bl	8002768 <HAL_UART_RxHalfCpltCallback>
}
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	46bd      	mov	sp, r7
 800334e:	b004      	add	sp, #16
 8003350:	bd80      	pop	{r7, pc}

08003352 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003364:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2280      	movs	r2, #128	@ 0x80
 800336a:	589b      	ldr	r3, [r3, r2]
 800336c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2280      	movs	r2, #128	@ 0x80
 8003376:	4013      	ands	r3, r2
 8003378:	2b80      	cmp	r3, #128	@ 0x80
 800337a:	d10a      	bne.n	8003392 <UART_DMAError+0x40>
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b21      	cmp	r3, #33	@ 0x21
 8003380:	d107      	bne.n	8003392 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2252      	movs	r2, #82	@ 0x52
 8003386:	2100      	movs	r1, #0
 8003388:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	0018      	movs	r0, r3
 800338e:	f7ff fea1 	bl	80030d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2240      	movs	r2, #64	@ 0x40
 800339a:	4013      	ands	r3, r2
 800339c:	2b40      	cmp	r3, #64	@ 0x40
 800339e:	d10a      	bne.n	80033b6 <UART_DMAError+0x64>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b22      	cmp	r3, #34	@ 0x22
 80033a4:	d107      	bne.n	80033b6 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	225a      	movs	r2, #90	@ 0x5a
 80033aa:	2100      	movs	r1, #0
 80033ac:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff feb3 	bl	800311c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2284      	movs	r2, #132	@ 0x84
 80033ba:	589b      	ldr	r3, [r3, r2]
 80033bc:	2210      	movs	r2, #16
 80033be:	431a      	orrs	r2, r3
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2184      	movs	r1, #132	@ 0x84
 80033c4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7ff f9d5 	bl	8002778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033ce:	46c0      	nop			@ (mov r8, r8)
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b006      	add	sp, #24
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	225a      	movs	r2, #90	@ 0x5a
 80033e8:	2100      	movs	r1, #0
 80033ea:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2252      	movs	r2, #82	@ 0x52
 80033f0:	2100      	movs	r1, #0
 80033f2:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7ff f9be 	bl	8002778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033fc:	46c0      	nop			@ (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b004      	add	sp, #16
 8003402:	bd80      	pop	{r7, pc}

08003404 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340c:	f3ef 8310 	mrs	r3, PRIMASK
 8003410:	60bb      	str	r3, [r7, #8]
  return(result);
 8003412:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	2301      	movs	r3, #1
 8003418:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f383 8810 	msr	PRIMASK, r3
}
 8003420:	46c0      	nop			@ (mov r8, r8)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2140      	movs	r1, #64	@ 0x40
 800342e:	438a      	bics	r2, r1
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f383 8810 	msr	PRIMASK, r3
}
 800343c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	0018      	movs	r0, r3
 800344e:	f7ff f97b 	bl	8002748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003452:	46c0      	nop			@ (mov r8, r8)
 8003454:	46bd      	mov	sp, r7
 8003456:	b006      	add	sp, #24
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b094      	sub	sp, #80	@ 0x50
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003464:	204e      	movs	r0, #78	@ 0x4e
 8003466:	183b      	adds	r3, r7, r0
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	215c      	movs	r1, #92	@ 0x5c
 800346c:	5a52      	ldrh	r2, [r2, r1]
 800346e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2280      	movs	r2, #128	@ 0x80
 8003474:	589b      	ldr	r3, [r3, r2]
 8003476:	2b22      	cmp	r3, #34	@ 0x22
 8003478:	d000      	beq.n	800347c <UART_RxISR_8BIT+0x20>
 800347a:	e0ba      	b.n	80035f2 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	214c      	movs	r1, #76	@ 0x4c
 8003482:	187b      	adds	r3, r7, r1
 8003484:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8003486:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003488:	187b      	adds	r3, r7, r1
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	183b      	adds	r3, r7, r0
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b2d9      	uxtb	r1, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003498:	400a      	ands	r2, r1
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	225a      	movs	r2, #90	@ 0x5a
 80034ac:	5a9b      	ldrh	r3, [r3, r2]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b299      	uxth	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	225a      	movs	r2, #90	@ 0x5a
 80034b8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	225a      	movs	r2, #90	@ 0x5a
 80034be:	5a9b      	ldrh	r3, [r3, r2]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d000      	beq.n	80034c8 <UART_RxISR_8BIT+0x6c>
 80034c6:	e09c      	b.n	8003602 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c8:	f3ef 8310 	mrs	r3, PRIMASK
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034d2:	2301      	movs	r3, #1
 80034d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d8:	f383 8810 	msr	PRIMASK, r3
}
 80034dc:	46c0      	nop			@ (mov r8, r8)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4948      	ldr	r1, [pc, #288]	@ (800360c <UART_RxISR_8BIT+0x1b0>)
 80034ea:	400a      	ands	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f4:	f383 8810 	msr	PRIMASK, r3
}
 80034f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034fa:	f3ef 8310 	mrs	r3, PRIMASK
 80034fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003502:	647b      	str	r3, [r7, #68]	@ 0x44
 8003504:	2301      	movs	r3, #1
 8003506:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350a:	f383 8810 	msr	PRIMASK, r3
}
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2101      	movs	r1, #1
 800351c:	438a      	bics	r2, r1
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003522:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003526:	f383 8810 	msr	PRIMASK, r3
}
 800352a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2280      	movs	r2, #128	@ 0x80
 8003530:	2120      	movs	r1, #32
 8003532:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	2380      	movs	r3, #128	@ 0x80
 8003548:	041b      	lsls	r3, r3, #16
 800354a:	4013      	ands	r3, r2
 800354c:	d018      	beq.n	8003580 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800354e:	f3ef 8310 	mrs	r3, PRIMASK
 8003552:	61bb      	str	r3, [r7, #24]
  return(result);
 8003554:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003556:	643b      	str	r3, [r7, #64]	@ 0x40
 8003558:	2301      	movs	r3, #1
 800355a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f383 8810 	msr	PRIMASK, r3
}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4928      	ldr	r1, [pc, #160]	@ (8003610 <UART_RxISR_8BIT+0x1b4>)
 8003570:	400a      	ands	r2, r1
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003576:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	f383 8810 	msr	PRIMASK, r3
}
 800357e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003584:	2b01      	cmp	r3, #1
 8003586:	d12f      	bne.n	80035e8 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800358e:	f3ef 8310 	mrs	r3, PRIMASK
 8003592:	60fb      	str	r3, [r7, #12]
  return(result);
 8003594:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003598:	2301      	movs	r3, #1
 800359a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f383 8810 	msr	PRIMASK, r3
}
 80035a2:	46c0      	nop			@ (mov r8, r8)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2110      	movs	r1, #16
 80035b0:	438a      	bics	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f383 8810 	msr	PRIMASK, r3
}
 80035be:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	2210      	movs	r2, #16
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d103      	bne.n	80035d6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2210      	movs	r2, #16
 80035d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2258      	movs	r2, #88	@ 0x58
 80035da:	5a9a      	ldrh	r2, [r3, r2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	0011      	movs	r1, r2
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7fc fe51 	bl	8000288 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80035e6:	e00c      	b.n	8003602 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7ff f8b4 	bl	8002758 <HAL_UART_RxCpltCallback>
}
 80035f0:	e007      	b.n	8003602 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699a      	ldr	r2, [r3, #24]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2108      	movs	r1, #8
 80035fe:	430a      	orrs	r2, r1
 8003600:	619a      	str	r2, [r3, #24]
}
 8003602:	46c0      	nop			@ (mov r8, r8)
 8003604:	46bd      	mov	sp, r7
 8003606:	b014      	add	sp, #80	@ 0x50
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			@ (mov r8, r8)
 800360c:	fffffedf 	.word	0xfffffedf
 8003610:	fbffffff 	.word	0xfbffffff

08003614 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b094      	sub	sp, #80	@ 0x50
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800361c:	204e      	movs	r0, #78	@ 0x4e
 800361e:	183b      	adds	r3, r7, r0
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	215c      	movs	r1, #92	@ 0x5c
 8003624:	5a52      	ldrh	r2, [r2, r1]
 8003626:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2280      	movs	r2, #128	@ 0x80
 800362c:	589b      	ldr	r3, [r3, r2]
 800362e:	2b22      	cmp	r3, #34	@ 0x22
 8003630:	d000      	beq.n	8003634 <UART_RxISR_16BIT+0x20>
 8003632:	e0ba      	b.n	80037aa <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	214c      	movs	r1, #76	@ 0x4c
 800363a:	187b      	adds	r3, r7, r1
 800363c:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800363e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003644:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003646:	187b      	adds	r3, r7, r1
 8003648:	183a      	adds	r2, r7, r0
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	8812      	ldrh	r2, [r2, #0]
 800364e:	4013      	ands	r3, r2
 8003650:	b29a      	uxth	r2, r3
 8003652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003654:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365a:	1c9a      	adds	r2, r3, #2
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	225a      	movs	r2, #90	@ 0x5a
 8003664:	5a9b      	ldrh	r3, [r3, r2]
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b299      	uxth	r1, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	225a      	movs	r2, #90	@ 0x5a
 8003670:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	225a      	movs	r2, #90	@ 0x5a
 8003676:	5a9b      	ldrh	r3, [r3, r2]
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d000      	beq.n	8003680 <UART_RxISR_16BIT+0x6c>
 800367e:	e09c      	b.n	80037ba <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003680:	f3ef 8310 	mrs	r3, PRIMASK
 8003684:	623b      	str	r3, [r7, #32]
  return(result);
 8003686:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003688:	647b      	str	r3, [r7, #68]	@ 0x44
 800368a:	2301      	movs	r3, #1
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	f383 8810 	msr	PRIMASK, r3
}
 8003694:	46c0      	nop			@ (mov r8, r8)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4948      	ldr	r1, [pc, #288]	@ (80037c4 <UART_RxISR_16BIT+0x1b0>)
 80036a2:	400a      	ands	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b2:	f3ef 8310 	mrs	r3, PRIMASK
 80036b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80036b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80036bc:	2301      	movs	r3, #1
 80036be:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c2:	f383 8810 	msr	PRIMASK, r3
}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2101      	movs	r1, #1
 80036d4:	438a      	bics	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036da:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036de:	f383 8810 	msr	PRIMASK, r3
}
 80036e2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2280      	movs	r2, #128	@ 0x80
 80036e8:	2120      	movs	r1, #32
 80036ea:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	2380      	movs	r3, #128	@ 0x80
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	4013      	ands	r3, r2
 8003704:	d018      	beq.n	8003738 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003706:	f3ef 8310 	mrs	r3, PRIMASK
 800370a:	617b      	str	r3, [r7, #20]
  return(result);
 800370c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800370e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003710:	2301      	movs	r3, #1
 8003712:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f383 8810 	msr	PRIMASK, r3
}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4928      	ldr	r1, [pc, #160]	@ (80037c8 <UART_RxISR_16BIT+0x1b4>)
 8003728:	400a      	ands	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800372e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f383 8810 	msr	PRIMASK, r3
}
 8003736:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373c:	2b01      	cmp	r3, #1
 800373e:	d12f      	bne.n	80037a0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003746:	f3ef 8310 	mrs	r3, PRIMASK
 800374a:	60bb      	str	r3, [r7, #8]
  return(result);
 800374c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800374e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003750:	2301      	movs	r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f383 8810 	msr	PRIMASK, r3
}
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2110      	movs	r1, #16
 8003768:	438a      	bics	r2, r1
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f383 8810 	msr	PRIMASK, r3
}
 8003776:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	2210      	movs	r2, #16
 8003780:	4013      	ands	r3, r2
 8003782:	2b10      	cmp	r3, #16
 8003784:	d103      	bne.n	800378e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2210      	movs	r2, #16
 800378c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2258      	movs	r2, #88	@ 0x58
 8003792:	5a9a      	ldrh	r2, [r3, r2]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0011      	movs	r1, r2
 8003798:	0018      	movs	r0, r3
 800379a:	f7fc fd75 	bl	8000288 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800379e:	e00c      	b.n	80037ba <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7fe ffd8 	bl	8002758 <HAL_UART_RxCpltCallback>
}
 80037a8:	e007      	b.n	80037ba <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699a      	ldr	r2, [r3, #24]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2108      	movs	r1, #8
 80037b6:	430a      	orrs	r2, r1
 80037b8:	619a      	str	r2, [r3, #24]
}
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	b014      	add	sp, #80	@ 0x50
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	fffffedf 	.word	0xfffffedf
 80037c8:	fbffffff 	.word	0xfbffffff

080037cc <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	@ 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	1dbb      	adds	r3, r7, #6
 80037d8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037da:	2327      	movs	r3, #39	@ 0x27
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2280      	movs	r2, #128	@ 0x80
 80037e6:	589b      	ldr	r3, [r3, r2]
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d14e      	bne.n	800388a <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
 80037f2:	1dbb      	adds	r3, r7, #6
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_UARTEx_ReceiveToIdle_IT+0x32>
    {
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e046      	b.n	800388c <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	2380      	movs	r3, #128	@ 0x80
 8003804:	015b      	lsls	r3, r3, #5
 8003806:	429a      	cmp	r2, r3
 8003808:	d109      	bne.n	800381e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d105      	bne.n	800381e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2201      	movs	r2, #1
 8003816:	4013      	ands	r3, r2
 8003818:	d001      	beq.n	800381e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
      {
        return  HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e036      	b.n	800388c <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800382a:	1dbb      	adds	r3, r7, #6
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	0018      	movs	r0, r3
 8003834:	f7ff fae4 	bl	8002e00 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383c:	2b01      	cmp	r3, #1
 800383e:	d11c      	bne.n	800387a <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2210      	movs	r2, #16
 8003846:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003848:	f3ef 8310 	mrs	r3, PRIMASK
 800384c:	617b      	str	r3, [r7, #20]
  return(result);
 800384e:	697b      	ldr	r3, [r7, #20]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003850:	623b      	str	r3, [r7, #32]
 8003852:	2301      	movs	r3, #1
 8003854:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f383 8810 	msr	PRIMASK, r3
}
 800385c:	46c0      	nop			@ (mov r8, r8)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2110      	movs	r1, #16
 800386a:	430a      	orrs	r2, r1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f383 8810 	msr	PRIMASK, r3
}
 8003878:	e003      	b.n	8003882 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800387a:	2327      	movs	r3, #39	@ 0x27
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	2201      	movs	r2, #1
 8003880:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8003882:	2327      	movs	r3, #39	@ 0x27
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	e000      	b.n	800388c <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 800388a:	2302      	movs	r3, #2
  }
}
 800388c:	0018      	movs	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	b00a      	add	sp, #40	@ 0x28
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003894:	b5b0      	push	{r4, r5, r7, lr}
 8003896:	b08a      	sub	sp, #40	@ 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	1dbb      	adds	r3, r7, #6
 80038a0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2280      	movs	r2, #128	@ 0x80
 80038a6:	589b      	ldr	r3, [r3, r2]
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d156      	bne.n	800395a <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80038b2:	1dbb      	adds	r3, r7, #6
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e04e      	b.n	800395c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	2380      	movs	r3, #128	@ 0x80
 80038c4:	015b      	lsls	r3, r3, #5
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d109      	bne.n	80038de <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d105      	bne.n	80038de <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2201      	movs	r2, #1
 80038d6:	4013      	ands	r3, r2
 80038d8:	d001      	beq.n	80038de <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e03e      	b.n	800395c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80038ea:	2527      	movs	r5, #39	@ 0x27
 80038ec:	197c      	adds	r4, r7, r5
 80038ee:	1dbb      	adds	r3, r7, #6
 80038f0:	881a      	ldrh	r2, [r3, #0]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7ff fb4c 	bl	8002f94 <UART_Start_Receive_DMA>
 80038fc:	0003      	movs	r3, r0
 80038fe:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003900:	197b      	adds	r3, r7, r5
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d124      	bne.n	8003952 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800390c:	2b01      	cmp	r3, #1
 800390e:	d11c      	bne.n	800394a <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2210      	movs	r2, #16
 8003916:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003918:	f3ef 8310 	mrs	r3, PRIMASK
 800391c:	617b      	str	r3, [r7, #20]
  return(result);
 800391e:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003920:	623b      	str	r3, [r7, #32]
 8003922:	2301      	movs	r3, #1
 8003924:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f383 8810 	msr	PRIMASK, r3
}
 800392c:	46c0      	nop			@ (mov r8, r8)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2110      	movs	r1, #16
 800393a:	430a      	orrs	r2, r1
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f383 8810 	msr	PRIMASK, r3
}
 8003948:	e003      	b.n	8003952 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800394a:	2327      	movs	r3, #39	@ 0x27
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8003952:	2327      	movs	r3, #39	@ 0x27
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	e000      	b.n	800395c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b00a      	add	sp, #40	@ 0x28
 8003962:	bdb0      	pop	{r4, r5, r7, pc}

08003964 <memset>:
 8003964:	0003      	movs	r3, r0
 8003966:	1882      	adds	r2, r0, r2
 8003968:	4293      	cmp	r3, r2
 800396a:	d100      	bne.n	800396e <memset+0xa>
 800396c:	4770      	bx	lr
 800396e:	7019      	strb	r1, [r3, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	e7f9      	b.n	8003968 <memset+0x4>

08003974 <__libc_init_array>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	2600      	movs	r6, #0
 8003978:	4c0c      	ldr	r4, [pc, #48]	@ (80039ac <__libc_init_array+0x38>)
 800397a:	4d0d      	ldr	r5, [pc, #52]	@ (80039b0 <__libc_init_array+0x3c>)
 800397c:	1b64      	subs	r4, r4, r5
 800397e:	10a4      	asrs	r4, r4, #2
 8003980:	42a6      	cmp	r6, r4
 8003982:	d109      	bne.n	8003998 <__libc_init_array+0x24>
 8003984:	2600      	movs	r6, #0
 8003986:	f000 f819 	bl	80039bc <_init>
 800398a:	4c0a      	ldr	r4, [pc, #40]	@ (80039b4 <__libc_init_array+0x40>)
 800398c:	4d0a      	ldr	r5, [pc, #40]	@ (80039b8 <__libc_init_array+0x44>)
 800398e:	1b64      	subs	r4, r4, r5
 8003990:	10a4      	asrs	r4, r4, #2
 8003992:	42a6      	cmp	r6, r4
 8003994:	d105      	bne.n	80039a2 <__libc_init_array+0x2e>
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	00b3      	lsls	r3, r6, #2
 800399a:	58eb      	ldr	r3, [r5, r3]
 800399c:	4798      	blx	r3
 800399e:	3601      	adds	r6, #1
 80039a0:	e7ee      	b.n	8003980 <__libc_init_array+0xc>
 80039a2:	00b3      	lsls	r3, r6, #2
 80039a4:	58eb      	ldr	r3, [r5, r3]
 80039a6:	4798      	blx	r3
 80039a8:	3601      	adds	r6, #1
 80039aa:	e7f2      	b.n	8003992 <__libc_init_array+0x1e>
 80039ac:	08003a0c 	.word	0x08003a0c
 80039b0:	08003a0c 	.word	0x08003a0c
 80039b4:	08003a10 	.word	0x08003a10
 80039b8:	08003a0c 	.word	0x08003a0c

080039bc <_init>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	46c0      	nop			@ (mov r8, r8)
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr

080039c8 <_fini>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr
